/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

module derelict.glib.gdatetime;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gdate;
import derelict.glib.gtimezone;
import core.stdc.time;
import core.stdc.config;

extern (C):

alias c_long GTimeSpan;
alias _GDateTime GDateTime;

struct _GDateTime;

extern( C ) nothrow
{
    alias da_g_date_time_unref = void function(GDateTime* datetime);																									
    alias da_g_date_time_ref = GDateTime* function(GDateTime* datetime);																								
    alias da_g_date_time_new_now = GDateTime* function(GTimeZone* tz);																									
    alias da_g_date_time_new_now_local = GDateTime* function();																											
    alias da_g_date_time_new_now_utc = GDateTime* function();																											
    alias da_g_date_time_new_from_unix_local = GDateTime* function(gint64 t);																							
    alias da_g_date_time_new_from_unix_utc = GDateTime* function(gint64 t);																								
    alias da_g_date_time_new_from_timeval_local = GDateTime* function(const(GTimeVal)* tv);																				
    alias da_g_date_time_new_from_timeval_utc = GDateTime* function(const(GTimeVal)* tv);																				
    alias da_g_date_time_new = GDateTime* function(GTimeZone* tz, gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);							
    alias da_g_date_time_new_local = GDateTime* function(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);										
    alias da_g_date_time_new_utc = GDateTime* function(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);										
    alias da_g_date_time_add = GDateTime* function(GDateTime* datetime, GTimeSpan timespan);																			
    alias da_g_date_time_add_years = GDateTime* function(GDateTime* datetime, gint years);																				
    alias da_g_date_time_add_months = GDateTime* function(GDateTime* datetime, gint months);																			
    alias da_g_date_time_add_weeks = GDateTime* function(GDateTime* datetime, gint weeks);																				
    alias da_g_date_time_add_days = GDateTime* function(GDateTime* datetime, gint days);																				
    alias da_g_date_time_add_hours = GDateTime* function(GDateTime* datetime, gint hours);																				
    alias da_g_date_time_add_minutes = GDateTime* function(GDateTime* datetime, gint minutes);																			
    alias da_g_date_time_add_seconds = GDateTime* function(GDateTime* datetime, gdouble seconds);																		
    alias da_g_date_time_add_full = GDateTime* function(GDateTime* datetime, gint years, gint months, gint days, gint hours, gint minutes, gdouble seconds);			
    alias da_g_date_time_compare = gint function(gconstpointer dt1, gconstpointer dt2);																					
    alias da_g_date_time_difference = GTimeSpan function(GDateTime* end, GDateTime* begin);																				
    alias da_g_date_time_hash = guint function(gconstpointer datetime);																									
    alias da_g_date_time_equal = gboolean function(gconstpointer dt1, gconstpointer dt2);																				
    alias da_g_date_time_get_ymd = void function(GDateTime* datetime, gint* year, gint* month, gint* day);																
    alias da_g_date_time_get_year = gint function(GDateTime* datetime);																									
    alias da_g_date_time_get_month = gint function(GDateTime* datetime);																								
    alias da_g_date_time_get_day_of_month = gint function(GDateTime* datetime);																							
    alias da_g_date_time_get_week_numbering_year = gint function(GDateTime* datetime);																					
    alias da_g_date_time_get_week_of_year = gint function(GDateTime* datetime);																							
    alias da_g_date_time_get_day_of_week = gint function(GDateTime* datetime);																							
    alias da_g_date_time_get_day_of_year = gint function(GDateTime* datetime);																							
    alias da_g_date_time_get_hour = gint function(GDateTime* datetime);																									
    alias da_g_date_time_get_minute = gint function(GDateTime* datetime);																								
    alias da_g_date_time_get_second = gint function(GDateTime* datetime);																								
    alias da_g_date_time_get_microsecond = gint function(GDateTime* datetime);																							
    alias da_g_date_time_get_seconds = gdouble function(GDateTime* datetime);																							
    alias da_g_date_time_to_unix = gint64 function(GDateTime* datetime);																								
    alias da_g_date_time_to_timeval = gboolean function(GDateTime* datetime, GTimeVal* tv);																				
    alias da_g_date_time_get_utc_offset = GTimeSpan function(GDateTime* datetime);																						
    alias da_g_date_time_get_timezone_abbreviation = const(gchar)* function(GDateTime* datetime);																		
    alias da_g_date_time_is_daylight_savings = gboolean function(GDateTime* datetime);																					
    alias da_g_date_time_to_timezone = GDateTime* function(GDateTime* datetime, GTimeZone* tz);																			
    alias da_g_date_time_to_local = GDateTime* function(GDateTime* datetime);																							
    alias da_g_date_time_to_utc = GDateTime* function(GDateTime* datetime);																								
    alias da_g_date_time_format = gchar* function(GDateTime* datetime, const(gchar)* format);																			
}

__gshared
{
    da_g_date_time_unref g_date_time_unref; 
    da_g_date_time_ref g_date_time_ref; 
    da_g_date_time_new_now g_date_time_new_now; 
    da_g_date_time_new_now_local g_date_time_new_now_local; 
    da_g_date_time_new_now_utc g_date_time_new_now_utc; 
    da_g_date_time_new_from_unix_local g_date_time_new_from_unix_local; 
    da_g_date_time_new_from_unix_utc g_date_time_new_from_unix_utc; 
    da_g_date_time_new_from_timeval_local g_date_time_new_from_timeval_local; 
    da_g_date_time_new_from_timeval_utc g_date_time_new_from_timeval_utc; 
    da_g_date_time_new g_date_time_new; 
    da_g_date_time_new_local g_date_time_new_local; 
    da_g_date_time_new_utc g_date_time_new_utc; 
    da_g_date_time_add g_date_time_add; 
    da_g_date_time_add_years g_date_time_add_years; 
    da_g_date_time_add_months g_date_time_add_months; 
    da_g_date_time_add_weeks g_date_time_add_weeks; 
    da_g_date_time_add_days g_date_time_add_days; 
    da_g_date_time_add_hours g_date_time_add_hours; 
    da_g_date_time_add_minutes g_date_time_add_minutes; 
    da_g_date_time_add_seconds g_date_time_add_seconds; 
    da_g_date_time_add_full g_date_time_add_full; 
    da_g_date_time_compare g_date_time_compare; 
    da_g_date_time_difference g_date_time_difference; 
    da_g_date_time_hash g_date_time_hash; 
    da_g_date_time_equal g_date_time_equal; 
    da_g_date_time_get_ymd g_date_time_get_ymd; 
    da_g_date_time_get_year g_date_time_get_year; 
    da_g_date_time_get_month g_date_time_get_month; 
    da_g_date_time_get_day_of_month g_date_time_get_day_of_month; 
    da_g_date_time_get_week_numbering_year g_date_time_get_week_numbering_year; 
    da_g_date_time_get_week_of_year g_date_time_get_week_of_year; 
    da_g_date_time_get_day_of_week g_date_time_get_day_of_week; 
    da_g_date_time_get_day_of_year g_date_time_get_day_of_year; 
    da_g_date_time_get_hour g_date_time_get_hour; 
    da_g_date_time_get_minute g_date_time_get_minute; 
    da_g_date_time_get_second g_date_time_get_second; 
    da_g_date_time_get_microsecond g_date_time_get_microsecond; 
    da_g_date_time_get_seconds g_date_time_get_seconds; 
    da_g_date_time_to_unix g_date_time_to_unix; 
    da_g_date_time_to_timeval g_date_time_to_timeval; 
    da_g_date_time_get_utc_offset g_date_time_get_utc_offset; 
    da_g_date_time_get_timezone_abbreviation g_date_time_get_timezone_abbreviation; 
    da_g_date_time_is_daylight_savings g_date_time_is_daylight_savings; 
    da_g_date_time_to_timezone g_date_time_to_timezone; 
    da_g_date_time_to_local g_date_time_to_local; 
    da_g_date_time_to_utc g_date_time_to_utc; 
    da_g_date_time_format g_date_time_format; 
}