/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.glist;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gnode;

extern (C):

alias _GList GList;

struct _GList
{
	gpointer data;
	GList* next;
	GList* prev;
}

extern( C ) nothrow 
{
	alias da_g_list_alloc = GList* function();																								
    alias da_g_list_free = void function(GList* list);																						
    alias da_g_list_free_1 = void function(GList* list);																					
    alias da_g_list_free_full = void function(GList* list, GDestroyNotify free_func);														
    alias da_g_list_append = GList* function(GList* list, gpointer data);																	
    alias da_g_list_prepend = GList* function(GList* list, gpointer data);																	
    alias da_g_list_insert = GList* function(GList* list, gpointer data, gint position);													
    alias da_g_list_insert_sorted = GList* function(GList* list, gpointer data, GCompareFunc func);											
    alias da_g_list_insert_sorted_with_data = GList* function(GList* list, gpointer data, GCompareDataFunc func, gpointer user_data);		
    alias da_g_list_insert_before = GList* function(GList* list, GList* sibling, gpointer data);											
    alias da_g_list_concat = GList* function(GList* list1, GList* list2);																	
    alias da_g_list_remove = GList* function(GList* list, gconstpointer data);																
    alias da_g_list_remove_all = GList* function(GList* list, gconstpointer data);															
    alias da_g_list_remove_link = GList* function(GList* list, GList* llink);																
    alias da_g_list_delete_link = GList* function(GList* list, GList* link_);																
    alias da_g_list_reverse = GList* function(GList* list);																					
    alias da_g_list_copy = GList* function(GList* list);	
    alias da_g_list_copy_deep = GList* function(GList *list, GCopyFunc func, gpointer user_data);
    alias da_g_list_nth = GList* function(GList* list, guint n);																			
    alias da_g_list_nth_prev = GList* function(GList* list, guint n);																		
    alias da_g_list_find = GList* function(GList* list, gconstpointer data);																
    alias da_g_list_find_custom = GList* function(GList* list, gconstpointer data, GCompareFunc func);										
    alias da_g_list_position = gint function(GList* list, GList* llink);																	
    alias da_g_list_index = gint function(GList* list, gconstpointer data);																	
    alias da_g_list_last = GList* function(GList* list);																					
    alias da_g_list_first = GList* function(GList* list);																					
    alias da_g_list_length = guint function(GList* list);																					
    alias da_g_list_foreach = void function(GList* list, GFunc func, gpointer user_data);													
    alias da_g_list_sort = GList* function(GList* list, GCompareFunc compare_func);															
    alias da_g_list_sort_with_data = GList* function(GList* list, GCompareDataFunc compare_func, gpointer user_data);						
    alias da_g_list_nth_data = gpointer function(GList* list, guint n);																		
}

__gshared
{
    da_g_list_alloc g_list_alloc; 
    da_g_list_free g_list_free; 
    da_g_list_free_1 g_list_free_1; 
    da_g_list_free_full g_list_free_full; 
    da_g_list_append g_list_append; 
    da_g_list_prepend g_list_prepend; 
    da_g_list_insert g_list_insert; 
    da_g_list_insert_sorted g_list_insert_sorted; 
    da_g_list_insert_sorted_with_data g_list_insert_sorted_with_data; 
    da_g_list_insert_before g_list_insert_before; 
    da_g_list_concat g_list_concat; 
    da_g_list_remove g_list_remove; 
    da_g_list_remove_all g_list_remove_all; 
    da_g_list_remove_link g_list_remove_link; 
    da_g_list_delete_link g_list_delete_link; 
    da_g_list_reverse g_list_reverse; 
    da_g_list_copy g_list_copy; 
    da_g_list_copy_deep g_list_copy_deep;
    da_g_list_nth g_list_nth; 
    da_g_list_nth_prev g_list_nth_prev; 
    da_g_list_find g_list_find; 
    da_g_list_find_custom g_list_find_custom; 
    da_g_list_position g_list_position; 
    da_g_list_index g_list_index; 
    da_g_list_last g_list_last; 
    da_g_list_first g_list_first; 
    da_g_list_length g_list_length; 
    da_g_list_foreach g_list_foreach; 
    da_g_list_sort g_list_sort; 
    da_g_list_sort_with_data g_list_sort_with_data; 
    da_g_list_nth_data g_list_nth_data; 
}



