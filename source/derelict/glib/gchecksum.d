/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

module derelict.glib.gchecksum;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import core.stdc.config;

extern (C):

alias _Anonymous_0 GChecksumType;
alias _GChecksum GChecksum;

enum _Anonymous_0
{
	G_CHECKSUM_MD5 = 0,
	G_CHECKSUM_SHA1 = 1,
	G_CHECKSUM_SHA256 = 2
}

struct _GChecksum;

extern( C ) nothrow 
{
    alias da_g_checksum_type_get_length = gssize function(GChecksumType checksum_type);											
    alias da_g_checksum_new = GChecksum* function(GChecksumType checksum_type);													
    alias da_g_checksum_reset = void function(GChecksum* checksum);																
    alias da_g_checksum_copy = GChecksum* function(const(GChecksum)* checksum);													
    alias da_g_checksum_free = void function(GChecksum* checksum);																
    alias da_g_checksum_update = void function(GChecksum* checksum, const(guchar)* data, gssize length);						
    alias da_g_checksum_get_string = const(gchar)* function(GChecksum* checksum);												
    alias da_g_checksum_get_digest = void function(GChecksum* checksum, guint8* buffer, gsize* digest_len);						
    alias da_g_compute_checksum_for_data = gchar* function(GChecksumType checksum_type, const(guchar)* data, gsize length);		
    alias da_g_compute_checksum_for_string = gchar* function(GChecksumType checksum_type, const(gchar)* str, gssize length);	
}

__gshared
{
    da_g_checksum_type_get_length g_checksum_type_get_length; 
    da_g_checksum_new g_checksum_new; 
    da_g_checksum_reset g_checksum_reset; 
    da_g_checksum_copy g_checksum_copy; 
    da_g_checksum_free g_checksum_free; 
    da_g_checksum_update g_checksum_update; 
    da_g_checksum_get_string g_checksum_get_string; 
    da_g_checksum_get_digest g_checksum_get_digest; 
    da_g_compute_checksum_for_data g_compute_checksum_for_data; 
    da_g_compute_checksum_for_string g_compute_checksum_for_string; 
}