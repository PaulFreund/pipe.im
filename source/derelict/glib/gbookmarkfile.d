/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

module derelict.glib.gbookmarkfile;

import derelict.glib.gerror;
import derelict.glib.gtypes;
import derelict.glib.gquark;
import derelict.glib.glibconfig;
import core.stdc.config;
import core.stdc.time;

alias _Anonymous_0 GBookmarkFileError;
alias _GBookmarkFile GBookmarkFile;

enum _Anonymous_0
{
	G_BOOKMARK_FILE_ERROR_INVALID_URI = 0,
	G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1,
	G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2,
	G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3,
	G_BOOKMARK_FILE_ERROR_READ = 4,
	G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5,
	G_BOOKMARK_FILE_ERROR_WRITE = 6,
	G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7
}

struct _GBookmarkFile;

extern( C ) nothrow 
{
    alias da_g_bookmark_file_error_quark = GQuark function();																																			
    alias da_g_bookmark_file_new = GBookmarkFile* function();																																			
    alias da_g_bookmark_file_free = void function(GBookmarkFile* bookmark);																																
    alias da_g_bookmark_file_load_from_file = gboolean function(GBookmarkFile* bookmark, const(gchar)* filename, GError** error);																		
    alias da_g_bookmark_file_load_from_data = gboolean function(GBookmarkFile* bookmark, const(gchar)* data, gsize length, GError** error);																
    alias da_g_bookmark_file_load_from_data_dirs = gboolean function(GBookmarkFile* bookmark, const(gchar)* file, gchar** full_path, GError** error);													
    alias da_g_bookmark_file_to_data = gchar* function(GBookmarkFile* bookmark, gsize* length, GError** error);																							
    alias da_g_bookmark_file_to_file = gboolean function(GBookmarkFile* bookmark, const(gchar)* filename, GError** error);																				
    alias da_g_bookmark_file_set_title = void function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar)* title);																				
    alias da_g_bookmark_file_get_title = gchar* function(GBookmarkFile* bookmark, const(gchar)* uri, GError** error);																					
    alias da_g_bookmark_file_set_description = void function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar)* description);																	
    alias da_g_bookmark_file_get_description = gchar* function(GBookmarkFile* bookmark, const(gchar)* uri, GError** error);																				
    alias da_g_bookmark_file_set_mime_type = void function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar)* mime_type);																		
    alias da_g_bookmark_file_get_mime_type = gchar* function(GBookmarkFile* bookmark, const(gchar)* uri, GError** error);																				
    alias da_g_bookmark_file_set_groups = void function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar*)* groups, gsize length);																
    alias da_g_bookmark_file_add_group = void function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar)* group);																				
    alias da_g_bookmark_file_has_group = gboolean function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar)* group, GError** error);															
    alias da_g_bookmark_file_get_groups = gchar** function(GBookmarkFile* bookmark, const(gchar)* uri, gsize* length, GError** error);																	
    alias da_g_bookmark_file_add_application = void function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar)* name, const(gchar)* exec);														
    alias da_g_bookmark_file_has_application = gboolean function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar)* name, GError** error);														
    alias da_g_bookmark_file_get_applications = gchar** function(GBookmarkFile* bookmark, const(gchar)* uri, gsize* length, GError** error);															
    alias da_g_bookmark_file_set_app_info = gboolean function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar)* name, const(gchar)* exec, gint count, time_t stamp, GError** error);			
    alias da_g_bookmark_file_get_app_info = gboolean function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar)* name, gchar** exec, guint* count, time_t* stamp, GError** error);				
    alias da_g_bookmark_file_set_is_private = void function(GBookmarkFile* bookmark, const(gchar)* uri, gboolean is_private);																			
    alias da_g_bookmark_file_get_is_private = gboolean function(GBookmarkFile* bookmark, const(gchar)* uri, GError** error);																			
    alias da_g_bookmark_file_set_icon = void function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar)* href, const(gchar)* mime_type);															
    alias da_g_bookmark_file_get_icon = gboolean function(GBookmarkFile* bookmark, const(gchar)* uri, gchar** href, gchar** mime_type, GError** error);													
    alias da_g_bookmark_file_set_added = void function(GBookmarkFile* bookmark, const(gchar)* uri, time_t added);																						
    alias da_g_bookmark_file_get_added = time_t function(GBookmarkFile* bookmark, const(gchar)* uri, GError** error);																					
    alias da_g_bookmark_file_set_modified = void function(GBookmarkFile* bookmark, const(gchar)* uri, time_t modified);																					
    alias da_g_bookmark_file_get_modified = time_t function(GBookmarkFile* bookmark, const(gchar)* uri, GError** error);																				
    alias da_g_bookmark_file_set_visited = void function(GBookmarkFile* bookmark, const(gchar)* uri, time_t visited);																					
    alias da_g_bookmark_file_get_visited = time_t function(GBookmarkFile* bookmark, const(gchar)* uri, GError** error);																					
    alias da_g_bookmark_file_has_item = gboolean function(GBookmarkFile* bookmark, const(gchar)* uri);																									
    alias da_g_bookmark_file_get_size = gint function(GBookmarkFile* bookmark);																															
    alias da_g_bookmark_file_get_uris = gchar** function(GBookmarkFile* bookmark, gsize* length);																										
    alias da_g_bookmark_file_remove_group = gboolean function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar)* group, GError** error);															
    alias da_g_bookmark_file_remove_application = gboolean function(GBookmarkFile* bookmark, const(gchar)* uri, const(gchar)* name, GError** error);													
    alias da_g_bookmark_file_remove_item = gboolean function(GBookmarkFile* bookmark, const(gchar)* uri, GError** error);																				
    alias da_g_bookmark_file_move_item = gboolean function(GBookmarkFile* bookmark, const(gchar)* old_uri, const(gchar)* new_uri, GError** error);														
}

__gshared
{
    da_g_bookmark_file_error_quark g_bookmark_file_error_quark; 
    da_g_bookmark_file_new g_bookmark_file_new; 
    da_g_bookmark_file_free g_bookmark_file_free; 
    da_g_bookmark_file_load_from_file g_bookmark_file_load_from_file; 
    da_g_bookmark_file_load_from_data g_bookmark_file_load_from_data; 
    da_g_bookmark_file_load_from_data_dirs g_bookmark_file_load_from_data_dirs; 
    da_g_bookmark_file_to_data g_bookmark_file_to_data; 
    da_g_bookmark_file_to_file g_bookmark_file_to_file; 
    da_g_bookmark_file_set_title g_bookmark_file_set_title; 
    da_g_bookmark_file_get_title g_bookmark_file_get_title; 
    da_g_bookmark_file_set_description g_bookmark_file_set_description; 
    da_g_bookmark_file_get_description g_bookmark_file_get_description; 
    da_g_bookmark_file_set_mime_type g_bookmark_file_set_mime_type; 
    da_g_bookmark_file_get_mime_type g_bookmark_file_get_mime_type; 
    da_g_bookmark_file_set_groups g_bookmark_file_set_groups; 
    da_g_bookmark_file_add_group g_bookmark_file_add_group; 
    da_g_bookmark_file_has_group g_bookmark_file_has_group; 
    da_g_bookmark_file_get_groups g_bookmark_file_get_groups; 
    da_g_bookmark_file_add_application g_bookmark_file_add_application; 
    da_g_bookmark_file_has_application g_bookmark_file_has_application; 
    da_g_bookmark_file_get_applications g_bookmark_file_get_applications; 
    da_g_bookmark_file_set_app_info g_bookmark_file_set_app_info; 
    da_g_bookmark_file_get_app_info g_bookmark_file_get_app_info; 
    da_g_bookmark_file_set_is_private g_bookmark_file_set_is_private; 
    da_g_bookmark_file_get_is_private g_bookmark_file_get_is_private; 
    da_g_bookmark_file_set_icon g_bookmark_file_set_icon; 
    da_g_bookmark_file_get_icon g_bookmark_file_get_icon; 
    da_g_bookmark_file_set_added g_bookmark_file_set_added; 
    da_g_bookmark_file_get_added g_bookmark_file_get_added; 
    da_g_bookmark_file_set_modified g_bookmark_file_set_modified; 
    da_g_bookmark_file_get_modified g_bookmark_file_get_modified; 
    da_g_bookmark_file_set_visited g_bookmark_file_set_visited; 
    da_g_bookmark_file_get_visited g_bookmark_file_get_visited; 
    da_g_bookmark_file_has_item g_bookmark_file_has_item; 
    da_g_bookmark_file_get_size g_bookmark_file_get_size; 
    da_g_bookmark_file_get_uris g_bookmark_file_get_uris; 
    da_g_bookmark_file_remove_group g_bookmark_file_remove_group; 
    da_g_bookmark_file_remove_application g_bookmark_file_remove_application; 
    da_g_bookmark_file_remove_item g_bookmark_file_remove_item; 
    da_g_bookmark_file_move_item g_bookmark_file_move_item; 
}


