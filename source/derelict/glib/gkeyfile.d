/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.gkeyfile;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gerror;
import derelict.glib.gquark;
import core.stdc.config;

extern (C):

alias _Anonymous_0 GKeyFileError;
alias _GKeyFile GKeyFile;
alias _Anonymous_1 GKeyFileFlags;

enum _Anonymous_0
{
	G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0,
	G_KEY_FILE_ERROR_PARSE = 1,
	G_KEY_FILE_ERROR_NOT_FOUND = 2,
	G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3,
	G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4,
	G_KEY_FILE_ERROR_INVALID_VALUE = 5
}

enum _Anonymous_1
{
	G_KEY_FILE_NONE = 0,
	G_KEY_FILE_KEEP_COMMENTS = 1,
	G_KEY_FILE_KEEP_TRANSLATIONS = 2
}

struct _GKeyFile;

extern( C ) nothrow 
{
    alias da_g_key_file_error_quark = GQuark function();																																		
    alias da_g_key_file_new = GKeyFile* function();																																				
    alias da_g_key_file_ref = GKeyFile* function(GKeyFile* key_file);																															
    alias da_g_key_file_unref = void function(GKeyFile* key_file);																																
    alias da_g_key_file_free = void function(GKeyFile* key_file);																																
    alias da_g_key_file_set_list_separator = void function(GKeyFile* key_file, gchar separator);																								
    alias da_g_key_file_load_from_file = gboolean function(GKeyFile* key_file, const(gchar)* file, GKeyFileFlags flags, GError** error);														
    alias da_g_key_file_load_from_data = gboolean function(GKeyFile* key_file, const(gchar)* data, gsize length, GKeyFileFlags flags, GError** error);											
    alias da_g_key_file_load_from_dirs = gboolean function(GKeyFile* key_file, const(gchar)* file, const(gchar*)* search_dirs, gchar** full_path, GKeyFileFlags flags, GError** error);			
    alias da_g_key_file_load_from_data_dirs = gboolean function(GKeyFile* key_file, const(gchar)* file, gchar** full_path, GKeyFileFlags flags, GError** error);								
    alias da_g_key_file_to_data = gchar* function(GKeyFile* key_file, gsize* length, GError** error);																							
    alias da_g_key_file_get_start_group = gchar* function(GKeyFile* key_file);																													
    alias da_g_key_file_get_groups = gchar** function(GKeyFile* key_file, gsize* length);																										
    alias da_g_key_file_get_keys = gchar** function(GKeyFile* key_file, const(gchar)* group_name, gsize* length, GError** error);																
    alias da_g_key_file_has_group = gboolean function(GKeyFile* key_file, const(gchar)* group_name);																							
    alias da_g_key_file_has_key = gboolean function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, GError** error);															
    alias da_g_key_file_get_value = gchar* function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, GError** error);															
    alias da_g_key_file_set_value = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, const(gchar)* value);														
    alias da_g_key_file_get_string = gchar* function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, GError** error);															
    alias da_g_key_file_set_string = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, const(gchar)* string);														
    alias da_g_key_file_get_locale_string = gchar* function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, const(gchar)* locale, GError** error);								
    alias da_g_key_file_set_locale_string = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, const(gchar)* locale, const(gchar)* string);							
    alias da_g_key_file_get_boolean = gboolean function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, GError** error);														
    alias da_g_key_file_set_boolean = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, gboolean value);															
    alias da_g_key_file_get_integer = gint function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, GError** error);															
    alias da_g_key_file_set_integer = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, gint value);																
    alias da_g_key_file_get_int64 = gint64 function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, GError** error);															
    alias da_g_key_file_set_int64 = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, gint64 value);																
    alias da_g_key_file_get_uint64 = guint64 function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, GError** error);															
    alias da_g_key_file_set_uint64 = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, guint64 value);																
    alias da_g_key_file_get_double = gdouble function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, GError** error);															
    alias da_g_key_file_set_double = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, gdouble value);																
    alias da_g_key_file_get_string_list = gchar** function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, gsize* length, GError** error);										
    alias da_g_key_file_set_string_list = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, const(gchar*)* list, gsize length);									
    alias da_g_key_file_get_locale_string_list = gchar** function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, const(gchar)* locale, gsize* length, GError** error);		
    alias da_g_key_file_set_locale_string_list = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, const(gchar)* locale, const(gchar*)* list, gsize length);		
    alias da_g_key_file_get_boolean_list = gboolean* function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, gsize* length, GError** error);									
    alias da_g_key_file_set_boolean_list = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, gboolean* list, gsize length);										
    alias da_g_key_file_get_integer_list = gint* function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, gsize* length, GError** error);										
    alias da_g_key_file_set_double_list = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, gdouble* list, gsize length);											
    alias da_g_key_file_get_double_list = gdouble* function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, gsize* length, GError** error);									
    alias da_g_key_file_set_integer_list = void function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, gint* list, gsize length);											
    alias da_g_key_file_set_comment = gboolean function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, const(gchar)* comment, GError** error);								
    alias da_g_key_file_get_comment = gchar* function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, GError** error);															
    alias da_g_key_file_remove_comment = gboolean function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, GError** error);													
    alias da_g_key_file_remove_key = gboolean function(GKeyFile* key_file, const(gchar)* group_name, const(gchar)* key, GError** error);														
    alias da_g_key_file_remove_group = gboolean function(GKeyFile* key_file, const(gchar)* group_name, GError** error);																			
}

__gshared
{
	da_g_key_file_error_quark g_key_file_error_quark; 
    da_g_key_file_new g_key_file_new; 
    da_g_key_file_ref g_key_file_ref; 
    da_g_key_file_unref g_key_file_unref; 
    da_g_key_file_free g_key_file_free; 
    da_g_key_file_set_list_separator g_key_file_set_list_separator; 
    da_g_key_file_load_from_file g_key_file_load_from_file; 
    da_g_key_file_load_from_data g_key_file_load_from_data; 
    da_g_key_file_load_from_dirs g_key_file_load_from_dirs; 
    da_g_key_file_load_from_data_dirs g_key_file_load_from_data_dirs; 
    da_g_key_file_to_data g_key_file_to_data; 
    da_g_key_file_get_start_group g_key_file_get_start_group; 
    da_g_key_file_get_groups g_key_file_get_groups; 
    da_g_key_file_get_keys g_key_file_get_keys; 
    da_g_key_file_has_group g_key_file_has_group; 
    da_g_key_file_has_key g_key_file_has_key; 
    da_g_key_file_get_value g_key_file_get_value; 
    da_g_key_file_set_value g_key_file_set_value; 
    da_g_key_file_get_string g_key_file_get_string; 
    da_g_key_file_set_string g_key_file_set_string; 
    da_g_key_file_get_locale_string g_key_file_get_locale_string; 
    da_g_key_file_set_locale_string g_key_file_set_locale_string; 
    da_g_key_file_get_boolean g_key_file_get_boolean; 
    da_g_key_file_set_boolean g_key_file_set_boolean; 
    da_g_key_file_get_integer g_key_file_get_integer; 
    da_g_key_file_set_integer g_key_file_set_integer; 
    da_g_key_file_get_int64 g_key_file_get_int64; 
    da_g_key_file_set_int64 g_key_file_set_int64; 
    da_g_key_file_get_uint64 g_key_file_get_uint64; 
    da_g_key_file_set_uint64 g_key_file_set_uint64; 
    da_g_key_file_get_double g_key_file_get_double; 
    da_g_key_file_set_double g_key_file_set_double; 
    da_g_key_file_get_string_list g_key_file_get_string_list; 
    da_g_key_file_set_string_list g_key_file_set_string_list; 
    da_g_key_file_get_locale_string_list g_key_file_get_locale_string_list; 
    da_g_key_file_set_locale_string_list g_key_file_set_locale_string_list; 
    da_g_key_file_get_boolean_list g_key_file_get_boolean_list; 
    da_g_key_file_set_boolean_list g_key_file_set_boolean_list; 
    da_g_key_file_get_integer_list g_key_file_get_integer_list; 
    da_g_key_file_set_double_list g_key_file_set_double_list; 
    da_g_key_file_get_double_list g_key_file_get_double_list; 
    da_g_key_file_set_integer_list g_key_file_set_integer_list; 
    da_g_key_file_set_comment g_key_file_set_comment; 
    da_g_key_file_get_comment g_key_file_get_comment; 
    da_g_key_file_remove_comment g_key_file_remove_comment; 
    da_g_key_file_remove_key g_key_file_remove_key; 
    da_g_key_file_remove_group g_key_file_remove_group; 
}







