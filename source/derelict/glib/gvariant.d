/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.gvariant;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gvarianttype;
import derelict.glib.gstring;
import derelict.glib.gerror;
import derelict.glib.gquark;
import core.stdc.config;
import core.stdc.string;
import core.stdc.stdarg;

extern (C):

alias _GVariant GVariant;
alias _Anonymous_0 GVariantClass;
alias _GVariantIter GVariantIter;
alias _GVariantBuilder GVariantBuilder;
alias _Anonymous_1 GVariantParseError;

enum _Anonymous_0
{
	G_VARIANT_CLASS_BOOLEAN = 98,
	G_VARIANT_CLASS_BYTE = 121,
	G_VARIANT_CLASS_INT16 = 110,
	G_VARIANT_CLASS_UINT16 = 113,
	G_VARIANT_CLASS_INT32 = 105,
	G_VARIANT_CLASS_UINT32 = 117,
	G_VARIANT_CLASS_INT64 = 120,
	G_VARIANT_CLASS_UINT64 = 116,
	G_VARIANT_CLASS_HANDLE = 104,
	G_VARIANT_CLASS_DOUBLE = 100,
	G_VARIANT_CLASS_STRING = 115,
	G_VARIANT_CLASS_OBJECT_PATH = 111,
	G_VARIANT_CLASS_SIGNATURE = 103,
	G_VARIANT_CLASS_VARIANT = 118,
	G_VARIANT_CLASS_MAYBE = 109,
	G_VARIANT_CLASS_ARRAY = 97,
	G_VARIANT_CLASS_TUPLE = 40,
	G_VARIANT_CLASS_DICT_ENTRY = 123
}

enum _Anonymous_1
{
	G_VARIANT_PARSE_ERROR_FAILED = 0,
	G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1,
	G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2,
	G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3,
	G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4,
	G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5,
	G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6,
	G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7,
	G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8,
	G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9,
	G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10,
	G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11,
	G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12,
	G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13,
	G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14,
	G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15,
	G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16,
	G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17
}

struct _GVariantIter
{
	gsize[16] x;
}

struct _GVariantBuilder
{
	gsize[16] x;
}

struct _GVariant;

extern( C ) nothrow 
{
    alias da_g_variant_unref = void function(GVariant* value);																																	
    alias da_g_variant_ref = GVariant* function(GVariant* value);																																
    alias da_g_variant_ref_sink = GVariant* function(GVariant* value);																															
    alias da_g_variant_is_floating = gboolean function(GVariant* value);																														
    alias da_g_variant_take_ref = GVariant* function(GVariant* value);																															
    alias da_g_variant_get_type = const(GVariantType)* function(GVariant* value);																												
    alias da_g_variant_get_type_string = const(gchar)* function(GVariant* value);																												
    alias da_g_variant_is_of_type = gboolean function(GVariant* value, const(GVariantType)* type);																								
    alias da_g_variant_is_container = gboolean function(GVariant* value);																														
    alias da_g_variant_classify = GVariantClass function(GVariant* value);																														
    alias da_g_variant_new_boolean = GVariant* function(gboolean value);																														
    alias da_g_variant_new_byte = GVariant* function(guchar value);																																
    alias da_g_variant_new_int16 = GVariant* function(gint16 value);																															
    alias da_g_variant_new_uint16 = GVariant* function(guint16 value);																															
    alias da_g_variant_new_int32 = GVariant* function(gint32 value);																															
    alias da_g_variant_new_uint32 = GVariant* function(guint32 value);																															
    alias da_g_variant_new_int64 = GVariant* function(gint64 value);																															
    alias da_g_variant_new_uint64 = GVariant* function(guint64 value);																															
    alias da_g_variant_new_handle = GVariant* function(gint32 value);																															
    alias da_g_variant_new_double = GVariant* function(gdouble value);																															
    alias da_g_variant_new_string = GVariant* function(const(gchar)* string);																													
    alias da_g_variant_new_object_path = GVariant* function(const(gchar)* object_path);																											
    alias da_g_variant_is_object_path = gboolean function(const(gchar)* string);																												
    alias da_g_variant_new_signature = GVariant* function(const(gchar)* signature);																												
    alias da_g_variant_is_signature = gboolean function(const(gchar)* string);																													
    alias da_g_variant_new_variant = GVariant* function(GVariant* value);																														
    alias da_g_variant_new_strv = GVariant* function(const(gchar*)* strv, gssize length);																										
    alias da_g_variant_new_objv = GVariant* function(const(gchar*)* strv, gssize length);																										
    alias da_g_variant_new_bytestring = GVariant* function(const(gchar)* string);																												
    alias da_g_variant_new_bytestring_array = GVariant* function(const(gchar*)* strv, gssize length);																							
    alias da_g_variant_new_fixed_array = GVariant* function(const(GVariantType)* element_type, gconstpointer elements, gsize n_elements, gsize element_size);									
    alias da_g_variant_get_boolean = gboolean function(GVariant* value);																														
    alias da_g_variant_get_byte = guchar function(GVariant* value);																																
    alias da_g_variant_get_int16 = gint16 function(GVariant* value);																															
    alias da_g_variant_get_uint16 = guint16 function(GVariant* value);																															
    alias da_g_variant_get_int32 = gint32 function(GVariant* value);																															
    alias da_g_variant_get_uint32 = guint32 function(GVariant* value);																															
    alias da_g_variant_get_int64 = gint64 function(GVariant* value);																															
    alias da_g_variant_get_uint64 = guint64 function(GVariant* value);																															
    alias da_g_variant_get_handle = gint32 function(GVariant* value);																															
    alias da_g_variant_get_double = gdouble function(GVariant* value);																															
    alias da_g_variant_get_variant = GVariant* function(GVariant* value);																														
    alias da_g_variant_get_string = const(gchar)* function(GVariant* value, gsize* length);																										
    alias da_g_variant_dup_string = gchar* function(GVariant* value, gsize* length);																											
    alias da_g_variant_get_strv = const(gchar*)* function(GVariant* value, gsize* length);																										
    alias da_g_variant_dup_strv = gchar** function(GVariant* value, gsize* length);																												
    alias da_g_variant_get_objv = const(gchar*)* function(GVariant* value, gsize* length);																										
    alias da_g_variant_dup_objv = gchar** function(GVariant* value, gsize* length);																												
    alias da_g_variant_get_bytestring = const(gchar)* function(GVariant* value);																												
    alias da_g_variant_dup_bytestring = gchar* function(GVariant* value, gsize* length);																										
    alias da_g_variant_get_bytestring_array = const(gchar*)* function(GVariant* value, gsize* length);																							
    alias da_g_variant_dup_bytestring_array = gchar** function(GVariant* value, gsize* length);																									
    alias da_g_variant_new_maybe = GVariant* function(const(GVariantType)* child_type, GVariant* child);																						
    alias da_g_variant_new_array = GVariant* function(const(GVariantType)* child_type, GVariant** children, gsize n_children);																	
    alias da_g_variant_new_tuple = GVariant* function(GVariant** children, gsize n_children);																									
    alias da_g_variant_new_dict_entry = GVariant* function(GVariant* key, GVariant* value);																										
    alias da_g_variant_get_maybe = GVariant* function(GVariant* value);																															
    alias da_g_variant_n_children = gsize function(GVariant* value);																															
    alias da_g_variant_get_child = void function(GVariant* value, gsize index_, const(gchar)* format_string, ...);																				
    alias da_g_variant_get_child_value = GVariant* function(GVariant* value, gsize index_);																										
    alias da_g_variant_lookup = gboolean function(GVariant* dictionary, const(gchar)* key, const(gchar)* format_string, ...);																	
    alias da_g_variant_lookup_value = GVariant* function(GVariant* dictionary, const(gchar)* key, const(GVariantType)* expected_type);															
    alias da_g_variant_get_fixed_array = gconstpointer function(GVariant* value, gsize* n_elements, gsize element_size);																		
    alias da_g_variant_get_size = gsize function(GVariant* value);																																
    alias da_g_variant_get_data = gconstpointer function(GVariant* value);																														
    alias da_g_variant_store = void function(GVariant* value, gpointer data);																													
    alias da_g_variant_print = gchar* function(GVariant* value, gboolean type_annotate);																										
    alias da_g_variant_print_string = GString* function(GVariant* value, GString* string, gboolean type_annotate);																				
    alias da_g_variant_hash = guint function(gconstpointer value);																																
    alias da_g_variant_equal = gboolean function(gconstpointer one, gconstpointer two);																											
    alias da_g_variant_get_normal_form = GVariant* function(GVariant* value);																													
    alias da_g_variant_is_normal_form = gboolean function(GVariant* value);																														
    alias da_g_variant_byteswap = GVariant* function(GVariant* value);																															
    alias da_g_variant_new_from_data = GVariant* function(const(GVariantType)* type, gconstpointer data, gsize size, gboolean trusted, GDestroyNotify notify, gpointer user_data);				
    alias da_g_variant_iter_new = GVariantIter* function(GVariant* value);																														
    alias da_g_variant_iter_init = gsize function(GVariantIter* iter, GVariant* value);																											
    alias da_g_variant_iter_copy = GVariantIter* function(GVariantIter* iter);																													
    alias da_g_variant_iter_n_children = gsize function(GVariantIter* iter);																													
    alias da_g_variant_iter_free = void function(GVariantIter* iter);																															
    alias da_g_variant_iter_next_value = GVariant* function(GVariantIter* iter);																												
    alias da_g_variant_iter_next = gboolean function(GVariantIter* iter, const(gchar)* format_string, ...);																						
    alias da_g_variant_iter_loop = gboolean function(GVariantIter* iter, const(gchar)* format_string, ...);																						
    alias da_g_variant_parser_get_error_quark = GQuark function();																																
    alias da_g_variant_builder_new = GVariantBuilder* function(const(GVariantType)* type);																										
    alias da_g_variant_builder_unref = void function(GVariantBuilder* builder);																													
    alias da_g_variant_builder_ref = GVariantBuilder* function(GVariantBuilder* builder);																										
    alias da_g_variant_builder_init = void function(GVariantBuilder* builder, const(GVariantType)* type);																						
    alias da_g_variant_builder_end = GVariant* function(GVariantBuilder* builder);																												
    alias da_g_variant_builder_clear = void function(GVariantBuilder* builder);																													
    alias da_g_variant_builder_open = void function(GVariantBuilder* builder, const(GVariantType)* type);																						
    alias da_g_variant_builder_close = void function(GVariantBuilder* builder);																													
    alias da_g_variant_builder_add_value = void function(GVariantBuilder* builder, GVariant* value);																							
    alias da_g_variant_builder_add = void function(GVariantBuilder* builder, const(gchar)* format_string, ...);																					
    alias da_g_variant_builder_add_parsed = void function(GVariantBuilder* builder, const(gchar)* format, ...);																					
    alias da_g_variant_new = GVariant* function(const(gchar)* format_string, ...);																												
    alias da_g_variant_get = void function(GVariant* value, const(gchar)* format_string, ...);																									
    alias da_g_variant_new_va = GVariant* function(const(gchar)* format_string, const(gchar*)* endptr, va_list* app);																			
    alias da_g_variant_get_va = void function(GVariant* value, const(gchar)* format_string, const(gchar*)* endptr, va_list* app);																
    alias da_g_variant_check_format_string = gboolean function(GVariant* value, const gchar* format_string, gboolean copy_only); 
    alias da_g_variant_parse = GVariant* function(const(GVariantType)* type, const(gchar)* text, const(gchar)* limit, const(gchar*)* endptr, GError** error);									
    alias da_g_variant_new_parsed = GVariant* function(const(gchar)* format, ...);																												
    alias da_g_variant_new_parsed_va = GVariant* function(const(gchar)* format, va_list* app);																									
    alias da_g_variant_compare = gint function(gconstpointer one, gconstpointer two);																											
}

__gshared
{
    da_g_variant_unref g_variant_unref; 
    da_g_variant_ref g_variant_ref; 
    da_g_variant_ref_sink g_variant_ref_sink; 
    da_g_variant_is_floating g_variant_is_floating; 
    da_g_variant_take_ref g_variant_take_ref; 
    da_g_variant_get_type g_variant_get_type; 
    da_g_variant_get_type_string g_variant_get_type_string; 
    da_g_variant_is_of_type g_variant_is_of_type; 
    da_g_variant_is_container g_variant_is_container; 
    da_g_variant_classify g_variant_classify; 
    da_g_variant_new_boolean g_variant_new_boolean; 
    da_g_variant_new_byte g_variant_new_byte; 
    da_g_variant_new_int16 g_variant_new_int16; 
    da_g_variant_new_uint16 g_variant_new_uint16; 
    da_g_variant_new_int32 g_variant_new_int32; 
    da_g_variant_new_uint32 g_variant_new_uint32; 
    da_g_variant_new_int64 g_variant_new_int64; 
    da_g_variant_new_uint64 g_variant_new_uint64; 
    da_g_variant_new_handle g_variant_new_handle; 
    da_g_variant_new_double g_variant_new_double; 
    da_g_variant_new_string g_variant_new_string; 
    da_g_variant_new_object_path g_variant_new_object_path; 
    da_g_variant_is_object_path g_variant_is_object_path; 
    da_g_variant_new_signature g_variant_new_signature; 
    da_g_variant_is_signature g_variant_is_signature; 
    da_g_variant_new_variant g_variant_new_variant; 
    da_g_variant_new_strv g_variant_new_strv; 
    da_g_variant_new_objv g_variant_new_objv; 
    da_g_variant_new_bytestring g_variant_new_bytestring; 
    da_g_variant_new_bytestring_array g_variant_new_bytestring_array; 
    da_g_variant_new_fixed_array g_variant_new_fixed_array; 
    da_g_variant_get_boolean g_variant_get_boolean; 
    da_g_variant_get_byte g_variant_get_byte; 
    da_g_variant_get_int16 g_variant_get_int16; 
    da_g_variant_get_uint16 g_variant_get_uint16; 
    da_g_variant_get_int32 g_variant_get_int32; 
    da_g_variant_get_uint32 g_variant_get_uint32; 
    da_g_variant_get_int64 g_variant_get_int64; 
    da_g_variant_get_uint64 g_variant_get_uint64; 
    da_g_variant_get_handle g_variant_get_handle; 
    da_g_variant_get_double g_variant_get_double; 
    da_g_variant_get_variant g_variant_get_variant; 
    da_g_variant_get_string g_variant_get_string; 
    da_g_variant_dup_string g_variant_dup_string; 
    da_g_variant_get_strv g_variant_get_strv; 
    da_g_variant_dup_strv g_variant_dup_strv; 
    da_g_variant_get_objv g_variant_get_objv; 
    da_g_variant_dup_objv g_variant_dup_objv; 
    da_g_variant_get_bytestring g_variant_get_bytestring; 
    da_g_variant_dup_bytestring g_variant_dup_bytestring; 
    da_g_variant_get_bytestring_array g_variant_get_bytestring_array; 
    da_g_variant_dup_bytestring_array g_variant_dup_bytestring_array; 
    da_g_variant_new_maybe g_variant_new_maybe; 
    da_g_variant_new_array g_variant_new_array; 
    da_g_variant_new_tuple g_variant_new_tuple; 
    da_g_variant_new_dict_entry g_variant_new_dict_entry; 
    da_g_variant_get_maybe g_variant_get_maybe; 
    da_g_variant_n_children g_variant_n_children; 
    da_g_variant_get_child g_variant_get_child; 
    da_g_variant_get_child_value g_variant_get_child_value; 
    da_g_variant_lookup g_variant_lookup; 
    da_g_variant_lookup_value g_variant_lookup_value; 
    da_g_variant_get_fixed_array g_variant_get_fixed_array; 
    da_g_variant_get_size g_variant_get_size; 
    da_g_variant_get_data g_variant_get_data; 
    da_g_variant_store g_variant_store; 
    da_g_variant_print g_variant_print; 
    da_g_variant_print_string g_variant_print_string; 
    da_g_variant_hash g_variant_hash; 
    da_g_variant_equal g_variant_equal; 
    da_g_variant_get_normal_form g_variant_get_normal_form; 
    da_g_variant_is_normal_form g_variant_is_normal_form; 
    da_g_variant_byteswap g_variant_byteswap; 
    da_g_variant_new_from_data g_variant_new_from_data; 
    da_g_variant_iter_new g_variant_iter_new; 
    da_g_variant_iter_init g_variant_iter_init; 
    da_g_variant_iter_copy g_variant_iter_copy; 
    da_g_variant_iter_n_children g_variant_iter_n_children; 
    da_g_variant_iter_free g_variant_iter_free; 
    da_g_variant_iter_next_value g_variant_iter_next_value; 
    da_g_variant_iter_next g_variant_iter_next; 
    da_g_variant_iter_loop g_variant_iter_loop; 
    da_g_variant_parser_get_error_quark g_variant_parser_get_error_quark; 
    da_g_variant_builder_new g_variant_builder_new; 
    da_g_variant_builder_unref g_variant_builder_unref; 
    da_g_variant_builder_ref g_variant_builder_ref; 
    da_g_variant_builder_init g_variant_builder_init; 
    da_g_variant_builder_end g_variant_builder_end; 
    da_g_variant_builder_clear g_variant_builder_clear; 
    da_g_variant_builder_open g_variant_builder_open; 
    da_g_variant_builder_close g_variant_builder_close; 
    da_g_variant_builder_add_value g_variant_builder_add_value; 
    da_g_variant_builder_add g_variant_builder_add; 
    da_g_variant_builder_add_parsed g_variant_builder_add_parsed; 
    da_g_variant_new g_variant_new; 
    da_g_variant_get g_variant_get; 
    da_g_variant_new_va g_variant_new_va; 
    da_g_variant_get_va g_variant_get_va; 
    da_g_variant_check_format_string g_variant_check_format_string;
    da_g_variant_parse g_variant_parse; 
    da_g_variant_new_parsed g_variant_new_parsed; 
    da_g_variant_new_parsed_va g_variant_new_parsed_va; 
    da_g_variant_compare g_variant_compare; 
}