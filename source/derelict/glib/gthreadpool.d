/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.gthreadpool;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gquark;
import derelict.glib.gerror;

extern (C):

alias _GThreadPool GThreadPool;

struct _GThreadPool
{
	GFunc func;
	gpointer user_data;
	gboolean exclusive;
}


extern( C ) nothrow 
{
    alias da_g_thread_pool_new = GThreadPool* function(GFunc func, gpointer user_data, gint max_threads, gboolean exclusive, GError** error);	
    alias da_g_thread_pool_free = void function(GThreadPool* pool, gboolean immediate, gboolean wait_);											
    alias da_g_thread_pool_push = gboolean function(GThreadPool* pool, gpointer data, GError** error);											
    alias da_g_thread_pool_unprocessed = guint function(GThreadPool* pool);																		
    alias da_g_thread_pool_set_sort_function = void function(GThreadPool* pool, GCompareDataFunc func, gpointer user_data);						
    alias da_g_thread_pool_set_max_threads = gboolean function(GThreadPool* pool, gint max_threads, GError** error);							
    alias da_g_thread_pool_get_max_threads = gint function(GThreadPool* pool);																	
    alias da_g_thread_pool_get_num_threads = guint function(GThreadPool* pool);																	
    alias da_g_thread_pool_set_max_unused_threads = void function(gint max_threads);															
    alias da_g_thread_pool_get_max_unused_threads = gint function();																			
    alias da_g_thread_pool_get_num_unused_threads = guint function();																			
    alias da_g_thread_pool_stop_unused_threads = void function();																				
    alias da_g_thread_pool_set_max_idle_time = void function(guint interval);																	
    alias da_g_thread_pool_get_max_idle_time = guint function();	
}

__gshared
{
    da_g_thread_pool_new g_thread_pool_new; 
    da_g_thread_pool_free g_thread_pool_free; 
    da_g_thread_pool_push g_thread_pool_push; 
    da_g_thread_pool_unprocessed g_thread_pool_unprocessed; 
    da_g_thread_pool_set_sort_function g_thread_pool_set_sort_function; 
    da_g_thread_pool_set_max_threads g_thread_pool_set_max_threads; 
    da_g_thread_pool_get_max_threads g_thread_pool_get_max_threads; 
    da_g_thread_pool_get_num_threads g_thread_pool_get_num_threads; 
    da_g_thread_pool_set_max_unused_threads g_thread_pool_set_max_unused_threads; 
    da_g_thread_pool_get_max_unused_threads g_thread_pool_get_max_unused_threads; 
    da_g_thread_pool_get_num_unused_threads g_thread_pool_get_num_unused_threads; 
    da_g_thread_pool_stop_unused_threads g_thread_pool_stop_unused_threads; 
    da_g_thread_pool_set_max_idle_time g_thread_pool_set_max_idle_time; 
    da_g_thread_pool_get_max_idle_time g_thread_pool_get_max_idle_time; 
}