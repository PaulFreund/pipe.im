/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.gsequence;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;

extern (C):

alias _GSequence GSequence;
alias _GSequenceNode GSequenceIter;
alias int function (_GSequenceNode*, _GSequenceNode*, void*) GSequenceIterCompareFunc;

struct _GSequence;


struct _GSequenceNode;


extern( C ) nothrow 
{
	alias da_g_sequence_new = GSequence* function(GDestroyNotify data_destroy);																					
    alias da_g_sequence_free = void function(GSequence* seq);																									
    alias da_g_sequence_get_length = gint function(GSequence* seq);																								
    alias da_g_sequence_foreach = void function(GSequence* seq, GFunc func, gpointer user_data);																
    alias da_g_sequence_foreach_range = void function(GSequenceIter* begin, GSequenceIter* end, GFunc func, gpointer user_data);								
    alias da_g_sequence_sort = void function(GSequence* seq, GCompareDataFunc cmp_func, gpointer cmp_data);														
    alias da_g_sequence_sort_iter = void function(GSequence* seq, GSequenceIterCompareFunc cmp_func, gpointer cmp_data);										
    alias da_g_sequence_get_begin_iter = GSequenceIter* function(GSequence* seq);																				
    alias da_g_sequence_get_end_iter = GSequenceIter* function(GSequence* seq);																					
    alias da_g_sequence_get_iter_at_pos = GSequenceIter* function(GSequence* seq, gint pos);																	
    alias da_g_sequence_append = GSequenceIter* function(GSequence* seq, gpointer data);																		
    alias da_g_sequence_prepend = GSequenceIter* function(GSequence* seq, gpointer data);																		
    alias da_g_sequence_insert_before = GSequenceIter* function(GSequenceIter* iter, gpointer data);															
    alias da_g_sequence_move = void function(GSequenceIter* src, GSequenceIter* dest);																			
    alias da_g_sequence_swap = void function(GSequenceIter* a, GSequenceIter* b);																				
    alias da_g_sequence_insert_sorted = GSequenceIter* function(GSequence* seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);					
    alias da_g_sequence_insert_sorted_iter = GSequenceIter* function(GSequence* seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);		
    alias da_g_sequence_sort_changed = void function(GSequenceIter* iter, GCompareDataFunc cmp_func, gpointer cmp_data);										
    alias da_g_sequence_sort_changed_iter = void function(GSequenceIter* iter, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);							
    alias da_g_sequence_remove = void function(GSequenceIter* iter);																							
    alias da_g_sequence_remove_range = void function(GSequenceIter* begin, GSequenceIter* end);																	
    alias da_g_sequence_move_range = void function(GSequenceIter* dest, GSequenceIter* begin, GSequenceIter* end);												
    alias da_g_sequence_search = GSequenceIter* function(GSequence* seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);							
    alias da_g_sequence_search_iter = GSequenceIter* function(GSequence* seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);				
    alias da_g_sequence_lookup = GSequenceIter* function(GSequence* seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);							
    alias da_g_sequence_lookup_iter = GSequenceIter* function(GSequence* seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);				
    alias da_g_sequence_get = gpointer function(GSequenceIter* iter);																							
    alias da_g_sequence_set = void function(GSequenceIter* iter, gpointer data);																				
    alias da_g_sequence_iter_is_begin = gboolean function(GSequenceIter* iter);																					
    alias da_g_sequence_iter_is_end = gboolean function(GSequenceIter* iter);																					
    alias da_g_sequence_iter_next = GSequenceIter* function(GSequenceIter* iter);																				
    alias da_g_sequence_iter_prev = GSequenceIter* function(GSequenceIter* iter);																				
    alias da_g_sequence_iter_get_position = gint function(GSequenceIter* iter);																					
    alias da_g_sequence_iter_move = GSequenceIter* function(GSequenceIter* iter, gint delta);																	
    alias da_g_sequence_iter_get_sequence = GSequence* function(GSequenceIter* iter);																			
    alias da_g_sequence_iter_compare = gint function(GSequenceIter* a, GSequenceIter* b);																		
    alias da_g_sequence_range_get_midpoint = GSequenceIter* function(GSequenceIter* begin, GSequenceIter* end);		
}

__gshared
{
    da_g_sequence_new g_sequence_new; 
    da_g_sequence_free g_sequence_free; 
    da_g_sequence_get_length g_sequence_get_length; 
    da_g_sequence_foreach g_sequence_foreach; 
    da_g_sequence_foreach_range g_sequence_foreach_range; 
    da_g_sequence_sort g_sequence_sort; 
    da_g_sequence_sort_iter g_sequence_sort_iter; 
    da_g_sequence_get_begin_iter g_sequence_get_begin_iter; 
    da_g_sequence_get_end_iter g_sequence_get_end_iter; 
    da_g_sequence_get_iter_at_pos g_sequence_get_iter_at_pos; 
    da_g_sequence_append g_sequence_append; 
    da_g_sequence_prepend g_sequence_prepend; 
    da_g_sequence_insert_before g_sequence_insert_before; 
    da_g_sequence_move g_sequence_move; 
    da_g_sequence_swap g_sequence_swap; 
    da_g_sequence_insert_sorted g_sequence_insert_sorted; 
    da_g_sequence_insert_sorted_iter g_sequence_insert_sorted_iter; 
    da_g_sequence_sort_changed g_sequence_sort_changed; 
    da_g_sequence_sort_changed_iter g_sequence_sort_changed_iter; 
    da_g_sequence_remove g_sequence_remove; 
    da_g_sequence_remove_range g_sequence_remove_range; 
    da_g_sequence_move_range g_sequence_move_range; 
    da_g_sequence_search g_sequence_search; 
    da_g_sequence_search_iter g_sequence_search_iter; 
    da_g_sequence_lookup g_sequence_lookup; 
    da_g_sequence_lookup_iter g_sequence_lookup_iter; 
    da_g_sequence_get g_sequence_get; 
    da_g_sequence_set g_sequence_set; 
    da_g_sequence_iter_is_begin g_sequence_iter_is_begin; 
    da_g_sequence_iter_is_end g_sequence_iter_is_end; 
    da_g_sequence_iter_next g_sequence_iter_next; 
    da_g_sequence_iter_prev g_sequence_iter_prev; 
    da_g_sequence_iter_get_position g_sequence_iter_get_position; 
    da_g_sequence_iter_move g_sequence_iter_move; 
    da_g_sequence_iter_get_sequence g_sequence_iter_get_sequence; 
    da_g_sequence_iter_compare g_sequence_iter_compare; 
    da_g_sequence_range_get_midpoint g_sequence_range_get_midpoint; 	
}