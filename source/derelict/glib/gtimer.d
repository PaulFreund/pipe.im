/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.gtimer;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;

extern (C):

alias _GTimer GTimer;

struct _GTimer;

extern( C ) nothrow 
{
	alias da_g_timer_new = GTimer* function();																
    alias da_g_timer_destroy = void function(GTimer* timer);												
    alias da_g_timer_start = void function(GTimer* timer);													
    alias da_g_timer_stop = void function(GTimer* timer);													
    alias da_g_timer_reset = void function(GTimer* timer);													
    alias da_g_timer_continue = void function(GTimer* timer);												
    alias da_g_timer_elapsed = gdouble function(GTimer* timer, gulong* microseconds);						
    alias da_g_usleep = void function(gulong microseconds);													
    alias da_g_time_val_add = void function(GTimeVal* time_, glong microseconds);							
    alias da_g_time_val_from_iso8601 = gboolean function(const(gchar)* iso_date, GTimeVal* time_);			
    alias da_g_time_val_to_iso8601 = gchar* function(GTimeVal* time_);										
}

__gshared
{
    da_g_timer_new g_timer_new; 
    da_g_timer_destroy g_timer_destroy; 
    da_g_timer_start g_timer_start; 
    da_g_timer_stop g_timer_stop; 
    da_g_timer_reset g_timer_reset; 
    da_g_timer_continue g_timer_continue; 
    da_g_timer_elapsed g_timer_elapsed; 
    da_g_usleep g_usleep; 
    da_g_time_val_add g_time_val_add; 
    da_g_time_val_from_iso8601 g_time_val_from_iso8601; 
    da_g_time_val_to_iso8601 g_time_val_to_iso8601; 
}