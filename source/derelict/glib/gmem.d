/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.gmem;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import core.stdc.config;

extern (C):

alias _GMemVTable GMemVTable;

extern( C ) nothrow 
{
    alias da_g_mem_gc_friendly = gboolean;
    alias da_glib_mem_profiler_table = GMemVTable*;
}

__gshared
{
    da_g_mem_gc_friendly g_mem_gc_friendly;
    da_glib_mem_profiler_table glib_mem_profiler_table;
}

struct _GMemVTable
{
	gpointer function (gsize) malloc;
	gpointer function (gpointer, gsize) realloc;
	void function (gpointer) free;
	gpointer function (gsize, gsize) calloc;
	gpointer function (gsize) try_malloc;
	gpointer function (gpointer, gsize) try_realloc;
}

extern( C ) nothrow 
{
    alias da_g_free = void function(gpointer mem);																
    alias da_g_malloc = gpointer function(gsize n_bytes);														
    alias da_g_malloc0 = gpointer function(gsize n_bytes);														
    alias da_g_realloc = gpointer function(gpointer mem, gsize n_bytes);										
    alias da_g_try_malloc = gpointer function(gsize n_bytes);													
    alias da_g_try_malloc0 = gpointer function(gsize n_bytes);													
    alias da_g_try_realloc = gpointer function(gpointer mem, gsize n_bytes);									
    alias da_g_malloc_n = gpointer function(gsize n_blocks, gsize n_block_bytes);								
    alias da_g_malloc0_n = gpointer function(gsize n_blocks, gsize n_block_bytes);								
    alias da_g_realloc_n = gpointer function(gpointer mem, gsize n_blocks, gsize n_block_bytes);				
    alias da_g_try_malloc_n = gpointer function(gsize n_blocks, gsize n_block_bytes);							
    alias da_g_try_malloc0_n = gpointer function(gsize n_blocks, gsize n_block_bytes);							
    alias da_g_try_realloc_n = gpointer function(gpointer mem, gsize n_blocks, gsize n_block_bytes);			
    alias da_g_mem_set_vtable = void function(GMemVTable* vtable);												
    alias da_g_mem_is_system_malloc = gboolean function();														
    alias da_g_mem_profile = void function();																	
}

__gshared
{
	da_g_free g_free; 
    da_g_malloc g_malloc; 
    da_g_malloc0 g_malloc0; 
    da_g_realloc g_realloc; 
    da_g_try_malloc g_try_malloc; 
    da_g_try_malloc0 g_try_malloc0; 
    da_g_try_realloc g_try_realloc; 
    da_g_malloc_n g_malloc_n; 
    da_g_malloc0_n g_malloc0_n; 
    da_g_realloc_n g_realloc_n; 
    da_g_try_malloc_n g_try_malloc_n; 
    da_g_try_malloc0_n g_try_malloc0_n; 
    da_g_try_realloc_n g_try_realloc_n; 
    da_g_mem_set_vtable g_mem_set_vtable; 
    da_g_mem_is_system_malloc g_mem_is_system_malloc; 
    da_g_mem_profile g_mem_profile; 
}







