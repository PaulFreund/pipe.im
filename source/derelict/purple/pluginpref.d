/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.pluginpref;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;
extern (C):

alias _PurplePluginPrefFrame PurplePluginPrefFrame;
alias _PurplePluginPref PurplePluginPref;
alias _Anonymous_0 PurpleStringFormatType;
alias _Anonymous_1 PurplePluginPrefType;

enum _Anonymous_0
{
	PURPLE_STRING_FORMAT_TYPE_NONE = 0,
	PURPLE_STRING_FORMAT_TYPE_MULTILINE = 1,
	PURPLE_STRING_FORMAT_TYPE_HTML = 2
}

enum _Anonymous_1
{
	PURPLE_PLUGIN_PREF_NONE = 0,
	PURPLE_PLUGIN_PREF_CHOICE = 1,
	PURPLE_PLUGIN_PREF_INFO = 2,
	PURPLE_PLUGIN_PREF_STRING_FORMAT = 3
}

struct _PurplePluginPrefFrame;


struct _PurplePluginPref;									


extern( C ) nothrow 
{
	alias da_purple_plugin_pref_frame_new = PurplePluginPrefFrame* function();																
    alias da_purple_plugin_pref_frame_destroy = void function(PurplePluginPrefFrame* frame);												
    alias da_purple_plugin_pref_frame_add = void function(PurplePluginPrefFrame* frame, PurplePluginPref* pref);							
    alias da_purple_plugin_pref_frame_get_prefs = GList* function(PurplePluginPrefFrame* frame);											
    alias da_purple_plugin_pref_new = PurplePluginPref* function();																			
    alias da_purple_plugin_pref_new_with_name = PurplePluginPref* function(const(char)* name);												
    alias da_purple_plugin_pref_new_with_label = PurplePluginPref* function(const(char)* label);											
    alias da_purple_plugin_pref_new_with_name_and_label = PurplePluginPref* function(const(char)* name, const(char)* label);				
    alias da_purple_plugin_pref_destroy = void function(PurplePluginPref* pref);															
    alias da_purple_plugin_pref_set_name = void function(PurplePluginPref* pref, const(char)* name);										
    alias da_purple_plugin_pref_get_name = const(char)* function(PurplePluginPref* pref);													
    alias da_purple_plugin_pref_set_label = void function(PurplePluginPref* pref, const(char)* label);										
    alias da_purple_plugin_pref_get_label = const(char)* function(PurplePluginPref* pref);													
    alias da_purple_plugin_pref_set_bounds = void function(PurplePluginPref* pref, int min, int max);										
    alias da_purple_plugin_pref_get_bounds = void function(PurplePluginPref* pref, int* min, int* max);										
    alias da_purple_plugin_pref_set_type = void function(PurplePluginPref* pref, PurplePluginPrefType type);								
    alias da_purple_plugin_pref_get_type = PurplePluginPrefType function(PurplePluginPref* pref);											
    alias da_purple_plugin_pref_add_choice = void function(PurplePluginPref* pref, const(char)* label, gpointer choice);					
    alias da_purple_plugin_pref_get_choices = GList* function(PurplePluginPref* pref);														
    alias da_purple_plugin_pref_set_max_length = void function(PurplePluginPref* pref, uint max_length);									
    alias da_purple_plugin_pref_get_max_length = uint function(PurplePluginPref* pref);														
    alias da_purple_plugin_pref_set_masked = void function(PurplePluginPref* pref, gboolean mask);											
    alias da_purple_plugin_pref_get_masked = gboolean function(PurplePluginPref* pref);														
    alias da_purple_plugin_pref_set_format_type = void function(PurplePluginPref* pref, PurpleStringFormatType format);						
    alias da_purple_plugin_pref_get_format_type = PurpleStringFormatType function(PurplePluginPref* pref);
}

__gshared
{
	da_purple_plugin_pref_frame_new purple_plugin_pref_frame_new;
	da_purple_plugin_pref_frame_destroy purple_plugin_pref_frame_destroy;
	da_purple_plugin_pref_frame_add purple_plugin_pref_frame_add;
	da_purple_plugin_pref_frame_get_prefs purple_plugin_pref_frame_get_prefs;
	da_purple_plugin_pref_new purple_plugin_pref_new;
	da_purple_plugin_pref_new_with_name purple_plugin_pref_new_with_name;
	da_purple_plugin_pref_new_with_label purple_plugin_pref_new_with_label;
	da_purple_plugin_pref_new_with_name_and_label purple_plugin_pref_new_with_name_and_label;
	da_purple_plugin_pref_destroy purple_plugin_pref_destroy;
	da_purple_plugin_pref_set_name purple_plugin_pref_set_name;
	da_purple_plugin_pref_get_name purple_plugin_pref_get_name;
	da_purple_plugin_pref_set_label purple_plugin_pref_set_label;
	da_purple_plugin_pref_get_label purple_plugin_pref_get_label;
	da_purple_plugin_pref_set_bounds purple_plugin_pref_set_bounds;
	da_purple_plugin_pref_get_bounds purple_plugin_pref_get_bounds;
	da_purple_plugin_pref_set_type purple_plugin_pref_set_type;
	da_purple_plugin_pref_get_type purple_plugin_pref_get_type;
	da_purple_plugin_pref_add_choice purple_plugin_pref_add_choice;
	da_purple_plugin_pref_get_choices purple_plugin_pref_get_choices;
	da_purple_plugin_pref_set_max_length purple_plugin_pref_set_max_length;
	da_purple_plugin_pref_get_max_length purple_plugin_pref_get_max_length;
	da_purple_plugin_pref_set_masked purple_plugin_pref_set_masked;
	da_purple_plugin_pref_get_masked purple_plugin_pref_get_masked;
	da_purple_plugin_pref_set_format_type purple_plugin_pref_set_format_type;
	da_purple_plugin_pref_get_format_type purple_plugin_pref_get_format_type;
}