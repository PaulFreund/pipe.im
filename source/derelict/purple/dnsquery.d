/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.dnsquery;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gslist;
import derelict.purple.account;

extern (C):

alias _PurpleDnsQueryData PurpleDnsQueryData;
alias void function (_GSList*, void*, const(char)*) PurpleDnsQueryConnectFunction;
alias void function (_PurpleDnsQueryData*, _GSList*) PurpleDnsQueryResolvedCallback;
alias void function (_PurpleDnsQueryData*, const(char)*) PurpleDnsQueryFailedCallback;
alias _Anonymous_0 PurpleDnsQueryUiOps;

struct _Anonymous_0
{
	gboolean function (PurpleDnsQueryData*, PurpleDnsQueryResolvedCallback, PurpleDnsQueryFailedCallback) resolve_host;
	void function (PurpleDnsQueryData*) destroy;
	void function () _purple_reserved1;
	void function () _purple_reserved2;
	void function () _purple_reserved3;
	void function () _purple_reserved4;
}

struct _PurpleDnsQueryData;

extern( C ) nothrow 
{
    alias da_purple_dnsquery_a_account = PurpleDnsQueryData* function(PurpleAccount* account, const(char)* hostname, int port, PurpleDnsQueryConnectFunction callback, gpointer data);		
    alias da_purple_dnsquery_a = PurpleDnsQueryData* function(const(char)* hostname, int port, PurpleDnsQueryConnectFunction callback, gpointer data);										
    alias da_purple_dnsquery_destroy = void function(PurpleDnsQueryData* query_data);																										
    alias da_purple_dnsquery_set_ui_ops = void function(PurpleDnsQueryUiOps* ops);																											
    alias da_purple_dnsquery_get_ui_ops = PurpleDnsQueryUiOps* function();																													
    alias da_purple_dnsquery_get_host = char* function(PurpleDnsQueryData* query_data);																										
    alias da_purple_dnsquery_get_port = ushort function(PurpleDnsQueryData* query_data);																									
    alias da_purple_dnsquery_init = void function();																																		
    alias da_purple_dnsquery_uninit = void function();		
}

__gshared
{
	da_purple_dnsquery_a_account purple_dnsquery_a_account;
	da_purple_dnsquery_a purple_dnsquery_a;
	da_purple_dnsquery_destroy purple_dnsquery_destroy;
	da_purple_dnsquery_set_ui_ops purple_dnsquery_set_ui_ops;
	da_purple_dnsquery_get_ui_ops purple_dnsquery_get_ui_ops;
	da_purple_dnsquery_get_host purple_dnsquery_get_host;
	da_purple_dnsquery_get_port purple_dnsquery_get_port;
	da_purple_dnsquery_init purple_dnsquery_init;
	da_purple_dnsquery_uninit purple_dnsquery_uninit;
}