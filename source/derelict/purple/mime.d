/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.mime;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gstring;
import derelict.glib.glist;
import core.stdc.config;
import core.stdc.string;

extern (C):

alias _PurpleMimeDocument PurpleMimeDocument;
alias _PurpleMimePart PurpleMimePart;

struct _PurpleMimeDocument;


struct _PurpleMimePart;


extern( C ) nothrow 
{
	alias da_purple_mime_document_new = PurpleMimeDocument* function();																		
    alias da_purple_mime_document_free = void function(PurpleMimeDocument* doc);															
    alias da_purple_mime_document_parse = PurpleMimeDocument* function(const(char)* buf);													
    alias da_purple_mime_document_parsen = PurpleMimeDocument* function(const(char)* buf, gsize len);										
    alias da_purple_mime_document_write = void function(PurpleMimeDocument* doc, GString* str);												
    alias da_purple_mime_document_get_fields = GList* function(PurpleMimeDocument* doc);													
    alias da_purple_mime_document_get_field = const(char)* function(PurpleMimeDocument* doc, const(char)* field);							
    alias da_purple_mime_document_set_field = void function(PurpleMimeDocument* doc, const(char)* field, const(char)* value);				
    alias da_purple_mime_document_get_parts = GList* function(PurpleMimeDocument* doc);														
    alias da_purple_mime_part_new = PurpleMimePart* function(PurpleMimeDocument* doc);														
    alias da_purple_mime_part_get_fields = GList* function(PurpleMimePart* part);															
    alias da_purple_mime_part_get_field = const(char)* function(PurpleMimePart* part, const(char)* field);									
    alias da_purple_mime_part_get_field_decoded = char* function(PurpleMimePart* part, const(char)* field);									
    alias da_purple_mime_part_set_field = void function(PurpleMimePart* part, const(char)* field, const(char)* value);						
    alias da_purple_mime_part_get_data = const(char)* function(PurpleMimePart* part);														
    alias da_purple_mime_part_get_data_decoded = void function(PurpleMimePart* part, guchar** data, gsize* len);							
    alias da_purple_mime_part_get_length = gsize function(PurpleMimePart* part);															
    alias da_purple_mime_part_set_data = void function(PurpleMimePart* part, const(char)* data);
}

__gshared
{
	da_purple_mime_document_new purple_mime_document_new;
	da_purple_mime_document_free purple_mime_document_free;
	da_purple_mime_document_parse purple_mime_document_parse;
	da_purple_mime_document_parsen purple_mime_document_parsen;
	da_purple_mime_document_write purple_mime_document_write;
	da_purple_mime_document_get_fields purple_mime_document_get_fields;
	da_purple_mime_document_get_field purple_mime_document_get_field;
	da_purple_mime_document_set_field purple_mime_document_set_field;
	da_purple_mime_document_get_parts purple_mime_document_get_parts;
	da_purple_mime_part_new purple_mime_part_new;
	da_purple_mime_part_get_fields purple_mime_part_get_fields;
	da_purple_mime_part_get_field purple_mime_part_get_field;
	da_purple_mime_part_get_field_decoded purple_mime_part_get_field_decoded;
	da_purple_mime_part_set_field purple_mime_part_set_field;
	da_purple_mime_part_get_data purple_mime_part_get_data;
	da_purple_mime_part_get_data_decoded purple_mime_part_get_data_decoded;
	da_purple_mime_part_get_length purple_mime_part_get_length;
	da_purple_mime_part_set_data purple_mime_part_set_data;
}