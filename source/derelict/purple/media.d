/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.media;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;
import derelict.purple.account;
import derelict.purple.enum_types;

extern (C):

alias _PurpleMediaCodec PurpleMediaCodec;

struct _PurpleMediaCodec;


alias _PurpleMedia PurpleMedia;

struct _PurpleMediaManager;


struct _PurpleMedia;


extern( C ) nothrow 
{
	alias da_purple_media_get_type = GType function();																																															
    alias da_purple_media_get_session_ids = GList* function(PurpleMedia* media);																																								
    alias da_purple_media_get_account = PurpleAccount* function(PurpleMedia* media);																																							
    alias da_purple_media_get_prpl_data = gpointer function(PurpleMedia* media);																																								
    alias da_purple_media_set_prpl_data = void function(PurpleMedia* media, gpointer prpl_data);																																				
    alias da_purple_media_error = void function(PurpleMedia* media, const(gchar)* error, ...);																																					
    alias da_purple_media_end = void function(PurpleMedia* media, const(gchar)* session_id, const(gchar)* participant);																															
    alias da_purple_media_stream_info = void function(PurpleMedia* media, PurpleMediaInfoType type, const(gchar)* session_id, const(gchar)* participant, gboolean local);																		
    alias da_purple_media_set_params = void function(PurpleMedia* media, guint num_params, GParameter* params);																																	
    alias da_purple_media_get_available_params = const(gchar*)* function(PurpleMedia* media);																																					
    alias da_purple_media_param_is_supported = gboolean function(PurpleMedia* media, const(gchar)* param);																																		
    alias da_purple_media_add_stream = gboolean function(PurpleMedia* media, const(gchar)* sess_id, const(gchar)* who, PurpleMediaSessionType type, gboolean initiator, const(gchar)* transmitter, guint num_params, GParameter* params);		
    alias da_purple_media_get_session_type = PurpleMediaSessionType function(PurpleMedia* media, const(gchar)* sess_id);																														
    alias da_purple_media_get_manager = _PurpleMediaManager* function(PurpleMedia* media);																																						
    alias da_purple_media_get_codecs = GList* function(PurpleMedia* media, const(gchar)* sess_id);																																				
    alias da_purple_media_add_remote_candidates = void function(PurpleMedia* media, const(gchar)* sess_id, const(gchar)* participant, GList* remote_candidates);																				
    alias da_purple_media_get_local_candidates = GList* function(PurpleMedia* media, const(gchar)* sess_id, const(gchar)* participant);																											
    alias da_purple_media_get_active_local_candidates = GList* function(PurpleMedia* media, const(gchar)* sess_id, const(gchar)* participant);																									
    alias da_purple_media_get_active_remote_candidates = GList* function(PurpleMedia* media, const(gchar)* sess_id, const(gchar)* participant);																									
    alias da_purple_media_set_remote_codecs = gboolean function(PurpleMedia* media, const(gchar)* sess_id, const(gchar)* participant, GList* codecs);																							
    alias da_purple_media_candidates_prepared = gboolean function(PurpleMedia* media, const(gchar)* session_id, const(gchar)* participant);																										
    alias da_purple_media_set_send_codec = gboolean function(PurpleMedia* media, const(gchar)* sess_id, PurpleMediaCodec* codec);																												
    alias da_purple_media_codecs_ready = gboolean function(PurpleMedia* media, const(gchar)* sess_id);																																			
    alias da_purple_media_is_initiator = gboolean function(PurpleMedia* media, const(gchar)* sess_id, const(gchar)* participant);																												
    alias da_purple_media_accepted = gboolean function(PurpleMedia* media, const(gchar)* sess_id, const(gchar)* participant);																													
    alias da_purple_media_set_input_volume = void function(PurpleMedia* media, const(gchar)* session_id, double level);																															
    alias da_purple_media_set_output_volume = void function(PurpleMedia* media, const(gchar)* session_id, const(gchar)* participant, double level);																								
    alias da_purple_media_set_output_window = gulong function(PurpleMedia* media, const(gchar)* session_id, const(gchar)* participant, gulong window_id);																						
    alias da_purple_media_remove_output_windows = void function(PurpleMedia* media);																																							
}

__gshared
{
	da_purple_media_get_type purple_media_get_type;
	da_purple_media_get_session_ids purple_media_get_session_ids;
	da_purple_media_get_account purple_media_get_account;
	da_purple_media_get_prpl_data purple_media_get_prpl_data;
	da_purple_media_set_prpl_data purple_media_set_prpl_data;
	da_purple_media_error purple_media_error;
	da_purple_media_end purple_media_end;
	da_purple_media_stream_info purple_media_stream_info;
	da_purple_media_set_params purple_media_set_params;
	da_purple_media_get_available_params purple_media_get_available_params;
	da_purple_media_param_is_supported purple_media_param_is_supported;
	da_purple_media_add_stream purple_media_add_stream;
	da_purple_media_get_session_type purple_media_get_session_type;
	da_purple_media_get_manager purple_media_get_manager;
	da_purple_media_get_codecs purple_media_get_codecs;
	da_purple_media_add_remote_candidates purple_media_add_remote_candidates;
	da_purple_media_get_local_candidates purple_media_get_local_candidates;
	da_purple_media_get_active_local_candidates purple_media_get_active_local_candidates;
	da_purple_media_get_active_remote_candidates purple_media_get_active_remote_candidates;
	da_purple_media_set_remote_codecs purple_media_set_remote_codecs;
	da_purple_media_candidates_prepared purple_media_candidates_prepared;
	da_purple_media_set_send_codec purple_media_set_send_codec;
	da_purple_media_codecs_ready purple_media_codecs_ready;
	da_purple_media_is_initiator purple_media_is_initiator;
	da_purple_media_accepted purple_media_accepted;
	da_purple_media_set_input_volume purple_media_set_input_volume;
	da_purple_media_set_output_volume purple_media_set_output_volume;
	da_purple_media_set_output_window purple_media_set_output_window;
	da_purple_media_remove_output_windows purple_media_remove_output_windows;
}