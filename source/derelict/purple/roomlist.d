/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.roomlist;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;
import derelict.purple.account;
import derelict.purple.connection;

extern (C):

alias _PurpleRoomlist PurpleRoomlist;
alias _PurpleRoomlistRoom PurpleRoomlistRoom;
alias _PurpleRoomlistField PurpleRoomlistField;
alias _PurpleRoomlistUiOps PurpleRoomlistUiOps;
alias _Anonymous_0 PurpleRoomlistRoomType;
alias _Anonymous_1 PurpleRoomlistFieldType;

enum _Anonymous_0
{
	PURPLE_ROOMLIST_ROOMTYPE_CATEGORY = 1,
	PURPLE_ROOMLIST_ROOMTYPE_ROOM = 2
}

enum _Anonymous_1
{
	PURPLE_ROOMLIST_FIELD_BOOL = 0,
	PURPLE_ROOMLIST_FIELD_INT = 1,
	PURPLE_ROOMLIST_FIELD_STRING = 2
}

struct _PurpleRoomlist
{
	PurpleAccount* account;
	GList* fields;
	GList* rooms;
	gboolean in_progress;
	gpointer ui_data;
	gpointer proto_data;
	guint ref_;
}

struct _PurpleRoomlistRoom
{
	PurpleRoomlistRoomType type;
	gchar* name;
	GList* fields;
	PurpleRoomlistRoom* parent;
	gboolean expanded_once;
}

struct _PurpleRoomlistField
{
	PurpleRoomlistFieldType type;
	gchar* label;
	gchar* name;
	gboolean hidden;
}

struct _PurpleRoomlistUiOps
{
	void function (PurpleAccount*) show_with_account;
	void function (PurpleRoomlist*) create;
	void function (PurpleRoomlist*, GList*) set_fields;
	void function (PurpleRoomlist*, PurpleRoomlistRoom*) add_room;
	void function (PurpleRoomlist*, gboolean) in_progress;
	void function (PurpleRoomlist*) destroy;
	void function () _purple_reserved1;
	void function () _purple_reserved2;
	void function () _purple_reserved3;
	void function () _purple_reserved4;
}

extern( C ) nothrow 
{
    alias da_purple_roomlist_show_with_account = void function(PurpleAccount* account);																					
    alias da_purple_roomlist_new = PurpleRoomlist* function(PurpleAccount* account);																					
    alias da_purple_roomlist_ref = void function(PurpleRoomlist* list);																									
    alias da_purple_roomlist_unref = void function(PurpleRoomlist* list);																								
    alias da_purple_roomlist_set_fields = void function(PurpleRoomlist* list, GList* fields);																			
    alias da_purple_roomlist_set_in_progress = void function(PurpleRoomlist* list, gboolean in_progress);																
    alias da_purple_roomlist_get_in_progress = gboolean function(PurpleRoomlist* list);																					
    alias da_purple_roomlist_room_add = void function(PurpleRoomlist* list, PurpleRoomlistRoom* room);																	
    alias da_purple_roomlist_get_list = PurpleRoomlist* function(PurpleConnection* gc);																					
    alias da_purple_roomlist_cancel_get_list = void function(PurpleRoomlist* list);																						
    alias da_purple_roomlist_expand_category = void function(PurpleRoomlist* list, PurpleRoomlistRoom* category);														
    alias da_purple_roomlist_get_fields = GList* function(PurpleRoomlist* roomlist);																					
    alias da_purple_roomlist_room_new = PurpleRoomlistRoom* function(PurpleRoomlistRoomType type, const(gchar)* name, PurpleRoomlistRoom* parent);						
    alias da_purple_roomlist_room_add_field = void function(PurpleRoomlist* list, PurpleRoomlistRoom* room, gconstpointer field);										
    alias da_purple_roomlist_room_join = void function(PurpleRoomlist* list, PurpleRoomlistRoom* room);																	
    alias da_purple_roomlist_room_get_type = PurpleRoomlistRoomType function(PurpleRoomlistRoom* room);																	
    alias da_purple_roomlist_room_get_name = const(char)* function(PurpleRoomlistRoom* room);																			
    alias da_purple_roomlist_room_get_parent = PurpleRoomlistRoom* function(PurpleRoomlistRoom* room);																	
    alias da_purple_roomlist_room_get_fields = GList* function(PurpleRoomlistRoom* room);																				
    alias da_purple_roomlist_field_new = PurpleRoomlistField* function(PurpleRoomlistFieldType type, const(gchar)* label, const(gchar)* name, gboolean hidden);			
    alias da_purple_roomlist_field_get_type = PurpleRoomlistFieldType function(PurpleRoomlistField* field);																
    alias da_purple_roomlist_field_get_label = const(char)* function(PurpleRoomlistField* field);																		
    alias da_purple_roomlist_field_get_hidden = gboolean function(PurpleRoomlistField* field);																			
    alias da_purple_roomlist_set_ui_ops = void function(PurpleRoomlistUiOps* ops);																						
    alias da_purple_roomlist_get_ui_ops = PurpleRoomlistUiOps* function();			
}

__gshared
{
	da_purple_roomlist_show_with_account purple_roomlist_show_with_account;
	da_purple_roomlist_new purple_roomlist_new;
	da_purple_roomlist_ref purple_roomlist_ref;
	da_purple_roomlist_unref purple_roomlist_unref;
	da_purple_roomlist_set_fields purple_roomlist_set_fields;
	da_purple_roomlist_set_in_progress purple_roomlist_set_in_progress;
	da_purple_roomlist_get_in_progress purple_roomlist_get_in_progress;
	da_purple_roomlist_room_add purple_roomlist_room_add;
	da_purple_roomlist_get_list purple_roomlist_get_list;
	da_purple_roomlist_cancel_get_list purple_roomlist_cancel_get_list;
	da_purple_roomlist_expand_category purple_roomlist_expand_category;
	da_purple_roomlist_get_fields purple_roomlist_get_fields;
	da_purple_roomlist_room_new purple_roomlist_room_new;
	da_purple_roomlist_room_add_field purple_roomlist_room_add_field;
	da_purple_roomlist_room_join purple_roomlist_room_join;
	da_purple_roomlist_room_get_type purple_roomlist_room_get_type;
	da_purple_roomlist_room_get_name purple_roomlist_room_get_name;
	da_purple_roomlist_room_get_parent purple_roomlist_room_get_parent;
	da_purple_roomlist_room_get_fields purple_roomlist_room_get_fields;
	da_purple_roomlist_field_new purple_roomlist_field_new;
	da_purple_roomlist_field_get_type purple_roomlist_field_get_type;
	da_purple_roomlist_field_get_label purple_roomlist_field_get_label;
	da_purple_roomlist_field_get_hidden purple_roomlist_field_get_hidden;
	da_purple_roomlist_set_ui_ops purple_roomlist_set_ui_ops;
	da_purple_roomlist_get_ui_ops purple_roomlist_get_ui_ops;
}