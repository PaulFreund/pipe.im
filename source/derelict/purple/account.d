/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.account;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.ghash;
import derelict.glib.glist;
import derelict.glib.gslist;
import derelict.purple.log;
import derelict.purple.status;
import derelict.purple.connection;
import derelict.purple.proxy;
import derelict.purple.privacy;
import derelict.purple.blist;
import derelict.purple.status;

extern (C):

alias _PurpleAccountUiOps PurpleAccountUiOps;
alias _PurpleAccount PurpleAccount;
alias int function (_PurpleAccount*) PurpleFilterAccountFunc;
alias void function (void*) PurpleAccountRequestAuthorizationCb;
alias void function (_PurpleAccount*, int, void*) PurpleAccountRegistrationCb;
alias void function (_PurpleAccount*, int, void*) PurpleAccountUnregistrationCb;
alias void function (_PurpleAccount*, const(char)*) PurpleSetPublicAliasSuccessCallback;
alias void function (_PurpleAccount*, const(char)*) PurpleSetPublicAliasFailureCallback;
alias void function (_PurpleAccount*, const(char)*) PurpleGetPublicAliasSuccessCallback;
alias void function (_PurpleAccount*, const(char)*) PurpleGetPublicAliasFailureCallback;
alias _Anonymous_0 PurpleAccountRequestType;
alias _Anonymous_1 PurpleAccountRequestResponse;

enum _Anonymous_0
{
	PURPLE_ACCOUNT_REQUEST_AUTHORIZATION = 0
}

enum _Anonymous_1
{
	PURPLE_ACCOUNT_RESPONSE_IGNORE = -2,
	PURPLE_ACCOUNT_RESPONSE_DENY = -1,
	PURPLE_ACCOUNT_RESPONSE_PASS = 0,
	PURPLE_ACCOUNT_RESPONSE_ACCEPT = 1
}

struct _PurpleAccountUiOps
{
	void function (PurpleAccount*, const(char)*, const(char)*, const(char)*, const(char)*) notify_added;
	void function (PurpleAccount*, PurpleStatus*) status_changed;
	void function (PurpleAccount*, const(char)*, const(char)*, const(char)*, const(char)*) request_add;
	void* function (PurpleAccount*, const(char)*, const(char)*, const(char)*, const(char)*, gboolean, PurpleAccountRequestAuthorizationCb, PurpleAccountRequestAuthorizationCb, void*) request_authorize;
	void function (void*) close_account_request;
	void function () _purple_reserved1;
	void function () _purple_reserved2;
	void function () _purple_reserved3;
	void function () _purple_reserved4;
}

struct _PurpleAccount
{
	char* username;
	char* alias_;
	char* password;
	char* user_info;
	char* buddy_icon_path;
	gboolean remember_pass;
	char* protocol_id;
	PurpleConnection* gc;
	gboolean disconnecting;
	GHashTable* settings;
	GHashTable* ui_settings;
	PurpleProxyInfo* proxy_info;
	GSList* permit;
	GSList* deny;
	PurplePrivacyType perm_deny;
	GList* status_types;
	PurplePresence* presence;
	PurpleLog* system_log;
	void* ui_data;
	PurpleAccountRegistrationCb registration_cb;
	void* registration_cb_user_data;
	gpointer priv;
}

extern( C ) nothrow 
{
    alias da_purple_account_new = PurpleAccount* function(const(char)* username, const(char)* protocol_id);																																													                      
    alias da_purple_account_destroy = void function(PurpleAccount* account);																																																				                      
    alias da_purple_account_connect = void function(PurpleAccount* account);																																																				                      
    alias da_purple_account_set_register_callback = void function(PurpleAccount* account, PurpleAccountRegistrationCb cb, void* user_data);																																					                      
    alias da_purple_account_register = void function(PurpleAccount* account);																																																				                      
    alias da_purple_account_unregister = void function(PurpleAccount* account, PurpleAccountUnregistrationCb cb, void* user_data);																																							                      
    alias da_purple_account_disconnect = void function(PurpleAccount* account);																																																				                      
    alias da_purple_account_notify_added = void function(PurpleAccount* account, const(char)* remote_user, const(char)* id, const(char)* alias_, const(char)* message);																														                      
    alias da_purple_account_request_add = void function(PurpleAccount* account, const(char)* remote_user, const(char)* id, const(char)* alias_, const(char)* message);																														                      
    alias da_purple_account_request_authorization = void* function(PurpleAccount* account, const(char)* remote_user, const(char)* id, const(char)* alias_, const(char)* message, gboolean on_list, PurpleAccountRequestAuthorizationCb auth_cb, PurpleAccountRequestAuthorizationCb deny_cb, void* user_data);		
    alias da_purple_account_request_close_with_account = void function(PurpleAccount* account);																																														                              
    alias da_purple_account_request_close = void function(void* ui_handle);																																																			                              
    alias da_purple_account_request_password = void function(PurpleAccount* account, GCallback ok_cb, GCallback cancel_cb, void* user_data);																																		                              
    alias da_purple_account_request_change_password = void function(PurpleAccount* account);																																														                              
    alias da_purple_account_request_change_user_info = void function(PurpleAccount* account);																																														                              
    alias da_purple_account_set_username = void function(PurpleAccount* account, const(char)* username);																																											                              
    alias da_purple_account_set_password = void function(PurpleAccount* account, const(char)* password);																																											                              
    alias da_purple_account_set_alias = void function(PurpleAccount* account, const(char)* alias_);																																													                              
    alias da_purple_account_set_user_info = void function(PurpleAccount* account, const(char)* user_info);																																											                              
    alias da_purple_account_set_buddy_icon_path = void function(PurpleAccount* account, const(char)* path);																																											                              
    alias da_purple_account_set_protocol_id = void function(PurpleAccount* account, const(char)* protocol_id);																																										                              
    alias da_purple_account_set_connection = void function(PurpleAccount* account, PurpleConnection* gc);																																											                              
    alias da_purple_account_set_remember_password = void function(PurpleAccount* account, gboolean value);																																											                              
    alias da_purple_account_set_check_mail = void function(PurpleAccount* account, gboolean value);																																													                              
    alias da_purple_account_set_enabled = void function(PurpleAccount* account, const(char)* ui, gboolean value);																																									                              
    alias da_purple_account_set_proxy_info = void function(PurpleAccount* account, PurpleProxyInfo* info);																																											                              
    alias da_purple_account_set_privacy_type = void function(PurpleAccount* account, PurplePrivacyType privacy_type);																																								                              
    alias da_purple_account_set_status_types = void function(PurpleAccount* account, GList* status_types);																																											                              
    alias da_purple_account_set_status = void function(PurpleAccount* account, const(char)* status_id, gboolean active, ...);																																						                              
    alias da_purple_account_set_status_list = void function(PurpleAccount* account, const(char)* status_id, gboolean active, GList* attrs);																																			                              
    alias da_purple_account_set_public_alias = void function(PurpleAccount* account, const(char)* alias_, PurpleSetPublicAliasSuccessCallback success_cb, PurpleSetPublicAliasFailureCallback failure_cb);																			                              
    alias da_purple_account_get_public_alias = void function(PurpleAccount* account, PurpleGetPublicAliasSuccessCallback success_cb, PurpleGetPublicAliasFailureCallback failure_cb);																								                              
    alias da_purple_account_get_silence_suppression = gboolean function(const(PurpleAccount)* account);																																												                              
    alias da_purple_account_set_silence_suppression = void function(PurpleAccount* account, gboolean value);																																										                              
    alias da_purple_account_clear_settings = void function(PurpleAccount* account);																																																	                              
    alias da_purple_account_remove_setting = void function(PurpleAccount* account, const(char)* setting);																																											                              
    alias da_purple_account_set_int = void function(PurpleAccount* account, const(char)* name, int value);																																											                              
    alias da_purple_account_set_string = void function(PurpleAccount* account, const(char)* name, const(char)* value);																																								                              
    alias da_purple_account_set_bool = void function(PurpleAccount* account, const(char)* name, gboolean value);																																									                              
    alias da_purple_account_set_ui_int = void function(PurpleAccount* account, const(char)* ui, const(char)* name, int value);																																						                              
    alias da_purple_account_set_ui_string = void function(PurpleAccount* account, const(char)* ui, const(char)* name, const(char)* value);																																			                              
    alias da_purple_account_set_ui_bool = void function(PurpleAccount* account, const(char)* ui, const(char)* name, gboolean value);																																				                              
    alias da_purple_account_is_connected = gboolean function(const(PurpleAccount)* account);																																														                              
    alias da_purple_account_is_connecting = gboolean function(const(PurpleAccount)* account);																																														                              
    alias da_purple_account_is_disconnected = gboolean function(const(PurpleAccount)* account);																																														                              
    alias da_purple_account_get_username = const(char)* function(const(PurpleAccount)* account);																																													                              
    alias da_purple_account_get_password = const(char)* function(const(PurpleAccount)* account);																																													                              
    alias da_purple_account_get_alias = const(char)* function(const(PurpleAccount)* account);																																														                              
    alias da_purple_account_get_user_info = const(char)* function(const(PurpleAccount)* account);																																													                              
    alias da_purple_account_get_buddy_icon_path = const(char)* function(const(PurpleAccount)* account);																																												                              
    alias da_purple_account_get_protocol_id = const(char)* function(const(PurpleAccount)* account);																																													                              
    alias da_purple_account_get_protocol_name = const(char)* function(const(PurpleAccount)* account);																																												                              
    alias da_purple_account_get_connection = PurpleConnection* function(const(PurpleAccount)* account);																																												                              
    alias da_purple_account_get_name_for_display = const(gchar)* function(const(PurpleAccount)* account);																																											                              
    alias da_purple_account_get_remember_password = gboolean function(const(PurpleAccount)* account);																																												                              
    alias da_purple_account_get_check_mail = gboolean function(const(PurpleAccount)* account);																																														                              
    alias da_purple_account_get_enabled = gboolean function(const(PurpleAccount)* account, const(char)* ui);																																										                              
    alias da_purple_account_get_proxy_info = PurpleProxyInfo* function(const(PurpleAccount)* account);																																												                              
    alias da_purple_account_get_privacy_type = PurplePrivacyType function(const(PurpleAccount)* account);																																											                              
    alias da_purple_account_get_active_status = PurpleStatus* function(const(PurpleAccount)* account);																																												                              
    alias da_purple_account_get_status = PurpleStatus* function(const(PurpleAccount)* account, const(char)* status_id);																																								                              
    alias da_purple_account_get_status_type = PurpleStatusType* function(const(PurpleAccount)* account, const(char)* id);																																							                              
    alias da_purple_account_get_status_type_with_primitive = PurpleStatusType* function(const(PurpleAccount)* account, PurpleStatusPrimitive primitive);																															                              
    alias da_purple_account_get_presence = PurplePresence* function(const(PurpleAccount)* account);																																													                              
    alias da_purple_account_is_status_active = gboolean function(const(PurpleAccount)* account, const(char)* status_id);																																							                              
    alias da_purple_account_get_status_types = GList* function(const(PurpleAccount)* account);																																														                              
    alias da_purple_account_get_int = int function(const(PurpleAccount)* account, const(char)* name, int default_value);																																							                              
    alias da_purple_account_get_string = const(char)* function(const(PurpleAccount)* account, const(char)* name, const(char)* default_value);																																		                              
    alias da_purple_account_get_bool = gboolean function(const(PurpleAccount)* account, const(char)* name, gboolean default_value);																																					                              
    alias da_purple_account_get_ui_int = int function(const(PurpleAccount)* account, const(char)* ui, const(char)* name, int default_value);																																		                              
    alias da_purple_account_get_ui_string = const(char)* function(const(PurpleAccount)* account, const(char)* ui, const(char)* name, const(char)* default_value);																													                              
    alias da_purple_account_get_ui_bool = gboolean function(const(PurpleAccount)* account, const(char)* ui, const(char)* name, gboolean default_value);																																                              
    alias da_purple_account_get_log = PurpleLog* function(PurpleAccount* account, gboolean create);																																													                              
    alias da_purple_account_destroy_log = void function(PurpleAccount* account);																																																	                              
    alias da_purple_account_add_buddy = void function(PurpleAccount* account, PurpleBuddy* buddy);																																													                              
    alias da_purple_account_add_buddy_with_invite = void function(PurpleAccount* account, PurpleBuddy* buddy, const(char)* message);																																				                              
    alias da_purple_account_add_buddies = void function(PurpleAccount* account, GList* buddies);																																													                              
    alias da_purple_account_add_buddies_with_invite = void function(PurpleAccount* account, GList* buddies, const(char)* message);																																					                              
    alias da_purple_account_remove_buddy = void function(PurpleAccount* account, PurpleBuddy* buddy, PurpleGroup* group);																																							                              
    alias da_purple_account_remove_buddies = void function(PurpleAccount* account, GList* buddies, GList* groups);																																									                              
    alias da_purple_account_remove_group = void function(PurpleAccount* account, PurpleGroup* group);																																												                              
    alias da_purple_account_change_password = void function(PurpleAccount* account, const(char)* orig_pw, const(char)* new_pw);																																						                              
    alias da_purple_account_supports_offline_message = gboolean function(PurpleAccount* account, PurpleBuddy* buddy);																																								                              
    alias da_purple_account_get_current_error = const(PurpleConnectionErrorInfo)* function(PurpleAccount* account);																																									                              
    alias da_purple_account_clear_current_error = void function(PurpleAccount* account);																																															                              
    alias da_purple_accounts_add = void function(PurpleAccount* account);																																																			                              
    alias da_purple_accounts_remove = void function(PurpleAccount* account);																																																		                              
    alias da_purple_accounts_delete = void function(PurpleAccount* account);																																																		                              
    alias da_purple_accounts_reorder = void function(PurpleAccount* account, gint new_index);																																														                              
    alias da_purple_accounts_get_all = GList* function();																																																	                                                      
    alias da_purple_accounts_get_all_active = GList* function();																																															                                                      
    alias da_purple_accounts_find = PurpleAccount* function(const(char)* name, const(char)* protocol);																																						                                                      
    alias da_purple_accounts_restore_current_statuses = void function();																																													                                                      
    alias da_purple_accounts_set_ui_ops = void function(PurpleAccountUiOps* ops);																																											                                                      
    alias da_purple_accounts_get_ui_ops = PurpleAccountUiOps* function();																																													                                                      
    alias da_purple_accounts_get_handle = void* function();																																																	                                                      
    alias da_purple_accounts_init = void function();																																																		                                                      
    alias da_purple_accounts_uninit = void function();																																																		                                                      
}

__gshared
{
    da_purple_account_new purple_account_new; 
    da_purple_account_destroy purple_account_destroy; 
    da_purple_account_connect purple_account_connect; 
    da_purple_account_set_register_callback purple_account_set_register_callback; 
    da_purple_account_register purple_account_register; 
    da_purple_account_unregister purple_account_unregister; 
    da_purple_account_disconnect purple_account_disconnect; 
    da_purple_account_notify_added purple_account_notify_added; 
    da_purple_account_request_add purple_account_request_add; 
    da_purple_account_request_authorization purple_account_request_authorization; 
    da_purple_account_request_close_with_account purple_account_request_close_with_account; 
    da_purple_account_request_close purple_account_request_close; 
    da_purple_account_request_password purple_account_request_password; 
    da_purple_account_request_change_password purple_account_request_change_password; 
    da_purple_account_request_change_user_info purple_account_request_change_user_info; 
    da_purple_account_set_username purple_account_set_username; 
    da_purple_account_set_password purple_account_set_password; 
    da_purple_account_set_alias purple_account_set_alias; 
    da_purple_account_set_user_info purple_account_set_user_info; 
    da_purple_account_set_buddy_icon_path purple_account_set_buddy_icon_path; 
    da_purple_account_set_protocol_id purple_account_set_protocol_id; 
    da_purple_account_set_connection purple_account_set_connection; 
    da_purple_account_set_remember_password purple_account_set_remember_password; 
    da_purple_account_set_check_mail purple_account_set_check_mail; 
    da_purple_account_set_enabled purple_account_set_enabled; 
    da_purple_account_set_proxy_info purple_account_set_proxy_info; 
    da_purple_account_set_privacy_type purple_account_set_privacy_type; 
    da_purple_account_set_status_types purple_account_set_status_types; 
    da_purple_account_set_status purple_account_set_status; 
    da_purple_account_set_status_list purple_account_set_status_list; 
    da_purple_account_set_public_alias purple_account_set_public_alias; 
    da_purple_account_get_public_alias purple_account_get_public_alias; 
    da_purple_account_get_silence_suppression purple_account_get_silence_suppression; 
    da_purple_account_set_silence_suppression purple_account_set_silence_suppression; 
    da_purple_account_clear_settings purple_account_clear_settings; 
    da_purple_account_remove_setting purple_account_remove_setting; 
    da_purple_account_set_int purple_account_set_int; 
    da_purple_account_set_string purple_account_set_string; 
    da_purple_account_set_bool purple_account_set_bool; 
    da_purple_account_set_ui_int purple_account_set_ui_int; 
    da_purple_account_set_ui_string purple_account_set_ui_string; 
    da_purple_account_set_ui_bool purple_account_set_ui_bool; 
    da_purple_account_is_connected purple_account_is_connected; 
    da_purple_account_is_connecting purple_account_is_connecting; 
    da_purple_account_is_disconnected purple_account_is_disconnected; 
    da_purple_account_get_username purple_account_get_username; 
    da_purple_account_get_password purple_account_get_password; 
    da_purple_account_get_alias purple_account_get_alias; 
    da_purple_account_get_user_info purple_account_get_user_info; 
    da_purple_account_get_buddy_icon_path purple_account_get_buddy_icon_path; 
    da_purple_account_get_protocol_id purple_account_get_protocol_id; 
    da_purple_account_get_protocol_name purple_account_get_protocol_name; 
    da_purple_account_get_connection purple_account_get_connection; 
    da_purple_account_get_name_for_display purple_account_get_name_for_display; 
    da_purple_account_get_remember_password purple_account_get_remember_password; 
    da_purple_account_get_check_mail purple_account_get_check_mail; 
    da_purple_account_get_enabled purple_account_get_enabled; 
    da_purple_account_get_proxy_info purple_account_get_proxy_info; 
    da_purple_account_get_privacy_type purple_account_get_privacy_type; 
    da_purple_account_get_active_status purple_account_get_active_status; 
    da_purple_account_get_status purple_account_get_status; 
    da_purple_account_get_status_type purple_account_get_status_type; 
    da_purple_account_get_status_type_with_primitive purple_account_get_status_type_with_primitive; 
    da_purple_account_get_presence purple_account_get_presence; 
    da_purple_account_is_status_active purple_account_is_status_active; 
    da_purple_account_get_status_types purple_account_get_status_types; 
    da_purple_account_get_int purple_account_get_int; 
    da_purple_account_get_string purple_account_get_string; 
    da_purple_account_get_bool purple_account_get_bool; 
    da_purple_account_get_ui_int purple_account_get_ui_int; 
    da_purple_account_get_ui_string purple_account_get_ui_string; 
    da_purple_account_get_ui_bool purple_account_get_ui_bool; 
    da_purple_account_get_log purple_account_get_log; 
    da_purple_account_destroy_log purple_account_destroy_log; 
    da_purple_account_add_buddy purple_account_add_buddy; 
    da_purple_account_add_buddy_with_invite purple_account_add_buddy_with_invite; 
    da_purple_account_add_buddies purple_account_add_buddies; 
    da_purple_account_add_buddies_with_invite purple_account_add_buddies_with_invite; 
    da_purple_account_remove_buddy purple_account_remove_buddy; 
    da_purple_account_remove_buddies purple_account_remove_buddies; 
    da_purple_account_remove_group purple_account_remove_group; 
    da_purple_account_change_password purple_account_change_password; 
    da_purple_account_supports_offline_message purple_account_supports_offline_message; 
    da_purple_account_get_current_error purple_account_get_current_error; 
    da_purple_account_clear_current_error purple_account_clear_current_error; 
    da_purple_accounts_add purple_accounts_add; 
    da_purple_accounts_remove purple_accounts_remove; 
    da_purple_accounts_delete purple_accounts_delete; 
    da_purple_accounts_reorder purple_accounts_reorder; 
    da_purple_accounts_get_all purple_accounts_get_all; 
    da_purple_accounts_get_all_active purple_accounts_get_all_active; 
    da_purple_accounts_find purple_accounts_find; 
    da_purple_accounts_restore_current_statuses purple_accounts_restore_current_statuses; 
    da_purple_accounts_set_ui_ops purple_accounts_set_ui_ops; 
    da_purple_accounts_get_ui_ops purple_accounts_get_ui_ops; 
    da_purple_accounts_get_handle purple_accounts_get_handle; 
    da_purple_accounts_init purple_accounts_init; 
    da_purple_accounts_uninit purple_accounts_uninit; 
}