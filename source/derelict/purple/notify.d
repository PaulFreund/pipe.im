/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.notify;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;
import derelict.purple.connection;

extern (C):

alias _PurpleNotifyUserInfoEntry PurpleNotifyUserInfoEntry;
alias _PurpleNotifyUserInfo PurpleNotifyUserInfo;
alias void function (void*) PurpleNotifyCloseCallback;
alias _Anonymous_0 PurpleNotifyType;
alias _Anonymous_1 PurpleNotifyMsgType;
alias _Anonymous_2 PurpleNotifySearchButtonType;
alias _Anonymous_3 PurpleNotifySearchResults;
alias _Anonymous_4 PurpleNotifyUserInfoEntryType;
alias _Anonymous_5 PurpleNotifySearchColumn;
alias void function (_PurpleConnection*, _GList*, void*) PurpleNotifySearchResultsCallback;
alias _Anonymous_6 PurpleNotifySearchButton;
alias _Anonymous_7 PurpleNotifyUiOps;

enum _Anonymous_0
{
	PURPLE_NOTIFY_MESSAGE = 0,
	PURPLE_NOTIFY_EMAIL = 1,
	PURPLE_NOTIFY_EMAILS = 2,
	PURPLE_NOTIFY_FORMATTED = 3,
	PURPLE_NOTIFY_SEARCHRESULTS = 4,
	PURPLE_NOTIFY_USERINFO = 5,
	PURPLE_NOTIFY_URI = 6
}

enum _Anonymous_1
{
	PURPLE_NOTIFY_MSG_ERROR = 0,
	PURPLE_NOTIFY_MSG_WARNING = 1,
	PURPLE_NOTIFY_MSG_INFO = 2
}

enum _Anonymous_2
{
	PURPLE_NOTIFY_BUTTON_LABELED = 0,
	PURPLE_NOTIFY_BUTTON_CONTINUE = 1,
	PURPLE_NOTIFY_BUTTON_ADD = 2,
	PURPLE_NOTIFY_BUTTON_INFO = 3,
	PURPLE_NOTIFY_BUTTON_IM = 4,
	PURPLE_NOTIFY_BUTTON_JOIN = 5,
	PURPLE_NOTIFY_BUTTON_INVITE = 6
}

enum _Anonymous_4
{
	PURPLE_NOTIFY_USER_INFO_ENTRY_PAIR = 0,
	PURPLE_NOTIFY_USER_INFO_ENTRY_SECTION_BREAK = 1,
	PURPLE_NOTIFY_USER_INFO_ENTRY_SECTION_HEADER = 2
}

struct _Anonymous_3
{
	GList* columns;
	GList* rows;
	GList* buttons;
}

struct _Anonymous_5
{
	char* title;
}

struct _Anonymous_6
{
	PurpleNotifySearchButtonType type;
	PurpleNotifySearchResultsCallback callback;
	char* label;
}

struct _Anonymous_7
{
	void* function (PurpleNotifyMsgType, const(char)*, const(char)*, const(char)*) notify_message;
	void* function (PurpleConnection*, const(char)*, const(char)*, const(char)*, const(char)*) notify_email;
	void* function (PurpleConnection*, size_t, gboolean, const(char*)*, const(char*)*, const(char*)*, const(char*)*) notify_emails;
	void* function (const(char)*, const(char)*, const(char)*, const(char)*) notify_formatted;
	void* function (PurpleConnection*, const(char)*, const(char)*, const(char)*, PurpleNotifySearchResults*, gpointer) notify_searchresults;
	void function (PurpleConnection*, PurpleNotifySearchResults*, void*) notify_searchresults_new_rows;
	void* function (PurpleConnection*, const(char)*, PurpleNotifyUserInfo*) notify_userinfo;
	void* function (const(char)*) notify_uri;
	void function (PurpleNotifyType, void*) close_notify;
	void function () _purple_reserved1;
	void function () _purple_reserved2;
	void function () _purple_reserved3;
	void function () _purple_reserved4;
}

struct _PurpleNotifyUserInfoEntry;


struct _PurpleNotifyUserInfo;


extern( C ) nothrow 
{
	alias da_purple_notify_searchresults = void* function(PurpleConnection* gc, const(char)* title, const(char)* primary, const(char)* secondary, PurpleNotifySearchResults* results, PurpleNotifyCloseCallback cb, gpointer user_data);			
    alias da_purple_notify_searchresults_free = void function(PurpleNotifySearchResults* results);																																					
    alias da_purple_notify_searchresults_new_rows = void function(PurpleConnection* gc, PurpleNotifySearchResults* results, void* data);																											
    alias da_purple_notify_searchresults_button_add = void function(PurpleNotifySearchResults* results, PurpleNotifySearchButtonType type, PurpleNotifySearchResultsCallback cb);																	
    alias da_purple_notify_searchresults_button_add_labeled = void function(PurpleNotifySearchResults* results, const(char)* label, PurpleNotifySearchResultsCallback cb);																			
    alias da_purple_notify_searchresults_new = PurpleNotifySearchResults* function();																																								
    alias da_purple_notify_searchresults_column_new = PurpleNotifySearchColumn* function(const(char)* title);																																		
    alias da_purple_notify_searchresults_column_add = void function(PurpleNotifySearchResults* results, PurpleNotifySearchColumn* column);																											
    alias da_purple_notify_searchresults_row_add = void function(PurpleNotifySearchResults* results, GList* row);																																	
    alias da_purple_notify_searchresults_get_rows_count = guint function(PurpleNotifySearchResults* results);																																		
    alias da_purple_notify_searchresults_get_columns_count = guint function(PurpleNotifySearchResults* results);																																	
    alias da_purple_notify_searchresults_row_get = GList* function(PurpleNotifySearchResults* results, uint row_id);																																
    alias da_purple_notify_searchresults_column_get_title = char* function(PurpleNotifySearchResults* results, uint column_id);																														
    alias da_purple_notify_message = void* function(void* handle, PurpleNotifyMsgType type, const(char)* title, const(char)* primary, const(char)* secondary, PurpleNotifyCloseCallback cb, gpointer user_data);									
    alias da_purple_notify_email = void* function(void* handle, const(char)* subject, const(char)* from, const(char)* to, const(char)* url, PurpleNotifyCloseCallback cb, gpointer user_data);														
    alias da_purple_notify_emails = void* function(void* handle, size_t count, gboolean detailed, const(char*)* subjects, const(char*)* froms, const(char*)* tos, const(char*)* urls, PurpleNotifyCloseCallback cb, gpointer user_data);			
    alias da_purple_notify_formatted = void* function(void* handle, const(char)* title, const(char)* primary, const(char)* secondary, const(char)* text, PurpleNotifyCloseCallback cb, gpointer user_data);											
    alias da_purple_notify_userinfo = void* function(PurpleConnection* gc, const(char)* who, PurpleNotifyUserInfo* user_info, PurpleNotifyCloseCallback cb, gpointer user_data);																	
    alias da_purple_notify_user_info_new = PurpleNotifyUserInfo* function();																																										
    alias da_purple_notify_user_info_destroy = void function(PurpleNotifyUserInfo* user_info);																																						
    alias da_purple_notify_user_info_get_entries = GList* function(PurpleNotifyUserInfo* user_info);																																				
    alias da_purple_notify_user_info_get_text_with_newline = char* function(PurpleNotifyUserInfo* user_info, const(char)* newline);																													
    alias da_purple_notify_user_info_add_pair = void function(PurpleNotifyUserInfo* user_info, const(char)* label, const(char)* value);																												
    alias da_purple_notify_user_info_add_pair_plaintext = void function(PurpleNotifyUserInfo* user_info, const(char)* label, const(char)* value);																									
    alias da_purple_notify_user_info_prepend_pair = void function(PurpleNotifyUserInfo* user_info, const(char)* label, const(char)* value);																											
    alias da_purple_notify_user_info_remove_entry = void function(PurpleNotifyUserInfo* user_info, PurpleNotifyUserInfoEntry* user_info_entry);																										
    alias da_purple_notify_user_info_entry_new = PurpleNotifyUserInfoEntry* function(const(char)* label, const(char)* value);																														
    alias da_purple_notify_user_info_add_section_break = void function(PurpleNotifyUserInfo* user_info);																																			
    alias da_purple_notify_user_info_prepend_section_break = void function(PurpleNotifyUserInfo* user_info);																																		
    alias da_purple_notify_user_info_add_section_header = void function(PurpleNotifyUserInfo* user_info, const(char)* label);																														
    alias da_purple_notify_user_info_prepend_section_header = void function(PurpleNotifyUserInfo* user_info, const(char)* label);																													
    alias da_purple_notify_user_info_remove_last_item = void function(PurpleNotifyUserInfo* user_info);																																				
    alias da_purple_notify_user_info_entry_get_label = const(gchar)* function(PurpleNotifyUserInfoEntry* user_info_entry);																															
    alias da_purple_notify_user_info_entry_set_label = void function(PurpleNotifyUserInfoEntry* user_info_entry, const(char)* label);																												
    alias da_purple_notify_user_info_entry_get_value = const(gchar)* function(PurpleNotifyUserInfoEntry* user_info_entry);																															
    alias da_purple_notify_user_info_entry_set_value = void function(PurpleNotifyUserInfoEntry* user_info_entry, const(char)* value);																												
    alias da_purple_notify_user_info_entry_get_type = PurpleNotifyUserInfoEntryType function(PurpleNotifyUserInfoEntry* user_info_entry);																											
    alias da_purple_notify_user_info_entry_set_type = void function(PurpleNotifyUserInfoEntry* user_info_entry, PurpleNotifyUserInfoEntryType type);																								
    alias da_purple_notify_uri = void* function(void* handle, const(char)* uri);																																									
    alias da_purple_notify_close = void function(PurpleNotifyType type, void* ui_handle);																																							
    alias da_purple_notify_close_with_handle = void function(void* handle);																																											
    alias da_purple_notify_set_ui_ops = void function(PurpleNotifyUiOps* ops);																																										
    alias da_purple_notify_get_ui_ops = PurpleNotifyUiOps* function();																																												
    alias da_purple_notify_get_handle = void* function();																																															
    alias da_purple_notify_init = void function();																																																	
    alias da_purple_notify_uninit = void function();	
}

__gshared
{
	da_purple_notify_searchresults purple_notify_searchresults;
	da_purple_notify_searchresults_free purple_notify_searchresults_free;
	da_purple_notify_searchresults_new_rows purple_notify_searchresults_new_rows;
	da_purple_notify_searchresults_button_add purple_notify_searchresults_button_add;
	da_purple_notify_searchresults_button_add_labeled purple_notify_searchresults_button_add_labeled;
	da_purple_notify_searchresults_new purple_notify_searchresults_new;
	da_purple_notify_searchresults_column_new purple_notify_searchresults_column_new;
	da_purple_notify_searchresults_column_add purple_notify_searchresults_column_add;
	da_purple_notify_searchresults_row_add purple_notify_searchresults_row_add;
	da_purple_notify_searchresults_get_rows_count purple_notify_searchresults_get_rows_count;
	da_purple_notify_searchresults_get_columns_count purple_notify_searchresults_get_columns_count;
	da_purple_notify_searchresults_row_get purple_notify_searchresults_row_get;
	da_purple_notify_searchresults_column_get_title purple_notify_searchresults_column_get_title;
	da_purple_notify_message purple_notify_message;
	da_purple_notify_email purple_notify_email;
	da_purple_notify_emails purple_notify_emails;
	da_purple_notify_formatted purple_notify_formatted;
	da_purple_notify_userinfo purple_notify_userinfo;
	da_purple_notify_user_info_new purple_notify_user_info_new;
	da_purple_notify_user_info_destroy purple_notify_user_info_destroy;
	da_purple_notify_user_info_get_entries purple_notify_user_info_get_entries;
	da_purple_notify_user_info_get_text_with_newline purple_notify_user_info_get_text_with_newline;
	da_purple_notify_user_info_add_pair purple_notify_user_info_add_pair;
	da_purple_notify_user_info_add_pair_plaintext purple_notify_user_info_add_pair_plaintext;
	da_purple_notify_user_info_prepend_pair purple_notify_user_info_prepend_pair;
	da_purple_notify_user_info_remove_entry purple_notify_user_info_remove_entry;
	da_purple_notify_user_info_entry_new purple_notify_user_info_entry_new;
	da_purple_notify_user_info_add_section_break purple_notify_user_info_add_section_break;
	da_purple_notify_user_info_prepend_section_break purple_notify_user_info_prepend_section_break;
	da_purple_notify_user_info_add_section_header purple_notify_user_info_add_section_header;
	da_purple_notify_user_info_prepend_section_header purple_notify_user_info_prepend_section_header;
	da_purple_notify_user_info_remove_last_item purple_notify_user_info_remove_last_item;
	da_purple_notify_user_info_entry_get_label purple_notify_user_info_entry_get_label;
	da_purple_notify_user_info_entry_set_label purple_notify_user_info_entry_set_label;
	da_purple_notify_user_info_entry_get_value purple_notify_user_info_entry_get_value;
	da_purple_notify_user_info_entry_set_value purple_notify_user_info_entry_set_value;
	da_purple_notify_user_info_entry_get_type purple_notify_user_info_entry_get_type;
	da_purple_notify_user_info_entry_set_type purple_notify_user_info_entry_set_type;
	da_purple_notify_uri purple_notify_uri;
	da_purple_notify_close purple_notify_close;
	da_purple_notify_close_with_handle purple_notify_close_with_handle;
	da_purple_notify_set_ui_ops purple_notify_set_ui_ops;
	da_purple_notify_get_ui_ops purple_notify_get_ui_ops;
	da_purple_notify_get_handle purple_notify_get_handle;
	da_purple_notify_init purple_notify_init;
	da_purple_notify_uninit purple_notify_uninit;
}