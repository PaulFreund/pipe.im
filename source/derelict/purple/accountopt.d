/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.accountopt;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;
import derelict.purple.prefs;
extern (C):

alias _Anonymous_0 PurpleAccountOption;
alias _Anonymous_1 PurpleAccountUserSplit;

struct _Anonymous_0
{
	PurplePrefType type;
	char* text;
	char* pref_name;
	union
	{
		gboolean boolean;
		int integer;
		char* string;
		GList* list;
	}
	gboolean masked;
}

struct _Anonymous_1
{
	char* text;
	char* default_value;
	char field_sep;
	gboolean reverse;
}

extern( C ) nothrow 
{
    alias da_purple_account_option_new = PurpleAccountOption* function(PurplePrefType type, const(char)* text, const(char)* pref_name);						
    alias da_purple_account_option_bool_new = PurpleAccountOption* function(const(char)* text, const(char)* pref_name, gboolean default_value);				
    alias da_purple_account_option_int_new = PurpleAccountOption* function(const(char)* text, const(char)* pref_name, int default_value);					
    alias da_purple_account_option_string_new = PurpleAccountOption* function(const(char)* text, const(char)* pref_name, const(char)* default_value);		
    alias da_purple_account_option_list_new = PurpleAccountOption* function(const(char)* text, const(char)* pref_name, GList* list);						
    alias da_purple_account_option_destroy = void function(PurpleAccountOption* option);																	
    alias da_purple_account_option_set_default_bool = void function(PurpleAccountOption* option, gboolean value);											
    alias da_purple_account_option_set_default_int = void function(PurpleAccountOption* option, int value);													
    alias da_purple_account_option_set_default_string = void function(PurpleAccountOption* option, const(char)* value);										
    alias da_purple_account_option_set_masked = void function(PurpleAccountOption* option, gboolean masked);												
    alias da_purple_account_option_set_list = void function(PurpleAccountOption* option, GList* values);													
    alias da_purple_account_option_add_list_item = void function(PurpleAccountOption* option, const(char)* key, const(char)* value);						
    alias da_purple_account_option_get_type = PurplePrefType function(const(PurpleAccountOption)* option);													
    alias da_purple_account_option_get_text = const(char)* function(const(PurpleAccountOption)* option);													
    alias da_purple_account_option_get_setting = const(char)* function(const(PurpleAccountOption)* option);													
    alias da_purple_account_option_get_default_bool = gboolean function(const(PurpleAccountOption)* option);												
    alias da_purple_account_option_get_default_int = int function(const(PurpleAccountOption)* option);														
    alias da_purple_account_option_get_default_string = const(char)* function(const(PurpleAccountOption)* option);											
    alias da_purple_account_option_get_default_list_value = const(char)* function(const(PurpleAccountOption)* option);										
    alias da_purple_account_option_get_masked = gboolean function(const(PurpleAccountOption)* option);														
    alias da_purple_account_option_get_list = GList* function(const(PurpleAccountOption)* option);															
    alias da_purple_account_user_split_new = PurpleAccountUserSplit* function(const(char)* text, const(char)* default_value, char sep);						
    alias da_purple_account_user_split_destroy = void function(PurpleAccountUserSplit* split);																
    alias da_purple_account_user_split_get_text = const(char)* function(const(PurpleAccountUserSplit)* split);												
    alias da_purple_account_user_split_get_default_value = const(char)* function(const(PurpleAccountUserSplit)* split);										
    alias da_purple_account_user_split_get_separator = char function(const(PurpleAccountUserSplit)* split);													
    alias da_purple_account_user_split_get_reverse = gboolean function(const(PurpleAccountUserSplit)* split);												
    alias da_purple_account_user_split_set_reverse = void function(PurpleAccountUserSplit* split, gboolean reverse);										
}

__gshared
{
    da_purple_account_option_new purple_account_option_new; 
    da_purple_account_option_bool_new purple_account_option_bool_new; 
    da_purple_account_option_int_new purple_account_option_int_new; 
    da_purple_account_option_string_new purple_account_option_string_new; 
    da_purple_account_option_list_new purple_account_option_list_new; 
    da_purple_account_option_destroy purple_account_option_destroy; 
    da_purple_account_option_set_default_bool purple_account_option_set_default_bool; 
    da_purple_account_option_set_default_int purple_account_option_set_default_int; 
    da_purple_account_option_set_default_string purple_account_option_set_default_string; 
    da_purple_account_option_set_masked purple_account_option_set_masked; 
    da_purple_account_option_set_list purple_account_option_set_list; 
    da_purple_account_option_add_list_item purple_account_option_add_list_item; 
    da_purple_account_option_get_type purple_account_option_get_type; 
    da_purple_account_option_get_text purple_account_option_get_text; 
    da_purple_account_option_get_setting purple_account_option_get_setting; 
    da_purple_account_option_get_default_bool purple_account_option_get_default_bool; 
    da_purple_account_option_get_default_int purple_account_option_get_default_int; 
    da_purple_account_option_get_default_string purple_account_option_get_default_string; 
    da_purple_account_option_get_default_list_value purple_account_option_get_default_list_value; 
    da_purple_account_option_get_masked purple_account_option_get_masked; 
    da_purple_account_option_get_list purple_account_option_get_list; 
    da_purple_account_user_split_new purple_account_user_split_new; 
    da_purple_account_user_split_destroy purple_account_user_split_destroy; 
    da_purple_account_user_split_get_text purple_account_user_split_get_text; 
    da_purple_account_user_split_get_default_value purple_account_user_split_get_default_value; 
    da_purple_account_user_split_get_separator purple_account_user_split_get_separator; 
    da_purple_account_user_split_get_reverse purple_account_user_split_get_reverse; 
    da_purple_account_user_split_set_reverse purple_account_user_split_set_reverse; 
}