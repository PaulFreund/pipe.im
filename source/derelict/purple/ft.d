/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.ft;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;
import derelict.purple.account;
import core.stdc.config;
import core.stdc.stdio;
import core.stdc.time;

extern (C):

alias _PurpleXfer PurpleXfer;
alias _Anonymous_0 PurpleXferType;
alias _Anonymous_1 PurpleXferStatusType;
alias _Anonymous_2 PurpleXferUiOps;

enum _Anonymous_0
{
	PURPLE_XFER_UNKNOWN = 0,
	PURPLE_XFER_SEND = 1,
	PURPLE_XFER_RECEIVE = 2
}

enum _Anonymous_1
{
	PURPLE_XFER_STATUS_UNKNOWN = 0,
	PURPLE_XFER_STATUS_NOT_STARTED = 1,
	PURPLE_XFER_STATUS_ACCEPTED = 2,
	PURPLE_XFER_STATUS_STARTED = 3,
	PURPLE_XFER_STATUS_DONE = 4,
	PURPLE_XFER_STATUS_CANCEL_LOCAL = 5,
	PURPLE_XFER_STATUS_CANCEL_REMOTE = 6
}

struct _Anonymous_2
{
	void function (PurpleXfer*) new_xfer;
	void function (PurpleXfer*) destroy;
	void function (PurpleXfer*) add_xfer;
	void function (PurpleXfer*, double) update_progress;
	void function (PurpleXfer*) cancel_local;
	void function (PurpleXfer*) cancel_remote;
	gssize function (PurpleXfer*, const(guchar)*, gssize) ui_write;
	gssize function (PurpleXfer*, guchar**, gssize) ui_read;
	void function (PurpleXfer*, const(guchar)*, gsize) data_not_sent;
	void function (PurpleXfer*, const(gchar)*) add_thumbnail;
}

struct _PurpleXfer
{
	guint ref_;
	PurpleXferType type;
	PurpleAccount* account;
	char* who;
	char* message;
	char* filename;
	char* local_filename;
	size_t size;
	FILE* dest_fp;
	char* remote_ip;
	int local_port;
	int remote_port;
	int fd;
	int watcher;
	size_t bytes_sent;
	size_t bytes_remaining;
	time_t start_time;
	time_t end_time;
	size_t current_buffer_size;
	PurpleXferStatusType status;
	struct
	{
		void function (PurpleXfer*) init;
		void function (PurpleXfer*) request_denied;
		void function (PurpleXfer*) start;
		void function (PurpleXfer*) end;
		void function (PurpleXfer*) cancel_send;
		void function (PurpleXfer*) cancel_recv;
		gssize function (guchar**, PurpleXfer*) read;
		gssize function (const(guchar)*, size_t, PurpleXfer*) write;
		void function (PurpleXfer*, const(guchar)*, size_t) ack;
	}
	PurpleXferUiOps* ui_ops;
	void* ui_data;
	void* data;
}

extern( C ) nothrow 
{
    alias da_purple_xfer_new = PurpleXfer* function(PurpleAccount* account, PurpleXferType type, const(char)* who);							
    alias da_purple_xfers_get_all = GList* function();																						
    alias da_purple_xfer_ref = void function(PurpleXfer* xfer);																				
    alias da_purple_xfer_unref = void function(PurpleXfer* xfer);																			
    alias da_purple_xfer_request = void function(PurpleXfer* xfer);																			
    alias da_purple_xfer_request_accepted = void function(PurpleXfer* xfer, const(char)* filename);											
    alias da_purple_xfer_request_denied = void function(PurpleXfer* xfer);																	
    alias da_purple_xfer_get_type = PurpleXferType function(const(PurpleXfer)* xfer);														
    alias da_purple_xfer_get_account = PurpleAccount* function(const(PurpleXfer)* xfer);													
    alias da_purple_xfer_get_remote_user = const(char)* function(const(PurpleXfer)* xfer);													
    alias da_purple_xfer_get_status = PurpleXferStatusType function(const(PurpleXfer)* xfer);												
    alias da_purple_xfer_is_canceled = gboolean function(const(PurpleXfer)* xfer);															
    alias da_purple_xfer_is_completed = gboolean function(const(PurpleXfer)* xfer);															
    alias da_purple_xfer_get_filename = const(char)* function(const(PurpleXfer)* xfer);														
    alias da_purple_xfer_get_local_filename = const(char)* function(const(PurpleXfer)* xfer);												
    alias da_purple_xfer_get_bytes_sent = size_t function(const(PurpleXfer)* xfer);															
    alias da_purple_xfer_get_bytes_remaining = size_t function(const(PurpleXfer)* xfer);													
    alias da_purple_xfer_get_size = size_t function(const(PurpleXfer)* xfer);																
    alias da_purple_xfer_get_progress = double function(const(PurpleXfer)* xfer);															
    alias da_purple_xfer_get_local_port = uint function(const(PurpleXfer)* xfer);															
    alias da_purple_xfer_get_remote_ip = const(char)* function(const(PurpleXfer)* xfer);													
    alias da_purple_xfer_get_remote_port = uint function(const(PurpleXfer)* xfer);															
    alias da_purple_xfer_get_start_time = time_t function(const(PurpleXfer)* xfer);															
    alias da_purple_xfer_get_end_time = time_t function(const(PurpleXfer)* xfer);															
    alias da_purple_xfer_set_completed = void function(PurpleXfer* xfer, gboolean completed);												
    alias da_purple_xfer_set_message = void function(PurpleXfer* xfer, const(char)* message);												
    alias da_purple_xfer_set_filename = void function(PurpleXfer* xfer, const(char)* filename);												
    alias da_purple_xfer_set_local_filename = void function(PurpleXfer* xfer, const(char)* filename);										
    alias da_purple_xfer_set_size = void function(PurpleXfer* xfer, size_t size);															
    alias da_purple_xfer_set_bytes_sent = void function(PurpleXfer* xfer, size_t bytes_sent);												
    alias da_purple_xfer_get_ui_ops = PurpleXferUiOps* function(const(PurpleXfer)* xfer);													
    alias da_purple_xfer_set_read_fnc = void function(PurpleXfer* xfer, gssize function (guchar**, PurpleXfer*) fnc);						
    alias da_purple_xfer_set_write_fnc = void function(PurpleXfer* xfer, gssize function (const(guchar)*, size_t, PurpleXfer*) fnc);		
    alias da_purple_xfer_set_ack_fnc = void function(PurpleXfer* xfer, void function (PurpleXfer*, const(guchar)*, size_t) fnc);			
    alias da_purple_xfer_set_request_denied_fnc = void function(PurpleXfer* xfer, void function (PurpleXfer*) fnc);							
    alias da_purple_xfer_set_init_fnc = void function(PurpleXfer* xfer, void function (PurpleXfer*) fnc);									
    alias da_purple_xfer_set_start_fnc = void function(PurpleXfer* xfer, void function (PurpleXfer*) fnc);									
    alias da_purple_xfer_set_end_fnc = void function(PurpleXfer* xfer, void function (PurpleXfer*) fnc);									
    alias da_purple_xfer_set_cancel_send_fnc = void function(PurpleXfer* xfer, void function (PurpleXfer*) fnc);							
    alias da_purple_xfer_set_cancel_recv_fnc = void function(PurpleXfer* xfer, void function (PurpleXfer*) fnc);							
    alias da_purple_xfer_read = gssize function(PurpleXfer* xfer, guchar** buffer);															
    alias da_purple_xfer_write = gssize function(PurpleXfer* xfer, const(guchar)* buffer, gsize size);										
    alias da_purple_xfer_start = void function(PurpleXfer* xfer, int fd, const(char)* ip, uint port);										
    alias da_purple_xfer_end = void function(PurpleXfer* xfer);																				
    alias da_purple_xfer_add = void function(PurpleXfer* xfer);																				
    alias da_purple_xfer_cancel_local = void function(PurpleXfer* xfer);																	
    alias da_purple_xfer_cancel_remote = void function(PurpleXfer* xfer);																	
    alias da_purple_xfer_error = void function(PurpleXferType type, PurpleAccount* account, const(char)* who, const(char)* msg);			
    alias da_purple_xfer_update_progress = void function(PurpleXfer* xfer);																	
    alias da_purple_xfer_conversation_write = void function(PurpleXfer* xfer, char* message, gboolean is_error);							
    alias da_purple_xfer_ui_ready = void function(PurpleXfer* xfer);																		
    alias da_purple_xfer_prpl_ready = void function(PurpleXfer* xfer);																		
    alias da_purple_xfer_get_thumbnail = gconstpointer function(const(PurpleXfer)* xfer, gsize* len);										
    alias da_purple_xfer_get_thumbnail_mimetype = const(gchar)* function(const(PurpleXfer)* xfer);											
    alias da_purple_xfer_set_thumbnail = void function(PurpleXfer* xfer, gconstpointer thumbnail, gsize size, const(gchar)* mimetype);		
    alias da_purple_xfer_prepare_thumbnail = void function(PurpleXfer* xfer, const(gchar)* formats);										
    alias da_purple_xfers_get_handle = void* function();																					
    alias da_purple_xfers_init = void function();																							
    alias da_purple_xfers_uninit = void function();																							
    alias da_purple_xfers_set_ui_ops = void function(PurpleXferUiOps* ops);																	
    alias da_purple_xfers_get_ui_ops = PurpleXferUiOps* function();		
}

__gshared
{
	da_purple_xfer_new purple_xfer_new;
	da_purple_xfers_get_all purple_xfers_get_all;
	da_purple_xfer_ref purple_xfer_ref;
	da_purple_xfer_unref purple_xfer_unref;
	da_purple_xfer_request purple_xfer_request;
	da_purple_xfer_request_accepted purple_xfer_request_accepted;
	da_purple_xfer_request_denied purple_xfer_request_denied;
	da_purple_xfer_get_type purple_xfer_get_type;
	da_purple_xfer_get_account purple_xfer_get_account;
	da_purple_xfer_get_remote_user purple_xfer_get_remote_user;
	da_purple_xfer_get_status purple_xfer_get_status;
	da_purple_xfer_is_canceled purple_xfer_is_canceled;
	da_purple_xfer_is_completed purple_xfer_is_completed;
	da_purple_xfer_get_filename purple_xfer_get_filename;
	da_purple_xfer_get_local_filename purple_xfer_get_local_filename;
	da_purple_xfer_get_bytes_sent purple_xfer_get_bytes_sent;
	da_purple_xfer_get_bytes_remaining purple_xfer_get_bytes_remaining;
	da_purple_xfer_get_size purple_xfer_get_size;
	da_purple_xfer_get_progress purple_xfer_get_progress;
	da_purple_xfer_get_local_port purple_xfer_get_local_port;
	da_purple_xfer_get_remote_ip purple_xfer_get_remote_ip;
	da_purple_xfer_get_remote_port purple_xfer_get_remote_port;
	da_purple_xfer_get_start_time purple_xfer_get_start_time;
	da_purple_xfer_get_end_time purple_xfer_get_end_time;
	da_purple_xfer_set_completed purple_xfer_set_completed;
	da_purple_xfer_set_message purple_xfer_set_message;
	da_purple_xfer_set_filename purple_xfer_set_filename;
	da_purple_xfer_set_local_filename purple_xfer_set_local_filename;
	da_purple_xfer_set_size purple_xfer_set_size;
	da_purple_xfer_set_bytes_sent purple_xfer_set_bytes_sent;
	da_purple_xfer_get_ui_ops purple_xfer_get_ui_ops;
	da_purple_xfer_set_read_fnc purple_xfer_set_read_fnc;
	da_purple_xfer_set_write_fnc purple_xfer_set_write_fnc;
	da_purple_xfer_set_ack_fnc purple_xfer_set_ack_fnc;
	da_purple_xfer_set_request_denied_fnc purple_xfer_set_request_denied_fnc;
	da_purple_xfer_set_init_fnc purple_xfer_set_init_fnc;
	da_purple_xfer_set_start_fnc purple_xfer_set_start_fnc;
	da_purple_xfer_set_end_fnc purple_xfer_set_end_fnc;
	da_purple_xfer_set_cancel_send_fnc purple_xfer_set_cancel_send_fnc;
	da_purple_xfer_set_cancel_recv_fnc purple_xfer_set_cancel_recv_fnc;
	da_purple_xfer_read purple_xfer_read;
	da_purple_xfer_write purple_xfer_write;
	da_purple_xfer_start purple_xfer_start;
	da_purple_xfer_end purple_xfer_end;
	da_purple_xfer_add purple_xfer_add;
	da_purple_xfer_cancel_local purple_xfer_cancel_local;
	da_purple_xfer_cancel_remote purple_xfer_cancel_remote;
	da_purple_xfer_error purple_xfer_error;
	da_purple_xfer_update_progress purple_xfer_update_progress;
	da_purple_xfer_conversation_write purple_xfer_conversation_write;
	da_purple_xfer_ui_ready purple_xfer_ui_ready;
	da_purple_xfer_prpl_ready purple_xfer_prpl_ready;
	da_purple_xfer_get_thumbnail purple_xfer_get_thumbnail;
	da_purple_xfer_get_thumbnail_mimetype purple_xfer_get_thumbnail_mimetype;
	da_purple_xfer_set_thumbnail purple_xfer_set_thumbnail;
	da_purple_xfer_prepare_thumbnail purple_xfer_prepare_thumbnail;
	da_purple_xfers_get_handle purple_xfers_get_handle;
	da_purple_xfers_init purple_xfers_init;
	da_purple_xfers_uninit purple_xfers_uninit;
	da_purple_xfers_set_ui_ops purple_xfers_set_ui_ops;
	da_purple_xfers_get_ui_ops purple_xfers_get_ui_ops;	
}