/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.sslconn;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;
import derelict.purple.account;
import derelict.purple.proxy;
import derelict.purple.certificate;

extern (C):

alias _Anonymous_0 PurpleSslErrorType;
alias _PurpleSslConnection PurpleSslConnection;
alias void function (void*, _PurpleSslConnection*, ) PurpleSslInputFunction;
alias void function (_PurpleSslConnection*, _Anonymous_0, void*) PurpleSslErrorFunction;
alias _Anonymous_1 PurpleSslOps;

enum _Anonymous_0
{
	PURPLE_SSL_HANDSHAKE_FAILED = 1,
	PURPLE_SSL_CONNECT_FAILED = 2,
	PURPLE_SSL_CERTIFICATE_INVALID = 3
}

struct _PurpleSslConnection
{
	char* host;
	int port;
	void* connect_cb_data;
	PurpleSslInputFunction connect_cb;
	PurpleSslErrorFunction error_cb;
	void* recv_cb_data;
	PurpleSslInputFunction recv_cb;
	int fd;
	guint inpa;
	PurpleProxyConnectData* connect_data;
	void* private_data;
	PurpleCertificateVerifier* verifier;
}

struct _Anonymous_1
{
	gboolean function () init;
	void function () uninit;
	void function (PurpleSslConnection*) connectfunc;
	void function (PurpleSslConnection*) close;
	size_t function (PurpleSslConnection*, void*, size_t) read;
	size_t function (PurpleSslConnection*, const(void)*, size_t) write;
	GList* function (PurpleSslConnection*) get_peer_certificates;
	void function () _purple_reserved2;
	void function () _purple_reserved3;
	void function () _purple_reserved4;
}

extern( C ) nothrow 
{
	alias da_purple_ssl_is_supported = gboolean function();																																												
    alias da_purple_ssl_strerror = const(gchar)* function(PurpleSslErrorType error);																																					
    alias da_purple_ssl_connect = PurpleSslConnection* function(PurpleAccount* account, const(char)* host, int port, PurpleSslInputFunction func, PurpleSslErrorFunction error_func, void* data);										
    alias da_purple_ssl_connect_with_ssl_cn = PurpleSslConnection* function(PurpleAccount* account, const(char)* host, int port, PurpleSslInputFunction func, PurpleSslErrorFunction error_func, const(char)* ssl_host, void* data);	
    alias da_purple_ssl_connect_fd = PurpleSslConnection* function(PurpleAccount* account, int fd, PurpleSslInputFunction func, PurpleSslErrorFunction error_func, void* data);															
    alias da_purple_ssl_connect_with_host_fd = PurpleSslConnection* function(PurpleAccount* account, int fd, PurpleSslInputFunction func, PurpleSslErrorFunction error_func, const(char)* host, void* data);							
    alias da_purple_ssl_input_add = void function(PurpleSslConnection* gsc, PurpleSslInputFunction func, void* data);																													
    alias da_purple_ssl_close = void function(PurpleSslConnection* gsc);																																								
    alias da_purple_ssl_read = size_t function(PurpleSslConnection* gsc, void* buffer, size_t len);																																		
    alias da_purple_ssl_write = size_t function(PurpleSslConnection* gsc, const(void)* buffer, size_t len);																																
    alias da_purple_ssl_get_peer_certificates = GList* function(PurpleSslConnection* gsc);																																				
    alias da_purple_ssl_set_ops = void function(PurpleSslOps* ops);																																										
    alias da_purple_ssl_get_ops = PurpleSslOps* function();																																												
    alias da_purple_ssl_init = void function();																																															
    alias da_purple_ssl_uninit = void function();
}

__gshared
{
	da_purple_ssl_is_supported purple_ssl_is_supported;
	da_purple_ssl_strerror purple_ssl_strerror;
	da_purple_ssl_connect purple_ssl_connect;
	da_purple_ssl_connect_with_ssl_cn purple_ssl_connect_with_ssl_cn;
	da_purple_ssl_connect_fd purple_ssl_connect_fd;
	da_purple_ssl_connect_with_host_fd purple_ssl_connect_with_host_fd;
	da_purple_ssl_input_add purple_ssl_input_add;
	da_purple_ssl_close purple_ssl_close;
	da_purple_ssl_read purple_ssl_read;
	da_purple_ssl_write purple_ssl_write;
	da_purple_ssl_get_peer_certificates purple_ssl_get_peer_certificates;
	da_purple_ssl_set_ops purple_ssl_set_ops;
	da_purple_ssl_get_ops purple_ssl_get_ops;
	da_purple_ssl_init purple_ssl_init;
	da_purple_ssl_uninit purple_ssl_uninit;
}