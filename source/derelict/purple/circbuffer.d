/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.circbuffer;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import core.stdc.config;

extern (C):

alias _PurpleCircBuffer PurpleCircBuffer;

struct _PurpleCircBuffer
{
	gchar* buffer;
	gsize growsize;
	gsize buflen;
	gsize bufused;
	gchar* inptr;
	gchar* outptr;
}


extern( C ) nothrow 
{
    alias da_purple_circ_buffer_new = PurpleCircBuffer* function(gsize growsize);								
    alias da_purple_circ_buffer_destroy = void function(PurpleCircBuffer* buf);									
    alias da_purple_circ_buffer_append = void function(PurpleCircBuffer* buf, gconstpointer src, gsize len);	
    alias da_purple_circ_buffer_get_max_read = gsize function(const(PurpleCircBuffer)* buf);					
    alias da_purple_circ_buffer_mark_read = gboolean function(PurpleCircBuffer* buf, gsize len);		
}

__gshared
{
	da_purple_circ_buffer_new purple_circ_buffer_new;
	da_purple_circ_buffer_destroy purple_circ_buffer_destroy;
	da_purple_circ_buffer_append purple_circ_buffer_append;
	da_purple_circ_buffer_get_max_read purple_circ_buffer_get_max_read;
	da_purple_circ_buffer_mark_read purple_circ_buffer_mark_read;
}