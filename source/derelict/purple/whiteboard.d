/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.whiteboard;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;
import derelict.purple.account;
extern (C):

alias _PurpleWhiteboardPrplOps PurpleWhiteboardPrplOps;
alias _PurpleWhiteboard PurpleWhiteboard;
alias _PurpleWhiteboardUiOps PurpleWhiteboardUiOps;

struct _PurpleWhiteboard
{
	int state;
	PurpleAccount* account;
	char* who;
	void* ui_data;
	void* proto_data;
	PurpleWhiteboardPrplOps* prpl_ops;
	GList* draw_list;
}

struct _PurpleWhiteboardUiOps
{
	void function (PurpleWhiteboard*) create;
	void function (PurpleWhiteboard*) destroy;
	void function (PurpleWhiteboard*, int, int) set_dimensions;
	void function (PurpleWhiteboard*, int, int) set_brush;
	void function (PurpleWhiteboard*, int, int, int, int) draw_point;
	void function (PurpleWhiteboard*, int, int, int, int, int, int) draw_line;
	void function (PurpleWhiteboard*) clear;
	void function () _purple_reserved1;
	void function () _purple_reserved2;
	void function () _purple_reserved3;
	void function () _purple_reserved4;
}

struct _PurpleWhiteboardPrplOps
{
	void function (PurpleWhiteboard*) start;
	void function (PurpleWhiteboard*) end;
	void function (const(PurpleWhiteboard)*, int*, int*) get_dimensions;
	void function (PurpleWhiteboard*, int, int) set_dimensions;
	void function (const(PurpleWhiteboard)*, int*, int*) get_brush;
	void function (PurpleWhiteboard*, int, int) set_brush;
	void function (PurpleWhiteboard*, GList*) send_draw_list;
	void function (PurpleWhiteboard*) clear;
	void function () _purple_reserved1;
	void function () _purple_reserved2;
	void function () _purple_reserved3;
	void function () _purple_reserved4;
}


extern( C ) nothrow 
{
	alias da_purple_whiteboard_set_ui_ops = void function(PurpleWhiteboardUiOps* ops);													
    alias da_purple_whiteboard_set_prpl_ops = void function(PurpleWhiteboard* wb, PurpleWhiteboardPrplOps* ops);						
    alias da_purple_whiteboard_create = PurpleWhiteboard* function(PurpleAccount* account, const(char)* who, int state);				
    alias da_purple_whiteboard_destroy = void function(PurpleWhiteboard* wb);															
    alias da_purple_whiteboard_start = void function(PurpleWhiteboard* wb);																
    alias da_purple_whiteboard_get_session = PurpleWhiteboard* function(const(PurpleAccount)* account, const(char)* who);				
    alias da_purple_whiteboard_draw_list_destroy = void function(GList* draw_list);														
    alias da_purple_whiteboard_get_dimensions = gboolean function(const(PurpleWhiteboard)* wb, int* width, int* height);				
    alias da_purple_whiteboard_set_dimensions = void function(PurpleWhiteboard* wb, int width, int height);								
    alias da_purple_whiteboard_draw_point = void function(PurpleWhiteboard* wb, int x, int y, int color, int size);						
    alias da_purple_whiteboard_send_draw_list = void function(PurpleWhiteboard* wb, GList* list);										
    alias da_purple_whiteboard_draw_line = void function(PurpleWhiteboard* wb, int x1, int y1, int x2, int y2, int color, int size);	
    alias da_purple_whiteboard_clear = void function(PurpleWhiteboard* wb);																
    alias da_purple_whiteboard_send_clear = void function(PurpleWhiteboard* wb);														
    alias da_purple_whiteboard_send_brush = void function(PurpleWhiteboard* wb, int size, int color);									
    alias da_purple_whiteboard_get_brush = gboolean function(const(PurpleWhiteboard)* wb, int* size, int* color);						
    alias da_purple_whiteboard_set_brush = void function(PurpleWhiteboard* wb, int size, int color);	
}

__gshared
{
	da_purple_whiteboard_set_ui_ops purple_whiteboard_set_ui_ops;
	da_purple_whiteboard_set_prpl_ops purple_whiteboard_set_prpl_ops;
	da_purple_whiteboard_create purple_whiteboard_create;
	da_purple_whiteboard_destroy purple_whiteboard_destroy;
	da_purple_whiteboard_start purple_whiteboard_start;
	da_purple_whiteboard_get_session purple_whiteboard_get_session;
	da_purple_whiteboard_draw_list_destroy purple_whiteboard_draw_list_destroy;
	da_purple_whiteboard_get_dimensions purple_whiteboard_get_dimensions;
	da_purple_whiteboard_set_dimensions purple_whiteboard_set_dimensions;
	da_purple_whiteboard_draw_point purple_whiteboard_draw_point;
	da_purple_whiteboard_send_draw_list purple_whiteboard_send_draw_list;
	da_purple_whiteboard_draw_line purple_whiteboard_draw_line;
	da_purple_whiteboard_clear purple_whiteboard_clear;
	da_purple_whiteboard_send_clear purple_whiteboard_send_clear;
	da_purple_whiteboard_send_brush purple_whiteboard_send_brush;
	da_purple_whiteboard_get_brush purple_whiteboard_get_brush;
	da_purple_whiteboard_set_brush purple_whiteboard_set_brush;
}