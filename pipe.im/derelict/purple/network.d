/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.network;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;

extern (C):

alias _PurpleNetworkListenData PurpleNetworkListenData;
alias void function (int, void*) PurpleNetworkListenCallback;

struct _PurpleNetworkListenData;


extern( C ) nothrow 
{
	alias da_purple_network_ip_atoi = const(ubyte)* function(const(char)* ip);																																
    alias da_purple_network_set_public_ip = void function(const(char)* ip);																																	
    alias da_purple_network_get_public_ip = const(char)* function();																																		
    alias da_purple_network_get_local_system_ip = const(char)* function(int fd);																															
    alias da_purple_network_get_all_local_system_ips = GList* function();																																	
    alias da_purple_network_get_my_ip = const(char)* function(int fd);																																		
    alias da_purple_network_listen_map_external = void function(gboolean map_external);																														
    alias da_purple_network_listen = PurpleNetworkListenData* function(ushort port, int socket_type, PurpleNetworkListenCallback cb, gpointer cb_data);														
    alias da_purple_network_listen_family = PurpleNetworkListenData* function(ushort port, int socket_family, int socket_type, PurpleNetworkListenCallback cb, gpointer cb_data);							
    alias da_purple_network_listen_range = PurpleNetworkListenData* function(ushort start, ushort end, int socket_type, PurpleNetworkListenCallback cb, gpointer cb_data);									
    alias da_purple_network_listen_range_family = PurpleNetworkListenData* function(ushort start, ushort end, int socket_family, int socket_type, PurpleNetworkListenCallback cb, gpointer cb_data);		
    alias da_purple_network_listen_cancel = void function(PurpleNetworkListenData* listen_data);																											
    alias da_purple_network_get_port_from_fd = ushort function(int fd);																																		
    alias da_purple_network_is_available = gboolean function();																																				
    alias da_purple_network_force_online = void function();																																					
    alias da_purple_network_get_handle = void* function();																																					
    alias da_purple_network_set_stun_server = void function(const(gchar)* stun_server);																														
    alias da_purple_network_get_stun_ip = const(gchar)* function();																																			
    alias da_purple_network_set_turn_server = void function(const(gchar)* turn_server);																														
    alias da_purple_network_get_turn_ip = const(gchar)* function();																																			
    alias da_purple_network_remove_port_mapping = void function(gint fd);																																	
    alias da_purple_network_convert_idn_to_ascii = int function(const(gchar)* in_, gchar** out_);																											
    alias da_purple_network_init = void function();																																							
    alias da_purple_network_uninit = void function();	
}

__gshared
{
	da_purple_network_ip_atoi purple_network_ip_atoi;
	da_purple_network_set_public_ip purple_network_set_public_ip;
	da_purple_network_get_public_ip purple_network_get_public_ip;
	da_purple_network_get_local_system_ip purple_network_get_local_system_ip;
	da_purple_network_get_all_local_system_ips purple_network_get_all_local_system_ips;
	da_purple_network_get_my_ip purple_network_get_my_ip;
	da_purple_network_listen_map_external purple_network_listen_map_external;
	da_purple_network_listen purple_network_listen;
	da_purple_network_listen_family purple_network_listen_family;
	da_purple_network_listen_range purple_network_listen_range;
	da_purple_network_listen_range_family purple_network_listen_range_family;
	da_purple_network_listen_cancel purple_network_listen_cancel;
	da_purple_network_get_port_from_fd purple_network_get_port_from_fd;
	da_purple_network_is_available purple_network_is_available;
	da_purple_network_force_online purple_network_force_online;
	da_purple_network_get_handle purple_network_get_handle;
	da_purple_network_set_stun_server purple_network_set_stun_server;
	da_purple_network_get_stun_ip purple_network_get_stun_ip;
	da_purple_network_set_turn_server purple_network_set_turn_server;
	da_purple_network_get_turn_ip purple_network_get_turn_ip;
	da_purple_network_remove_port_mapping purple_network_remove_port_mapping;
	da_purple_network_convert_idn_to_ascii purple_network_convert_idn_to_ascii;
	da_purple_network_init purple_network_init;
	da_purple_network_uninit purple_network_uninit;
}