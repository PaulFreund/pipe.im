/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.cipher;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;

extern (C):

alias _PurpleCipher PurpleCipher;
alias _PurpleCipherOps PurpleCipherOps;
alias _PurpleCipherContext PurpleCipherContext;
alias _PurpleCipherBatchMode PurpleCipherBatchMode;
alias _PurpleCipherCaps PurpleCipherCaps;

enum _PurpleCipherBatchMode
{
	PURPLE_CIPHER_BATCH_MODE_ECB = 0,
	PURPLE_CIPHER_BATCH_MODE_CBC = 1
}

enum _PurpleCipherCaps
{
	PURPLE_CIPHER_CAPS_SET_OPT = 2,
	PURPLE_CIPHER_CAPS_GET_OPT = 4,
	PURPLE_CIPHER_CAPS_INIT = 8,
	PURPLE_CIPHER_CAPS_RESET = 16,
	PURPLE_CIPHER_CAPS_UNINIT = 32,
	PURPLE_CIPHER_CAPS_SET_IV = 64,
	PURPLE_CIPHER_CAPS_APPEND = 128,
	PURPLE_CIPHER_CAPS_DIGEST = 256,
	PURPLE_CIPHER_CAPS_ENCRYPT = 512,
	PURPLE_CIPHER_CAPS_DECRYPT = 1024,
	PURPLE_CIPHER_CAPS_SET_SALT = 2048,
	PURPLE_CIPHER_CAPS_GET_SALT_SIZE = 4096,
	PURPLE_CIPHER_CAPS_SET_KEY = 8192,
	PURPLE_CIPHER_CAPS_GET_KEY_SIZE = 16384,
	PURPLE_CIPHER_CAPS_SET_BATCH_MODE = 32768,
	PURPLE_CIPHER_CAPS_GET_BATCH_MODE = 65536,
	PURPLE_CIPHER_CAPS_GET_BLOCK_SIZE = 131072,
	PURPLE_CIPHER_CAPS_SET_KEY_WITH_LEN = 262144,
	PURPLE_CIPHER_CAPS_UNKNOWN = 524288
}

struct _PurpleCipherOps
{
	void function (PurpleCipherContext*, const(gchar)*, void*) set_option;
	void* function (PurpleCipherContext*, const(gchar)*) get_option;
	void function (PurpleCipherContext*, void*) init;
	void function (PurpleCipherContext*, void*) reset;
	void function (PurpleCipherContext*) uninit;
	void function (PurpleCipherContext*, guchar*, size_t) set_iv;
	void function (PurpleCipherContext*, const(guchar)*, size_t) append;
	gboolean function (PurpleCipherContext*, size_t, guchar*, size_t*) digest;
	int function (PurpleCipherContext*, const(guchar)*, size_t, guchar*, size_t*) encrypt;
	int function (PurpleCipherContext*, const(guchar)*, size_t, guchar*, size_t*) decrypt;
	void function (PurpleCipherContext*, guchar*) set_salt;
	size_t function (PurpleCipherContext*) get_salt_size;
	void function (PurpleCipherContext*, const(guchar)*) set_key;
	size_t function (PurpleCipherContext*) get_key_size;
	void function (PurpleCipherContext*, PurpleCipherBatchMode) set_batch_mode;
	PurpleCipherBatchMode function (PurpleCipherContext*) get_batch_mode;
	size_t function (PurpleCipherContext*) get_block_size;
	void function (PurpleCipherContext*, const(guchar)*, size_t) set_key_with_len;
}

struct _PurpleCipherContext;


struct _PurpleCipher;

extern( C ) nothrow 
{
    alias da_purple_cipher_get_name = const(gchar)* function(PurpleCipher* cipher);																																														                                
    alias da_purple_cipher_get_capabilities = guint function(PurpleCipher* cipher);																																														                                
    alias da_purple_cipher_digest_region = gboolean function(const(gchar)* name, const(guchar)* data, size_t data_len, size_t in_len, guchar* digest, size_t* out_len);																									                                
    alias da_purple_ciphers_find_cipher = PurpleCipher* function(const(gchar)* name);																																													                                
    alias da_purple_ciphers_register_cipher = PurpleCipher* function(const(gchar)* name, PurpleCipherOps* ops);																																							                                
    alias da_purple_ciphers_unregister_cipher = gboolean function(PurpleCipher* cipher);																																												                                
    alias da_purple_ciphers_get_ciphers = GList* function();																																																			                                
    alias da_purple_ciphers_get_handle = gpointer function();																																																			                                
    alias da_purple_ciphers_init = void function();																																																						                                
    alias da_purple_ciphers_uninit = void function();																																																					                                
    alias da_purple_cipher_context_set_option = void function(PurpleCipherContext* context, const(gchar)* name, gpointer value);																																		                                
    alias da_purple_cipher_context_get_option = gpointer function(PurpleCipherContext* context, const(gchar)* name);																																					                                
    alias da_purple_cipher_context_new = PurpleCipherContext* function(PurpleCipher* cipher, void* extra);																																								                                
    alias da_purple_cipher_context_new_by_name = PurpleCipherContext* function(const(gchar)* name, void* extra);																																						                                
    alias da_purple_cipher_context_reset = void function(PurpleCipherContext* context, gpointer extra);																																									                                
    alias da_purple_cipher_context_destroy = void function(PurpleCipherContext* context);																																												                                
    alias da_purple_cipher_context_set_iv = void function(PurpleCipherContext* context, guchar* iv, size_t len);																																						                                
    alias da_purple_cipher_context_append = void function(PurpleCipherContext* context, const(guchar)* data, size_t len);																																				                                
    alias da_purple_cipher_context_digest = gboolean function(PurpleCipherContext* context, size_t in_len, guchar* digest, size_t* out_len);																															                                
    alias da_purple_cipher_context_digest_to_str = gboolean function(PurpleCipherContext* context, size_t in_len, gchar* digest_s, size_t* out_len);																													                                
    alias da_purple_cipher_context_encrypt = gint function(PurpleCipherContext* context, const(guchar)* data, size_t len, guchar* output, size_t* outlen);																												                                
    alias da_purple_cipher_context_decrypt = gint function(PurpleCipherContext* context, const(guchar)* data, size_t len, guchar* output, size_t* outlen);																												                                
    alias da_purple_cipher_context_set_salt = void function(PurpleCipherContext* context, guchar* salt);																																								                                
    alias da_purple_cipher_context_get_salt_size = size_t function(PurpleCipherContext* context);																																										                                
    alias da_purple_cipher_context_set_key = void function(PurpleCipherContext* context, const(guchar)* key);																																							                                
    alias da_purple_cipher_context_get_key_size = size_t function(PurpleCipherContext* context);																																										                                
    alias da_purple_cipher_context_set_batch_mode = void function(PurpleCipherContext* context, PurpleCipherBatchMode mode);																																			                                
    alias da_purple_cipher_context_get_batch_mode = PurpleCipherBatchMode function(PurpleCipherContext* context);																																						                                
    alias da_purple_cipher_context_get_block_size = size_t function(PurpleCipherContext* context);																																										                                
    alias da_purple_cipher_context_set_key_with_len = void function(PurpleCipherContext* context, const(guchar)* key, size_t len);																																		                                
    alias da_purple_cipher_context_set_data = void function(PurpleCipherContext* context, gpointer data);																																								                                
    alias da_purple_cipher_context_get_data = gpointer function(PurpleCipherContext* context);																																											                                
    alias da_purple_cipher_http_digest_calculate_session_key = gchar* function(const(gchar)* algorithm, const(gchar)* username, const(gchar)* realm, const(gchar)* password, const(gchar)* nonce, const(gchar)* client_nonce);											                                
    alias da_purple_cipher_http_digest_calculate_response = gchar* function(const(gchar)* algorithm, const(gchar)* method, const(gchar)* digest_uri, const(gchar)* qop, const(gchar)* entity, const(gchar)* nonce, const(gchar)* nonce_count, const(gchar)* client_nonce, const(gchar)* session_key);		
}

__gshared
{
	da_purple_cipher_get_name purple_cipher_get_name;
	da_purple_cipher_get_capabilities purple_cipher_get_capabilities;
	da_purple_cipher_digest_region purple_cipher_digest_region;
	da_purple_ciphers_find_cipher purple_ciphers_find_cipher;
	da_purple_ciphers_register_cipher purple_ciphers_register_cipher;
	da_purple_ciphers_unregister_cipher purple_ciphers_unregister_cipher;
	da_purple_ciphers_get_ciphers purple_ciphers_get_ciphers;
	da_purple_ciphers_get_handle purple_ciphers_get_handle;
	da_purple_ciphers_init purple_ciphers_init;
	da_purple_ciphers_uninit purple_ciphers_uninit;
	da_purple_cipher_context_set_option purple_cipher_context_set_option;
	da_purple_cipher_context_get_option purple_cipher_context_get_option;
	da_purple_cipher_context_new purple_cipher_context_new;
	da_purple_cipher_context_new_by_name purple_cipher_context_new_by_name;
	da_purple_cipher_context_reset purple_cipher_context_reset;
	da_purple_cipher_context_destroy purple_cipher_context_destroy;
	da_purple_cipher_context_set_iv purple_cipher_context_set_iv;
	da_purple_cipher_context_append purple_cipher_context_append;
	da_purple_cipher_context_digest purple_cipher_context_digest;
	da_purple_cipher_context_digest_to_str purple_cipher_context_digest_to_str;
	da_purple_cipher_context_encrypt purple_cipher_context_encrypt;
	da_purple_cipher_context_decrypt purple_cipher_context_decrypt;
	da_purple_cipher_context_set_salt purple_cipher_context_set_salt;
	da_purple_cipher_context_get_salt_size purple_cipher_context_get_salt_size;
	da_purple_cipher_context_set_key purple_cipher_context_set_key;
	da_purple_cipher_context_get_key_size purple_cipher_context_get_key_size;
	da_purple_cipher_context_set_batch_mode purple_cipher_context_set_batch_mode;
	da_purple_cipher_context_get_batch_mode purple_cipher_context_get_batch_mode;
	da_purple_cipher_context_get_block_size purple_cipher_context_get_block_size;
	da_purple_cipher_context_set_key_with_len purple_cipher_context_set_key_with_len;
	da_purple_cipher_context_set_data purple_cipher_context_set_data;
	da_purple_cipher_context_get_data purple_cipher_context_get_data;
	da_purple_cipher_http_digest_calculate_session_key purple_cipher_http_digest_calculate_session_key;
	da_purple_cipher_http_digest_calculate_response purple_cipher_http_digest_calculate_response;
}