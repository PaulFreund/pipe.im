/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.dnssrv;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;
import derelict.purple.account;

extern (C):

alias _PurpleSrvTxtQueryData PurpleSrvTxtQueryData;
alias _PurpleSrvResponse PurpleSrvResponse;
alias _PurpleTxtResponse PurpleTxtResponse;
alias _PurpleSrvTxtQueryData PurpleSrvQueryData;
alias void function (_PurpleSrvTxtQueryData*, _GList*) PurpleSrvTxtQueryResolvedCallback;
alias void function (_PurpleSrvTxtQueryData*, const(char)*) PurpleSrvTxtQueryFailedCallback;
alias _Anonymous_0 PurpleSrvTxtQueryUiOps;
alias void function (_PurpleSrvResponse*, int, void*) PurpleSrvCallback;
alias void function (_GList*, void*) PurpleTxtCallback;

enum PurpleDnsType
{
	PurpleDnsTypeTxt = 16,
	PurpleDnsTypeSrv = 33
}

struct _PurpleSrvResponse
{
	char[256] hostname;
	int port;
	int weight;
	int pref;
}

struct _PurpleTxtResponse
{
	char* content;
}

struct _Anonymous_0
{
	gboolean function (PurpleSrvTxtQueryData*, PurpleSrvTxtQueryResolvedCallback, PurpleSrvTxtQueryFailedCallback) resolve;
	void function (PurpleSrvTxtQueryData*) destroy;
	void function () _purple_reserved1;
	void function () _purple_reserved2;
	void function () _purple_reserved3;
	void function () _purple_reserved4;
}

struct _PurpleSrvTxtQueryData;
																													

extern( C ) nothrow 
{
	alias da_purple_srv_resolve_account = PurpleSrvTxtQueryData* function(PurpleAccount* account, const(char)* protocol, const(char)* transport, const(char)* domain, PurpleSrvCallback cb, gpointer extradata);		
    alias da_purple_srv_resolve = PurpleSrvTxtQueryData* function(const(char)* protocol, const(char)* transport, const(char)* domain, PurpleSrvCallback cb, gpointer extradata);										
    alias da_purple_srv_cancel = void function(PurpleSrvTxtQueryData* query_data);																																		
    alias da_purple_txt_resolve_account = PurpleSrvTxtQueryData* function(PurpleAccount* account, const(char)* owner, const(char)* domain, PurpleTxtCallback cb, gpointer extradata);									
    alias da_purple_txt_resolve = PurpleSrvTxtQueryData* function(const(char)* owner, const(char)* domain, PurpleTxtCallback cb, gpointer extradata);																	
    alias da_purple_txt_cancel = void function(PurpleSrvTxtQueryData* query_data);																																		
    alias da_purple_txt_response_get_content = const(gchar)* function(PurpleTxtResponse* response);																														
    alias da_purple_txt_response_destroy = void function(PurpleTxtResponse* response);																																	
    alias da_purple_srv_txt_query_destroy = void function(PurpleSrvTxtQueryData* query_data);																															
    alias da_purple_srv_txt_query_set_ui_ops = void function(PurpleSrvTxtQueryUiOps* ops);																																
    alias da_purple_srv_txt_query_get_ui_ops = PurpleSrvTxtQueryUiOps* function();																																		
    alias da_purple_srv_txt_query_get_query = char* function(PurpleSrvTxtQueryData* query_data);																														
    alias da_purple_srv_txt_query_get_type = int function(PurpleSrvTxtQueryData* query_data);	
}

__gshared
{
	da_purple_srv_resolve_account purple_srv_resolve_account;
	da_purple_srv_resolve purple_srv_resolve;
	da_purple_srv_cancel purple_srv_cancel;
	da_purple_txt_resolve_account purple_txt_resolve_account;
	da_purple_txt_resolve purple_txt_resolve;
	da_purple_txt_cancel purple_txt_cancel;
	da_purple_txt_response_get_content purple_txt_response_get_content;
	da_purple_txt_response_destroy purple_txt_response_destroy;
	da_purple_srv_txt_query_destroy purple_srv_txt_query_destroy;
	da_purple_srv_txt_query_set_ui_ops purple_srv_txt_query_set_ui_ops;
	da_purple_srv_txt_query_get_ui_ops purple_srv_txt_query_get_ui_ops;
	da_purple_srv_txt_query_get_query purple_srv_txt_query_get_query;
	da_purple_srv_txt_query_get_type purple_srv_txt_query_get_type;
}