/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.xmlnode;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.ghash;
import core.stdc.config;

extern (C):

alias _XMLNodeType XMLNodeType;
alias _xmlnode xmlnode;

enum _XMLNodeType
{
	XMLNODE_TYPE_TAG = 0,
	XMLNODE_TYPE_ATTRIB = 1,
	XMLNODE_TYPE_DATA = 2
}

struct _xmlnode
{
	char* name;
	char* xmlns;
	XMLNodeType type;
	char* data;
	size_t data_sz;
	xmlnode* parent;
	xmlnode* child;
	xmlnode* lastchild;
	xmlnode* next;
	char* prefix;
	GHashTable* namespace_map;
}


extern( C ) nothrow 
{
    alias da_xmlnode_new = xmlnode* function(const(char)* name);																									
    alias da_xmlnode_new_child = xmlnode* function(xmlnode* parent, const(char)* name);																				
    alias da_xmlnode_insert_child = void function(xmlnode* parent, xmlnode* child);																					
    alias da_xmlnode_get_child = xmlnode* function(const(xmlnode)* parent, const(char)* name);																		
    alias da_xmlnode_get_child_with_namespace = xmlnode* function(const(xmlnode)* parent, const(char)* name, const(char)* xmlns);									
    alias da_xmlnode_get_next_twin = xmlnode* function(xmlnode* node);																								
    alias da_xmlnode_insert_data = void function(xmlnode* node, const(char)* data, gssize size);																	
    alias da_xmlnode_get_data = char* function(const(xmlnode)* node);																								
    alias da_xmlnode_get_data_unescaped = char* function(const(xmlnode)* node);																						
    alias da_xmlnode_set_attrib = void function(xmlnode* node, const(char)* attr, const(char)* value);																
    alias da_xmlnode_set_attrib_with_prefix = void function(xmlnode* node, const(char)* attr, const(char)* prefix, const(char)* value);								
    alias da_xmlnode_set_attrib_with_namespace = void function(xmlnode* node, const(char)* attr, const(char)* xmlns, const(char)* value);							
    alias da_xmlnode_set_attrib_full = void function(xmlnode* node, const(char)* attr, const(char)* xmlns, const(char)* prefix, const(char)* value);				
    alias da_xmlnode_get_attrib = const(char)* function(const(xmlnode)* node, const(char)* attr);																	
    alias da_xmlnode_get_attrib_with_namespace = const(char)* function(const(xmlnode)* node, const(char)* attr, const(char)* xmlns);								
    alias da_xmlnode_remove_attrib = void function(xmlnode* node, const(char)* attr);																				
    alias da_xmlnode_remove_attrib_with_namespace = void function(xmlnode* node, const(char)* attr, const(char)* xmlns);											
    alias da_xmlnode_set_namespace = void function(xmlnode* node, const(char)* xmlns);																				
    alias da_xmlnode_get_namespace = const(char)* function(xmlnode* node);																							
    alias da_xmlnode_set_prefix = void function(xmlnode* node, const(char)* prefix);																				
    alias da_xmlnode_get_prefix = const(char)* function(const(xmlnode)* node);																						
    alias da_xmlnode_get_parent = xmlnode* function(const(xmlnode)* child);																							
    alias da_xmlnode_to_str = char* function(const(xmlnode)* node, int* len);																						
    alias da_xmlnode_to_formatted_str = char* function(const(xmlnode)* node, int* len);																				
    alias da_xmlnode_from_str = xmlnode* function(const(char)* str, gssize size);																					
    alias da_xmlnode_copy = xmlnode* function(const(xmlnode)* src);																									
    alias da_xmlnode_free = void function(xmlnode* node);																											
    alias da_xmlnode_from_file = xmlnode* function(const(char)* dir, const(char)* filename, const(char)* description, const(char)* process);	
}

__gshared
{
	da_xmlnode_new xmlnode_new;
	da_xmlnode_new_child xmlnode_new_child;
	da_xmlnode_insert_child xmlnode_insert_child;
	da_xmlnode_get_child xmlnode_get_child;
	da_xmlnode_get_child_with_namespace xmlnode_get_child_with_namespace;
	da_xmlnode_get_next_twin xmlnode_get_next_twin;
	da_xmlnode_insert_data xmlnode_insert_data;
	da_xmlnode_get_data xmlnode_get_data;
	da_xmlnode_get_data_unescaped xmlnode_get_data_unescaped;
	da_xmlnode_set_attrib xmlnode_set_attrib;
	da_xmlnode_set_attrib_with_prefix xmlnode_set_attrib_with_prefix;
	da_xmlnode_set_attrib_with_namespace xmlnode_set_attrib_with_namespace;
	da_xmlnode_set_attrib_full xmlnode_set_attrib_full;
	da_xmlnode_get_attrib xmlnode_get_attrib;
	da_xmlnode_get_attrib_with_namespace xmlnode_get_attrib_with_namespace;
	da_xmlnode_remove_attrib xmlnode_remove_attrib;
	da_xmlnode_remove_attrib_with_namespace xmlnode_remove_attrib_with_namespace;
	da_xmlnode_set_namespace xmlnode_set_namespace;
	da_xmlnode_get_namespace xmlnode_get_namespace;
	da_xmlnode_set_prefix xmlnode_set_prefix;
	da_xmlnode_get_prefix xmlnode_get_prefix;
	da_xmlnode_get_parent xmlnode_get_parent;
	da_xmlnode_to_str xmlnode_to_str;
	da_xmlnode_to_formatted_str xmlnode_to_formatted_str;
	da_xmlnode_from_str xmlnode_from_str;
	da_xmlnode_copy xmlnode_copy;
	da_xmlnode_free xmlnode_free;
	da_xmlnode_from_file xmlnode_from_file;
}