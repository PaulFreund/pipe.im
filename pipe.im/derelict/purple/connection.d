/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.connection;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;
import derelict.glib.gslist;
import derelict.purple.plugin;
import derelict.purple.account;
import derelict.purple.sslconn;
import core.stdc.time;

extern (C):

alias _PurpleConnection PurpleConnection;
alias _Anonymous_0 PurpleConnectionFlags;
alias _Anonymous_1 PurpleConnectionState;
alias _Anonymous_2 PurpleConnectionError;
alias _Anonymous_3 PurpleConnectionErrorInfo;
alias _Anonymous_4 PurpleConnectionUiOps;

enum _Anonymous_0
{
	PURPLE_CONNECTION_HTML = 1,
	PURPLE_CONNECTION_NO_BGCOLOR = 2,
	PURPLE_CONNECTION_AUTO_RESP = 4,
	PURPLE_CONNECTION_FORMATTING_WBFO = 8,
	PURPLE_CONNECTION_NO_NEWLINES = 16,
	PURPLE_CONNECTION_NO_FONTSIZE = 32,
	PURPLE_CONNECTION_NO_URLDESC = 64,
	PURPLE_CONNECTION_NO_IMAGES = 128,
	PURPLE_CONNECTION_ALLOW_CUSTOM_SMILEY = 256,
	PURPLE_CONNECTION_SUPPORT_MOODS = 512,
	PURPLE_CONNECTION_SUPPORT_MOOD_MESSAGES = 1024
}

enum _Anonymous_1
{
	PURPLE_DISCONNECTED = 0,
	PURPLE_CONNECTED = 1,
	PURPLE_CONNECTING = 2
}

enum _Anonymous_2
{
	PURPLE_CONNECTION_ERROR_NETWORK_ERROR = 0,
	PURPLE_CONNECTION_ERROR_INVALID_USERNAME = 1,
	PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED = 2,
	PURPLE_CONNECTION_ERROR_AUTHENTICATION_IMPOSSIBLE = 3,
	PURPLE_CONNECTION_ERROR_NO_SSL_SUPPORT = 4,
	PURPLE_CONNECTION_ERROR_ENCRYPTION_ERROR = 5,
	PURPLE_CONNECTION_ERROR_NAME_IN_USE = 6,
	PURPLE_CONNECTION_ERROR_INVALID_SETTINGS = 7,
	PURPLE_CONNECTION_ERROR_CERT_NOT_PROVIDED = 8,
	PURPLE_CONNECTION_ERROR_CERT_UNTRUSTED = 9,
	PURPLE_CONNECTION_ERROR_CERT_EXPIRED = 10,
	PURPLE_CONNECTION_ERROR_CERT_NOT_ACTIVATED = 11,
	PURPLE_CONNECTION_ERROR_CERT_HOSTNAME_MISMATCH = 12,
	PURPLE_CONNECTION_ERROR_CERT_FINGERPRINT_MISMATCH = 13,
	PURPLE_CONNECTION_ERROR_CERT_SELF_SIGNED = 14,
	PURPLE_CONNECTION_ERROR_CERT_OTHER_ERROR = 15,
	PURPLE_CONNECTION_ERROR_OTHER_ERROR = 16
}

struct _Anonymous_3
{
	PurpleConnectionError type;
	char* description;
}

struct _Anonymous_4
{
	void function (PurpleConnection*, const(char)*, size_t, size_t) connect_progress;
	void function (PurpleConnection*) connected;
	void function (PurpleConnection*) disconnected;
	void function (PurpleConnection*, const(char)*) notice;
	void function (PurpleConnection*, const(char)*) report_disconnect;
	void function () network_connected;
	void function () network_disconnected;
	void function (PurpleConnection*, PurpleConnectionError, const(char)*) report_disconnect_reason;
	void function () _purple_reserved1;
	void function () _purple_reserved2;
	void function () _purple_reserved3;
}

struct _PurpleConnection
{
	PurplePlugin* prpl;
	PurpleConnectionFlags flags;
	PurpleConnectionState state;
	PurpleAccount* account;
	char* password;
	int inpa;
	GSList* buddy_chats;
	void* proto_data;
	char* display_name;
	guint keepalive;
	gboolean wants_to_die;
	guint disconnect_timeout;
	time_t last_received;
}

extern( C ) nothrow 
{
    alias da_purple_connection_new = void function(PurpleAccount* account, gboolean regist, const(char)* password);													
    alias da_purple_connection_new_unregister = void function(PurpleAccount* account, const(char)* password, PurpleAccountUnregistrationCb cb, void* user_data);	
    alias da_purple_connection_destroy = void function(PurpleConnection* gc);																						
    alias da_purple_connection_set_state = void function(PurpleConnection* gc, PurpleConnectionState state);														
    alias da_purple_connection_set_account = void function(PurpleConnection* gc, PurpleAccount* account);															
    alias da_purple_connection_set_display_name = void function(PurpleConnection* gc, const(char)* name);															
    alias da_purple_connection_set_protocol_data = void function(PurpleConnection* connection, void* proto_data);													
    alias da_purple_connection_get_state = PurpleConnectionState function(const(PurpleConnection)* gc);																
    alias da_purple_connection_get_account = PurpleAccount* function(const(PurpleConnection)* gc);																	
    alias da_purple_connection_get_prpl = PurplePlugin* function(const(PurpleConnection)* gc);																		
    alias da_purple_connection_get_password = const(char)* function(const(PurpleConnection)* gc);																	
    alias da_purple_connection_get_display_name = const(char)* function(const(PurpleConnection)* gc);																
    alias da_purple_connection_get_protocol_data = void* function(const(PurpleConnection)* connection);																
    alias da_purple_connection_update_progress = void function(PurpleConnection* gc, const(char)* text, size_t step, size_t count);									
    alias da_purple_connection_notice = void function(PurpleConnection* gc, const(char)* text);																		
    alias da_purple_connection_error = void function(PurpleConnection* gc, const(char)* reason);																	
    alias da_purple_connection_error_reason = void function(PurpleConnection* gc, PurpleConnectionError reason, const(char)* description);							
    alias da_purple_connection_ssl_error = void function(PurpleConnection* gc, PurpleSslErrorType ssl_error);														
    alias da_purple_connection_error_is_fatal = gboolean function(PurpleConnectionError reason);																	
    alias da_purple_connections_disconnect_all = void function();																									
    alias da_purple_connections_get_all = GList* function();																										
    alias da_purple_connections_get_connecting = GList* function();																									
    alias da_purple_connections_set_ui_ops = void function(PurpleConnectionUiOps* ops);																				
    alias da_purple_connections_get_ui_ops = PurpleConnectionUiOps* function();																						
    alias da_purple_connections_init = void function();																												
    alias da_purple_connections_uninit = void function();																											
    alias da_purple_connections_get_handle = void* function();																										
}

__gshared
{
	da_purple_connection_new purple_connection_new;
	da_purple_connection_new_unregister purple_connection_new_unregister;
	da_purple_connection_destroy purple_connection_destroy;
	da_purple_connection_set_state purple_connection_set_state;
	da_purple_connection_set_account purple_connection_set_account;
	da_purple_connection_set_display_name purple_connection_set_display_name;
	da_purple_connection_set_protocol_data purple_connection_set_protocol_data;
	da_purple_connection_get_state purple_connection_get_state;
	da_purple_connection_get_account purple_connection_get_account;
	da_purple_connection_get_prpl purple_connection_get_prpl;
	da_purple_connection_get_password purple_connection_get_password;
	da_purple_connection_get_display_name purple_connection_get_display_name;
	da_purple_connection_get_protocol_data purple_connection_get_protocol_data;
	da_purple_connection_update_progress purple_connection_update_progress;
	da_purple_connection_notice purple_connection_notice;
	da_purple_connection_error purple_connection_error;
	da_purple_connection_error_reason purple_connection_error_reason;
	da_purple_connection_ssl_error purple_connection_ssl_error;
	da_purple_connection_error_is_fatal purple_connection_error_is_fatal;
	da_purple_connections_disconnect_all purple_connections_disconnect_all;
	da_purple_connections_get_all purple_connections_get_all;
	da_purple_connections_get_connecting purple_connections_get_connecting;
	da_purple_connections_set_ui_ops purple_connections_set_ui_ops;
	da_purple_connections_get_ui_ops purple_connections_get_ui_ops;
	da_purple_connections_init purple_connections_init;
	da_purple_connections_uninit purple_connections_uninit;
	da_purple_connections_get_handle purple_connections_get_handle;
}