/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.eventloop;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gmain;

extern (C):

alias _Anonymous_0 PurpleInputCondition;
alias void function (void*, int, _Anonymous_0) PurpleInputFunction;
alias _PurpleEventLoopUiOps PurpleEventLoopUiOps;

enum _Anonymous_0
{
	PURPLE_INPUT_READ = 1,
	PURPLE_INPUT_WRITE = 2
}

struct _PurpleEventLoopUiOps
{
	guint function (guint, GSourceFunc, gpointer) timeout_add;
	gboolean function (guint) timeout_remove;
	guint function (int, PurpleInputCondition, PurpleInputFunction, gpointer) input_add;
	gboolean function (guint) input_remove;
	int function (int, int*) input_get_error;
	guint function (guint, GSourceFunc, gpointer) timeout_add_seconds;
	void function () _purple_reserved2;
	void function () _purple_reserved3;
	void function () _purple_reserved4;
}


extern( C ) nothrow 
{
	alias da_purple_timeout_add = guint function(guint interval, GSourceFunc function_, gpointer data);									
    alias da_purple_timeout_add_seconds = guint function(guint interval, GSourceFunc function_, gpointer data);							
    alias da_purple_timeout_remove = gboolean function(guint handle);																	
    alias da_purple_input_add = guint function(int fd, PurpleInputCondition cond, PurpleInputFunction func, gpointer user_data);		
    alias da_purple_input_remove = gboolean function(guint handle);																		
    alias da_purple_input_get_error = int function(int fd, int* error);																	
    alias da_purple_eventloop_set_ui_ops = void function(PurpleEventLoopUiOps* ops);													
    alias da_purple_eventloop_get_ui_ops = PurpleEventLoopUiOps* function();					
}

__gshared
{
	da_purple_timeout_add purple_timeout_add;
	da_purple_timeout_add_seconds purple_timeout_add_seconds;
	da_purple_timeout_remove purple_timeout_remove;
	da_purple_input_add purple_input_add;
	da_purple_input_remove purple_input_remove;
	da_purple_input_get_error purple_input_get_error;
	da_purple_eventloop_set_ui_ops purple_eventloop_set_ui_ops;
	da_purple_eventloop_get_ui_ops purple_eventloop_get_ui_ops;
}