/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.signals;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.purple.value;
import std.c.stdarg;

extern (C):

alias void function () PurpleCallback;
alias void function (void function (), va_list, void*, void**) PurpleSignalMarshalFunc;


extern( C ) nothrow 
{
    alias da_purple_signal_register = gulong function(void* instance, const(char)* signal, PurpleSignalMarshalFunc marshal, PurpleValue* ret_value, int num_values, ...);				
    alias da_purple_signal_unregister = void function(void* instance, const(char)* signal);																								
    alias da_purple_signals_unregister_by_instance = void function(void* instance);																										
    alias da_purple_signal_get_values = void function(void* instance, const(char)* signal, PurpleValue** ret_value, int* num_values, PurpleValue*** values);							
    alias da_purple_signal_connect_priority = gulong function(void* instance, const(char)* signal, void* handle, PurpleCallback func, void* data, int priority);						
    alias da_purple_signal_connect = gulong function(void* instance, const(char)* signal, void* handle, PurpleCallback func, void* data);												
    alias da_purple_signal_connect_priority_vargs = gulong function(void* instance, const(char)* signal, void* handle, PurpleCallback func, void* data, int priority);					
    alias da_purple_signal_connect_vargs = gulong function(void* instance, const(char)* signal, void* handle, PurpleCallback func, void* data);											
    alias da_purple_signal_disconnect = void function(void* instance, const(char)* signal, void* handle, PurpleCallback func);															
    alias da_purple_signals_disconnect_by_handle = void function(void* handle);																											
    alias da_purple_signal_emit = void function(void* instance, const(char)* signal, ...);																								
    alias da_purple_signal_emit_vargs = void function(void* instance, const(char)* signal, va_list args);																				
    alias da_purple_signal_emit_return_1 = void* function(void* instance, const(char)* signal, ...);																					
    alias da_purple_signal_emit_vargs_return_1 = void* function(void* instance, const(char)* signal, va_list args);																		
    alias da_purple_signals_init = void function();																																		
    alias da_purple_signals_uninit = void function();																																	
    alias da_purple_marshal_VOID = void function(PurpleCallback cb, va_list args, void* data, void** return_val);																		
    alias da_purple_marshal_VOID__INT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);																	
    alias da_purple_marshal_VOID__INT_INT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);																
    alias da_purple_marshal_VOID__POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);																
    alias da_purple_marshal_VOID__POINTER_UINT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);															
    alias da_purple_marshal_VOID__POINTER_INT_INT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);														
    alias da_purple_marshal_VOID__POINTER_INT_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);													
    alias da_purple_marshal_VOID__POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);														
    alias da_purple_marshal_VOID__POINTER_POINTER_UINT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);													
    alias da_purple_marshal_VOID__POINTER_POINTER_UINT_UINT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);											
    alias da_purple_marshal_VOID__POINTER_POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);												
    alias da_purple_marshal_VOID__POINTER_POINTER_POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);										
    alias da_purple_marshal_VOID__POINTER_POINTER_POINTER_POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);								
    alias da_purple_marshal_VOID__POINTER_POINTER_POINTER_UINT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);											
    alias da_purple_marshal_VOID__POINTER_POINTER_POINTER_POINTER_UINT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);									
    alias da_purple_marshal_VOID__POINTER_POINTER_POINTER_UINT_UINT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);									
    alias da_purple_marshal_INT__INT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);																	
    alias da_purple_marshal_INT__INT_INT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);																
    alias da_purple_marshal_INT__POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);														
    alias da_purple_marshal_INT__POINTER_POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);												
    alias da_purple_marshal_INT__POINTER_POINTER_POINTER_POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);								
    alias da_purple_marshal_BOOLEAN__POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);															
    alias da_purple_marshal_BOOLEAN__POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);													
    alias da_purple_marshal_BOOLEAN__POINTER_BOOLEAN = void function(PurpleCallback cb, va_list args, void* data, void** return_val);													
    alias da_purple_marshal_BOOLEAN__POINTER_POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);											
    alias da_purple_marshal_BOOLEAN__POINTER_POINTER_UINT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);												
    alias da_purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_UINT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);										
    alias da_purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);									
    alias da_purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);							
    alias da_purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_UINT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);								
    alias da_purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);					
    alias da_purple_marshal_BOOLEAN__INT_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);														
    alias da_purple_marshal_POINTER__POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);															
    alias da_purple_marshal_POINTER__POINTER_INT = void function(PurpleCallback cb, va_list args, void* data, void** return_val);														
    alias da_purple_marshal_POINTER__POINTER_INT64 = void function(PurpleCallback cb, va_list args, void* data, void** return_val);														
    alias da_purple_marshal_POINTER__POINTER_INT_BOOLEAN = void function(PurpleCallback cb, va_list args, void* data, void** return_val);												
    alias da_purple_marshal_POINTER__POINTER_INT64_BOOLEAN = void function(PurpleCallback cb, va_list args, void* data, void** return_val);												
    alias da_purple_marshal_POINTER__POINTER_POINTER = void function(PurpleCallback cb, va_list args, void* data, void** return_val);	
}

__gshared
{
	da_purple_signal_register purple_signal_register;
	da_purple_signal_unregister purple_signal_unregister;
	da_purple_signals_unregister_by_instance purple_signals_unregister_by_instance;
	da_purple_signal_get_values purple_signal_get_values;
	da_purple_signal_connect_priority purple_signal_connect_priority;
	da_purple_signal_connect purple_signal_connect;
	da_purple_signal_connect_priority_vargs purple_signal_connect_priority_vargs;
	da_purple_signal_connect_vargs purple_signal_connect_vargs;
	da_purple_signal_disconnect purple_signal_disconnect;
	da_purple_signals_disconnect_by_handle purple_signals_disconnect_by_handle;
	da_purple_signal_emit purple_signal_emit;
	da_purple_signal_emit_vargs purple_signal_emit_vargs;
	da_purple_signal_emit_return_1 purple_signal_emit_return_1;
	da_purple_signal_emit_vargs_return_1 purple_signal_emit_vargs_return_1;
	da_purple_signals_init purple_signals_init;
	da_purple_signals_uninit purple_signals_uninit;
	da_purple_marshal_VOID purple_marshal_VOID;
	da_purple_marshal_VOID__INT purple_marshal_VOID__INT;
	da_purple_marshal_VOID__INT_INT purple_marshal_VOID__INT_INT;
	da_purple_marshal_VOID__POINTER purple_marshal_VOID__POINTER;
	da_purple_marshal_VOID__POINTER_UINT purple_marshal_VOID__POINTER_UINT;
	da_purple_marshal_VOID__POINTER_INT_INT purple_marshal_VOID__POINTER_INT_INT;
	da_purple_marshal_VOID__POINTER_INT_POINTER purple_marshal_VOID__POINTER_INT_POINTER;
	da_purple_marshal_VOID__POINTER_POINTER purple_marshal_VOID__POINTER_POINTER;
	da_purple_marshal_VOID__POINTER_POINTER_UINT purple_marshal_VOID__POINTER_POINTER_UINT;
	da_purple_marshal_VOID__POINTER_POINTER_UINT_UINT purple_marshal_VOID__POINTER_POINTER_UINT_UINT;
	da_purple_marshal_VOID__POINTER_POINTER_POINTER purple_marshal_VOID__POINTER_POINTER_POINTER;
	da_purple_marshal_VOID__POINTER_POINTER_POINTER_POINTER purple_marshal_VOID__POINTER_POINTER_POINTER_POINTER;
	da_purple_marshal_VOID__POINTER_POINTER_POINTER_POINTER_POINTER purple_marshal_VOID__POINTER_POINTER_POINTER_POINTER_POINTER;
	da_purple_marshal_VOID__POINTER_POINTER_POINTER_UINT purple_marshal_VOID__POINTER_POINTER_POINTER_UINT;
	da_purple_marshal_VOID__POINTER_POINTER_POINTER_POINTER_UINT purple_marshal_VOID__POINTER_POINTER_POINTER_POINTER_UINT;
	da_purple_marshal_VOID__POINTER_POINTER_POINTER_UINT_UINT purple_marshal_VOID__POINTER_POINTER_POINTER_UINT_UINT;
	da_purple_marshal_INT__INT purple_marshal_INT__INT;
	da_purple_marshal_INT__INT_INT purple_marshal_INT__INT_INT;
	da_purple_marshal_INT__POINTER_POINTER purple_marshal_INT__POINTER_POINTER;
	da_purple_marshal_INT__POINTER_POINTER_POINTER purple_marshal_INT__POINTER_POINTER_POINTER;
	da_purple_marshal_INT__POINTER_POINTER_POINTER_POINTER_POINTER purple_marshal_INT__POINTER_POINTER_POINTER_POINTER_POINTER;
	da_purple_marshal_BOOLEAN__POINTER purple_marshal_BOOLEAN__POINTER;
	da_purple_marshal_BOOLEAN__POINTER_POINTER purple_marshal_BOOLEAN__POINTER_POINTER;
	da_purple_marshal_BOOLEAN__POINTER_BOOLEAN purple_marshal_BOOLEAN__POINTER_BOOLEAN;
	da_purple_marshal_BOOLEAN__POINTER_POINTER_POINTER purple_marshal_BOOLEAN__POINTER_POINTER_POINTER;
	da_purple_marshal_BOOLEAN__POINTER_POINTER_UINT purple_marshal_BOOLEAN__POINTER_POINTER_UINT;
	da_purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_UINT purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_UINT;
	da_purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER;
	da_purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER;
	da_purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_UINT purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_UINT;
	da_purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER_POINTER purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER_POINTER;
	da_purple_marshal_BOOLEAN__INT_POINTER purple_marshal_BOOLEAN__INT_POINTER;
	da_purple_marshal_POINTER__POINTER purple_marshal_POINTER__POINTER;
	da_purple_marshal_POINTER__POINTER_INT purple_marshal_POINTER__POINTER_INT;
	da_purple_marshal_POINTER__POINTER_INT64 purple_marshal_POINTER__POINTER_INT64;
	da_purple_marshal_POINTER__POINTER_INT_BOOLEAN purple_marshal_POINTER__POINTER_INT_BOOLEAN;
	da_purple_marshal_POINTER__POINTER_INT64_BOOLEAN purple_marshal_POINTER__POINTER_INT64_BOOLEAN;
    da_purple_marshal_POINTER__POINTER_POINTER purple_marshal_POINTER__POINTER_POINTER;
}