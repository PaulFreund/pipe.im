/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple._debug;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;

extern (C):

alias _Anonymous_0 PurpleDebugLevel;
alias _Anonymous_1 PurpleDebugUiOps;

enum _Anonymous_0
{
	PURPLE_DEBUG_ALL = 0,
	PURPLE_DEBUG_MISC = 1,
	PURPLE_DEBUG_INFO = 2,
	PURPLE_DEBUG_WARNING = 3,
	PURPLE_DEBUG_ERROR = 4,
	PURPLE_DEBUG_FATAL = 5
}

struct _Anonymous_1
{
	void function (PurpleDebugLevel, const(char)*, const(char)*) print;
	gboolean function (PurpleDebugLevel, const(char)*) is_enabled;
	void function () _purple_reserved1;
	void function () _purple_reserved2;
	void function () _purple_reserved3;
	void function () _purple_reserved4;
}


extern( C ) nothrow 
{
	alias da_purple_debug = void function(PurpleDebugLevel level, const(char)* category, const(char)* format, ...);			
    alias da_purple_debug_misc = void function(const(char)* category, const(char)* format, ...);							
    alias da_purple_debug_info = void function(const(char)* category, const(char)* format, ...);							
    alias da_purple_debug_warning = void function(const(char)* category, const(char)* format, ...);							
    alias da_purple_debug_error = void function(const(char)* category, const(char)* format, ...);							
    alias da_purple_debug_fatal = void function(const(char)* category, const(char)* format, ...);							
    alias da_purple_debug_set_enabled = void function(gboolean enabled);													
    alias da_purple_debug_is_enabled = gboolean function();																	
    alias da_purple_debug_set_verbose = void function(gboolean verbose);													
    alias da_purple_debug_is_verbose = gboolean function();																	
    alias da_purple_debug_set_unsafe = void function(gboolean unsafe);														
    alias da_purple_debug_is_unsafe = gboolean function();																	
    alias da_purple_debug_set_ui_ops = void function(PurpleDebugUiOps* ops);												
    alias da_purple_debug_get_ui_ops = PurpleDebugUiOps* function();														
    alias da_purple_debug_init = void function();		
}

__gshared
{
	da_purple_debug purple_debug;
	da_purple_debug_misc purple_debug_misc;
	da_purple_debug_info purple_debug_info;
	da_purple_debug_warning purple_debug_warning;
	da_purple_debug_error purple_debug_error;
	da_purple_debug_fatal purple_debug_fatal;
	da_purple_debug_set_enabled purple_debug_set_enabled;
	da_purple_debug_is_enabled purple_debug_is_enabled;
	da_purple_debug_set_verbose purple_debug_set_verbose;
	da_purple_debug_is_verbose purple_debug_is_verbose;
	da_purple_debug_set_unsafe purple_debug_set_unsafe;
	da_purple_debug_is_unsafe purple_debug_is_unsafe;
	da_purple_debug_set_ui_ops purple_debug_set_ui_ops;
	da_purple_debug_get_ui_ops purple_debug_get_ui_ops;
	da_purple_debug_init purple_debug_init;
}