/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.purple.proxy;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.purple.account;
extern (C):

alias _Anonymous_0 PurpleProxyType;
alias _Anonymous_1 PurpleProxyInfo;
alias _PurpleProxyConnectData PurpleProxyConnectData;
alias void function (void*, int, const(char)*) PurpleProxyConnectFunction;

enum _Anonymous_0
{
	PURPLE_PROXY_USE_GLOBAL = -1,
	PURPLE_PROXY_NONE = 0,
	PURPLE_PROXY_HTTP = 1,
	PURPLE_PROXY_SOCKS4 = 2,
	PURPLE_PROXY_SOCKS5 = 3,
	PURPLE_PROXY_USE_ENVVAR = 4,
	PURPLE_PROXY_TOR = 5
}

struct _Anonymous_1
{
	PurpleProxyType type;
	char* host;
	int port;
	char* username;
	char* password;
}

struct _PurpleProxyConnectData;

extern( C ) nothrow 
{
	alias da_purple_proxy_info_new = PurpleProxyInfo* function();																																											
    alias da_purple_proxy_info_destroy = void function(PurpleProxyInfo* info);																																								
    alias da_purple_proxy_info_set_type = void function(PurpleProxyInfo* info, PurpleProxyType type);																																		
    alias da_purple_proxy_info_set_host = void function(PurpleProxyInfo* info, const(char)* host);																																			
    alias da_purple_proxy_info_set_port = void function(PurpleProxyInfo* info, int port);																																					
    alias da_purple_proxy_info_set_username = void function(PurpleProxyInfo* info, const(char)* username);																																	
    alias da_purple_proxy_info_set_password = void function(PurpleProxyInfo* info, const(char)* password);																																	
    alias da_purple_proxy_info_get_type = PurpleProxyType function(const(PurpleProxyInfo)* info);																																			
    alias da_purple_proxy_info_get_host = const(char)* function(const(PurpleProxyInfo)* info);																																				
    alias da_purple_proxy_info_get_port = int function(const(PurpleProxyInfo)* info);																																						
    alias da_purple_proxy_info_get_username = const(char)* function(const(PurpleProxyInfo)* info);																																			
    alias da_purple_proxy_info_get_password = const(char)* function(const(PurpleProxyInfo)* info);																																			
    alias da_purple_global_proxy_get_info = PurpleProxyInfo* function();																																									
    alias da_purple_global_proxy_set_info = void function(PurpleProxyInfo* info);																																							
    alias da_purple_proxy_get_handle = void* function();																																													
    alias da_purple_proxy_init = void function();																																															
    alias da_purple_proxy_uninit = void function();																																															
    alias da_purple_proxy_get_setup = PurpleProxyInfo* function(PurpleAccount* account);																																					
    alias da_purple_proxy_connect = PurpleProxyConnectData* function(void* handle, PurpleAccount* account, const(char)* host, int port, PurpleProxyConnectFunction connect_cb, gpointer data);												
    alias da_purple_proxy_connect_udp = PurpleProxyConnectData* function(void* handle, PurpleAccount* account, const(char)* host, int port, PurpleProxyConnectFunction connect_cb, gpointer data);											
    alias da_purple_proxy_connect_socks5_account = PurpleProxyConnectData* function(void* handle, PurpleAccount* account, PurpleProxyInfo* gpi, const(char)* host, int port, PurpleProxyConnectFunction connect_cb, gpointer data);			
    alias da_purple_proxy_connect_socks5 = PurpleProxyConnectData* function(void* handle, PurpleProxyInfo* gpi, const(char)* host, int port, PurpleProxyConnectFunction connect_cb, gpointer data);											
    alias da_purple_proxy_connect_cancel = void function(PurpleProxyConnectData* connect_data);																																				
    alias da_purple_proxy_connect_cancel_with_handle = void function(void* handle);	
}

__gshared
{
	da_purple_proxy_info_new purple_proxy_info_new;
	da_purple_proxy_info_destroy purple_proxy_info_destroy;
	da_purple_proxy_info_set_type purple_proxy_info_set_type;
	da_purple_proxy_info_set_host purple_proxy_info_set_host;
	da_purple_proxy_info_set_port purple_proxy_info_set_port;
	da_purple_proxy_info_set_username purple_proxy_info_set_username;
	da_purple_proxy_info_set_password purple_proxy_info_set_password;
	da_purple_proxy_info_get_type purple_proxy_info_get_type;
	da_purple_proxy_info_get_host purple_proxy_info_get_host;
	da_purple_proxy_info_get_port purple_proxy_info_get_port;
	da_purple_proxy_info_get_username purple_proxy_info_get_username;
	da_purple_proxy_info_get_password purple_proxy_info_get_password;
	da_purple_global_proxy_get_info purple_global_proxy_get_info;
	da_purple_global_proxy_set_info purple_global_proxy_set_info;
	da_purple_proxy_get_handle purple_proxy_get_handle;
	da_purple_proxy_init purple_proxy_init;
	da_purple_proxy_uninit purple_proxy_uninit;
	da_purple_proxy_get_setup purple_proxy_get_setup;
	da_purple_proxy_connect purple_proxy_connect;
	da_purple_proxy_connect_udp purple_proxy_connect_udp;
	da_purple_proxy_connect_socks5_account purple_proxy_connect_socks5_account;
	da_purple_proxy_connect_socks5 purple_proxy_connect_socks5;
	da_purple_proxy_connect_cancel purple_proxy_connect_cancel;
	da_purple_proxy_connect_cancel_with_handle purple_proxy_connect_cancel_with_handle;
}