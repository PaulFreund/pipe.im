/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

module derelict.glib.gdataset;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gquark;

extern (C):

alias _GData GData;
alias void function (uint, void*, void*) GDataForeachFunc;

struct _GData;

extern( C ) nothrow
{
    alias da_g_datalist_init = void function(GData** datalist);																																							
    alias da_g_datalist_clear = void function(GData** datalist);																																						
    alias da_g_datalist_id_get_data = gpointer function(GData** datalist, GQuark key_id);																																
    alias da_g_datalist_id_set_data_full = void function(GData** datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func);																					
    alias da_g_datalist_id_remove_no_notify = gpointer function(GData** datalist, GQuark key_id);																														
    alias da_g_datalist_foreach = void function(GData** datalist, GDataForeachFunc func, gpointer user_data);																											
    alias da_g_datalist_set_flags = void function(GData** datalist, guint flags);																																		
    alias da_g_datalist_unset_flags = void function(GData** datalist, guint flags);																																		
    alias da_g_datalist_get_flags = guint function(GData** datalist);																																					
    alias da_g_dataset_destroy = void function(gconstpointer dataset_location);																																			
    alias da_g_dataset_id_get_data = gpointer function(gconstpointer dataset_location, GQuark key_id);																													
    alias da_g_datalist_get_data = gpointer function(GData** datalist, const(gchar)* key);																																
    alias da_g_dataset_id_set_data_full = void function(gconstpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func);																		
    alias da_g_dataset_id_remove_no_notify = gpointer function(gconstpointer dataset_location, GQuark key_id);																											
    alias da_g_dataset_foreach = void function(gconstpointer dataset_location, GDataForeachFunc func, gpointer user_data);																								
}

__gshared
{
    da_g_datalist_init g_datalist_init; 
    da_g_datalist_clear g_datalist_clear; 
    da_g_datalist_id_get_data g_datalist_id_get_data; 
    da_g_datalist_id_set_data_full g_datalist_id_set_data_full; 
    da_g_datalist_id_remove_no_notify g_datalist_id_remove_no_notify; 
    da_g_datalist_foreach g_datalist_foreach; 
    da_g_datalist_set_flags g_datalist_set_flags; 
    da_g_datalist_unset_flags g_datalist_unset_flags; 
    da_g_datalist_get_flags g_datalist_get_flags; 
    da_g_dataset_destroy g_dataset_destroy; 
    da_g_dataset_id_get_data g_dataset_id_get_data; 
    da_g_datalist_get_data g_datalist_get_data; 
    da_g_dataset_id_set_data_full g_dataset_id_set_data_full; 
    da_g_dataset_id_remove_no_notify g_dataset_id_remove_no_notify; 
    da_g_dataset_foreach g_dataset_foreach; 
}