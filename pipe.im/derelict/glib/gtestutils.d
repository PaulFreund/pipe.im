/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.gtestutils;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gmessages;
import derelict.glib.gslist;
import derelict.glib.gstring;
import derelict.glib.gquark;
import derelict.glib.gerror;
import core.stdc.config;
import core.stdc.string;

extern (C):

//alias GTestCase GTestCase;
//alias GTestSuite GTestSuite;
alias void function () GTestFunc;
alias void function (const(void)*) GTestDataFunc;
alias void function (void*, const(void)*) GTestFixtureFunc;
alias _Anonymous_0 GTestTrapFlags;
alias _Anonymous_1 GTestConfig;
alias _Anonymous_2 GTestLogType;
alias _Anonymous_3 GTestLogMsg;
alias _Anonymous_4 GTestLogBuffer;
alias int function (const(char)*, GLogLevelFlags, const(char)*, void*) GTestLogFatalFunc;

extern( C ) nothrow 
{
    alias da_g_test_config_vars = const GTestConfig*;
}

__gshared
{
    da_g_test_config_vars g_test_config_vars;
}

enum _Anonymous_0
{
	G_TEST_TRAP_SILENCE_STDOUT = 128,
	G_TEST_TRAP_SILENCE_STDERR = 256,
	G_TEST_TRAP_INHERIT_STDIN = 512
}

enum _Anonymous_2
{
	G_TEST_LOG_NONE = 0,
	G_TEST_LOG_ERROR = 1,
	G_TEST_LOG_START_BINARY = 2,
	G_TEST_LOG_LIST_CASE = 3,
	G_TEST_LOG_SKIP_CASE = 4,
	G_TEST_LOG_START_CASE = 5,
	G_TEST_LOG_STOP_CASE = 6,
	G_TEST_LOG_MIN_RESULT = 7,
	G_TEST_LOG_MAX_RESULT = 8,
	G_TEST_LOG_MESSAGE = 9
}

struct _Anonymous_1
{
	gboolean test_initialized;
	gboolean test_quick;
	gboolean test_perf;
	gboolean test_verbose;
	gboolean test_quiet;
	gboolean test_undefined;
}

struct _Anonymous_3
{
	GTestLogType log_type;
	guint n_strings;
	gchar** strings;
	guint n_nums;
	real* nums;
}

struct _Anonymous_4
{
	GString* data;
	GSList* msgs;
}

struct GTestCase;


struct GTestSuite;


extern( C ) nothrow 
{
    alias da_g_strcmp0 = int function(const(char)* str1, const(char)* str2);																																				
    alias da_g_test_minimized_result = void function(double minimized_quantity, const(char)* format, ...);																													
    alias da_g_test_maximized_result = void function(double maximized_quantity, const(char)* format, ...);																													
    alias da_g_test_init = void function(int* argc, char*** argv, ...);																																						
    alias da_g_test_run = int function();																																													
    alias da_g_test_add_func = void function(const(char)* testpath, GTestFunc test_func);																																	
    alias da_g_test_add_data_func = void function(const(char)* testpath, gconstpointer test_data, GTestDataFunc test_func);	
    alias da_g_test_add_data_func_full = void function(const char *testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func);
    alias da_g_test_fail = void function();																																													
    alias da_g_test_message = void function(const(char)* format, ...);																																						
    alias da_g_test_bug_base = void function(const(char)* uri_pattern);																																						
    alias da_g_test_bug = void function(const(char)* bug_uri_snippet);																																						
    alias da_g_test_timer_start = void function();																																											
    alias da_g_test_timer_elapsed = double function();																																										
    alias da_g_test_timer_last = double function();																																											
    alias da_g_test_queue_free = void function(gpointer gfree_pointer);																																						
    alias da_g_test_queue_destroy = void function(GDestroyNotify destroy_func, gpointer destroy_data);																														
    alias da_g_test_trap_fork = gboolean function(guint64 usec_timeout, GTestTrapFlags test_trap_flags);																													
    alias da_g_test_trap_has_passed = gboolean function();																																									
    alias da_g_test_trap_reached_timeout = gboolean function();																																								
    alias da_g_test_rand_int = gint32 function();																																											
    alias da_g_test_rand_int_range = gint32 function(gint32 begin, gint32 end);																																				
    alias da_g_test_rand_double = double function();																																										
    alias da_g_test_rand_double_range = double function(double range_start, double range_end);																																
    alias da_g_test_create_case = GTestCase* function(const(char)* test_name, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown);			
    alias da_g_test_create_suite = GTestSuite* function(const(char)* suite_name);																																			
    alias da_g_test_get_root = GTestSuite* function();																																										
    alias da_g_test_suite_add = void function(GTestSuite* suite, GTestCase* test_case);																																		
    alias da_g_test_suite_add_suite = void function(GTestSuite* suite, GTestSuite* nestedsuite);																															
    alias da_g_test_run_suite = int function(GTestSuite* suite);																																							
    alias da_g_test_trap_assertions = void function(const(char)* domain, const(char)* file, int line, const(char)* func, guint64 assertion_flags, const(char)* pattern);													
    alias da_g_assertion_message = void function(const(char)* domain, const(char)* file, int line, const(char)* func, const(char)* message);																				
    alias da_g_assertion_message_expr = void function(const(char)* domain, const(char)* file, int line, const(char)* func, const(char)* expr);																				
    alias da_g_assertion_message_cmpstr = void function(const(char)* domain, const(char)* file, int line, const(char)* func, const(char)* expr, const(char)* arg1, const(char)* cmp, const(char)* arg2);					
    alias da_g_assertion_message_cmpnum = void function(const(char)* domain, const(char)* file, int line, const(char)* func, const(char)* expr, real arg1, const(char)* cmp, real arg2, char numtype);						
    alias da_g_assertion_message_error = void function(const(char)* domain, const(char)* file, int line, const(char)* func, const(char)* expr, const(GError)* error, GQuark error_domain, int error_code);					
    alias da_g_test_add_vtable = void function(const(char)* testpath, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown);					
    alias da_g_test_log_type_name = const(char)* function(GTestLogType log_type);																																			
    alias da_g_test_log_buffer_new = GTestLogBuffer* function();																																							
    alias da_g_test_log_buffer_free = void function(GTestLogBuffer* tbuffer);																																				
    alias da_g_test_log_buffer_push = void function(GTestLogBuffer* tbuffer, guint n_bytes, const(guint8)* bytes);																											
    alias da_g_test_log_buffer_pop = GTestLogMsg* function(GTestLogBuffer* tbuffer);																																		
    alias da_g_test_log_msg_free = void function(GTestLogMsg* tmsg);																																						
    alias da_g_test_log_set_fatal_handler = void function(GTestLogFatalFunc log_func, gpointer user_data);																													
    alias da_g_test_expect_message = void function(const gchar *log_domain, GLogLevelFlags log_level, const gchar *pattern);
    alias da_g_test_assert_expected_messages_internal = void function(const char *domain, const char *file, int line, const char *func);
}

__gshared
{
    da_g_strcmp0 g_strcmp0; 
    da_g_test_minimized_result g_test_minimized_result; 
    da_g_test_maximized_result g_test_maximized_result; 
    da_g_test_init g_test_init; 
    da_g_test_run g_test_run; 
    da_g_test_add_func g_test_add_func; 
    da_g_test_add_data_func g_test_add_data_func; 
    da_g_test_add_data_func_full g_test_add_data_func_full;
    da_g_test_fail g_test_fail; 
    da_g_test_message g_test_message; 
    da_g_test_bug_base g_test_bug_base; 
    da_g_test_bug g_test_bug; 
    da_g_test_timer_start g_test_timer_start; 
    da_g_test_timer_elapsed g_test_timer_elapsed; 
    da_g_test_timer_last g_test_timer_last; 
    da_g_test_queue_free g_test_queue_free; 
    da_g_test_queue_destroy g_test_queue_destroy; 
    da_g_test_trap_fork g_test_trap_fork; 
    da_g_test_trap_has_passed g_test_trap_has_passed; 
    da_g_test_trap_reached_timeout g_test_trap_reached_timeout; 
    da_g_test_rand_int g_test_rand_int; 
    da_g_test_rand_int_range g_test_rand_int_range; 
    da_g_test_rand_double g_test_rand_double; 
    da_g_test_rand_double_range g_test_rand_double_range; 
    da_g_test_create_case g_test_create_case; 
    da_g_test_create_suite g_test_create_suite; 
    da_g_test_get_root g_test_get_root; 
    da_g_test_suite_add g_test_suite_add; 
    da_g_test_suite_add_suite g_test_suite_add_suite; 
    da_g_test_run_suite g_test_run_suite; 
    da_g_test_trap_assertions g_test_trap_assertions; 
    da_g_assertion_message g_assertion_message; 
    da_g_assertion_message_expr g_assertion_message_expr; 
    da_g_assertion_message_cmpstr g_assertion_message_cmpstr; 
    da_g_assertion_message_cmpnum g_assertion_message_cmpnum; 
    da_g_assertion_message_error g_assertion_message_error; 
    da_g_test_add_vtable g_test_add_vtable; 
    da_g_test_log_type_name g_test_log_type_name; 
    da_g_test_log_buffer_new g_test_log_buffer_new; 
    da_g_test_log_buffer_free g_test_log_buffer_free; 
    da_g_test_log_buffer_push g_test_log_buffer_push; 
    da_g_test_log_buffer_pop g_test_log_buffer_pop; 
    da_g_test_log_msg_free g_test_log_msg_free; 
    da_g_test_log_set_fatal_handler g_test_log_set_fatal_handler;
    da_g_test_expect_message g_test_expect_message;
    da_g_test_assert_expected_messages_internal g_test_assert_expected_messages_internal;
}