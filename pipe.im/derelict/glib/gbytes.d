/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

module derelict.glib.gbytes;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.garray;
import core.stdc.config;

extern (C):

extern( C ) nothrow 
{
    alias da_g_bytes_new = GBytes* function(gconstpointer data, gsize size);																		
    alias da_g_bytes_new_take = GBytes* function(gpointer data, gsize size);																		
    alias da_g_bytes_new_static = GBytes* function(gconstpointer data, gsize size);																	
    alias da_g_bytes_new_with_free_func = GBytes* function(gconstpointer data, gsize size, GDestroyNotify free_func, gpointer user_data);			
    alias da_g_bytes_new_from_bytes = GBytes* function(GBytes* bytes, gsize offset, gsize length);													
    alias da_g_bytes_get_data = gconstpointer function(GBytes* bytes, gsize* size);																	
    alias da_g_bytes_get_size = gsize function(GBytes* bytes);																						
    alias da_g_bytes_ref = GBytes* function(GBytes* bytes);																							
    alias da_g_bytes_unref = void function(GBytes* bytes);																							
    alias da_g_bytes_unref_to_data = gpointer function(GBytes* bytes, gsize* size);																	
    alias da_g_bytes_unref_to_array = GByteArray* function(GBytes* bytes);																			
    alias da_g_bytes_hash = guint function(gconstpointer bytes);																					
    alias da_g_bytes_equal = gboolean function(gconstpointer bytes1, gconstpointer bytes2);															
    alias da_g_bytes_compare = gint function(gconstpointer bytes1, gconstpointer bytes2);															
}

__gshared
{
    da_g_bytes_new g_bytes_new; 
    da_g_bytes_new_take g_bytes_new_take; 
    da_g_bytes_new_static g_bytes_new_static; 
    da_g_bytes_new_with_free_func g_bytes_new_with_free_func; 
    da_g_bytes_new_from_bytes g_bytes_new_from_bytes; 
    da_g_bytes_get_data g_bytes_get_data; 
    da_g_bytes_get_size g_bytes_get_size; 
    da_g_bytes_ref g_bytes_ref; 
    da_g_bytes_unref g_bytes_unref; 
    da_g_bytes_unref_to_data g_bytes_unref_to_data; 
    da_g_bytes_unref_to_array g_bytes_unref_to_array; 
    da_g_bytes_hash g_bytes_hash; 
    da_g_bytes_equal g_bytes_equal; 
    da_g_bytes_compare g_bytes_compare; 
}