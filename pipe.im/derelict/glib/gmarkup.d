/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.gmarkup;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gerror;
import derelict.glib.gquark;
import derelict.glib.gslist;
import core.stdc.config;
import std.c.stdarg;

extern (C):

alias _Anonymous_0 GMarkupError;
alias _Anonymous_1 GMarkupParseFlags;
alias _GMarkupParseContext GMarkupParseContext;
alias _GMarkupParser GMarkupParser;
alias _Anonymous_2 GMarkupCollectType;

enum _Anonymous_0
{
	G_MARKUP_ERROR_BAD_UTF8 = 0,
	G_MARKUP_ERROR_EMPTY = 1,
	G_MARKUP_ERROR_PARSE = 2,
	G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3,
	G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4,
	G_MARKUP_ERROR_INVALID_CONTENT = 5,
	G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6
}

enum _Anonymous_1
{
	G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1,
	G_MARKUP_TREAT_CDATA_AS_TEXT = 2,
	G_MARKUP_PREFIX_ERROR_POSITION = 4
}

enum _Anonymous_2
{
	G_MARKUP_COLLECT_INVALID = 0,
	G_MARKUP_COLLECT_STRING = 1,
	G_MARKUP_COLLECT_STRDUP = 2,
	G_MARKUP_COLLECT_BOOLEAN = 3,
	G_MARKUP_COLLECT_TRISTATE = 4,
	G_MARKUP_COLLECT_OPTIONAL = 65536
}

struct _GMarkupParser
{
	void function (GMarkupParseContext*, const(gchar)*, const(gchar*)*, const(gchar*)*, gpointer, GError**) start_element;
	void function (GMarkupParseContext*, const(gchar)*, gpointer, GError**) end_element;
	void function (GMarkupParseContext*, const(gchar)*, gsize, gpointer, GError**) text;
	void function (GMarkupParseContext*, const(gchar)*, gsize, gpointer, GError**) passthrough;
	void function (GMarkupParseContext*, GError*, gpointer) error;
}

struct _GMarkupParseContext;

extern( C ) nothrow 
{
    alias da_g_markup_error_quark = GQuark function();																																																
    alias da_g_markup_parse_context_new = GMarkupParseContext* function(const(GMarkupParser)* parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify);																
    alias da_g_markup_parse_context_free = void function(GMarkupParseContext* context);																																								
    alias da_g_markup_parse_context_parse = gboolean function(GMarkupParseContext* context, const(gchar)* text, gssize text_len, GError** error);																									
    alias da_g_markup_parse_context_push = void function(GMarkupParseContext* context, const(GMarkupParser)* parser, gpointer user_data);																											
    alias da_g_markup_parse_context_pop = gpointer function(GMarkupParseContext* context);																																							
    alias da_g_markup_parse_context_end_parse = gboolean function(GMarkupParseContext* context, GError** error);																																	
    alias da_g_markup_parse_context_get_element = const(gchar)* function(GMarkupParseContext* context);																																				
    alias da_g_markup_parse_context_get_element_stack = const(GSList)* function(GMarkupParseContext* context);																																		
    alias da_g_markup_parse_context_get_position = void function(GMarkupParseContext* context, gint* line_number, gint* char_number);																												
    alias da_g_markup_parse_context_get_user_data = gpointer function(GMarkupParseContext* context);																																				
    alias da_g_markup_escape_text = gchar* function(const(gchar)* text, gssize length);																																								
    alias da_g_markup_printf_escaped = gchar* function(const(char)* format, ...);																																									
    alias da_g_markup_vprintf_escaped = gchar* function(const(char)* format, va_list args);																																							
    alias da_g_markup_collect_attributes = gboolean function(const(gchar)* element_name, const(gchar*)* attribute_names, const(gchar*)* attribute_values, GError** error, GMarkupCollectType first_type, const(gchar)* first_attr, ...);			
}

__gshared
{
    da_g_markup_error_quark g_markup_error_quark; 
    da_g_markup_parse_context_new g_markup_parse_context_new; 
    da_g_markup_parse_context_free g_markup_parse_context_free; 
    da_g_markup_parse_context_parse g_markup_parse_context_parse; 
    da_g_markup_parse_context_push g_markup_parse_context_push; 
    da_g_markup_parse_context_pop g_markup_parse_context_pop; 
    da_g_markup_parse_context_end_parse g_markup_parse_context_end_parse; 
    da_g_markup_parse_context_get_element g_markup_parse_context_get_element; 
    da_g_markup_parse_context_get_element_stack g_markup_parse_context_get_element_stack; 
    da_g_markup_parse_context_get_position g_markup_parse_context_get_position; 
    da_g_markup_parse_context_get_user_data g_markup_parse_context_get_user_data; 
    da_g_markup_escape_text g_markup_escape_text; 
    da_g_markup_printf_escaped g_markup_printf_escaped; 
    da_g_markup_vprintf_escaped g_markup_vprintf_escaped; 
    da_g_markup_collect_attributes g_markup_collect_attributes; 
}




