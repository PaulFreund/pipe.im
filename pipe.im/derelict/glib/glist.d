/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.glib.glist;

extern( C ) nothrow {
    alias da_NAME_FUNCTION = TYPE_RETURN function( TYPE_PARAMETER );
}

__gshared {
    da_NAME_FUNCTION NAME_FUNCTION;
}

/*


#if !defined (__GLIB_H_INSIDE__) && !defined (GLIB_COMPILATION)
#error "Only <glib.h> can be included directly."
#endif

#ifndef __G_LIST_H__
#define __G_LIST_H__

#include <glib/gmem.h>
#include <glib/gnode.h>

G_BEGIN_DECLS

typedef struct _GList GList;

struct _GList
{
    gpointer data;
    GList *next;
    GList *prev;
};

GList*   g_list_alloc                   (void) G_GNUC_WARN_UNUSED_RESULT;
void     g_list_free                    (GList            *list);
void     g_list_free_1                  (GList            *list);
#define  g_list_free1                   g_list_free_1
void     g_list_free_full               (GList            *list,
                                         GDestroyNotify    free_func);
GList*   g_list_append                  (GList            *list,
                                         gpointer          data) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_prepend                 (GList            *list,
                                         gpointer          data) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_insert                  (GList            *list,
                                         gpointer          data,
                                         gint              position) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_insert_sorted           (GList            *list,
                                         gpointer          data,
                                         GCompareFunc      func) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_insert_sorted_with_data (GList            *list,
                                         gpointer          data,
                                         GCompareDataFunc  func,
                                         gpointer          user_data) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_insert_before           (GList            *list,
                                         GList            *sibling,
                                         gpointer          data) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_concat                  (GList            *list1,
                                         GList            *list2) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_remove                  (GList            *list,
                                         gconstpointer     data) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_remove_all              (GList            *list,
                                         gconstpointer     data) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_remove_link             (GList            *list,
                                         GList            *llink) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_delete_link             (GList            *list,
                                         GList            *link_) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_reverse                 (GList            *list) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_copy                    (GList            *list) G_GNUC_WARN_UNUSED_RESULT;

GLIB_AVAILABLE_IN_2_34
GList*   g_list_copy_deep               (GList            *list,
                                         GCopyFunc         func,
                                         gpointer          user_data) G_GNUC_WARN_UNUSED_RESULT;

GList*   g_list_nth                     (GList            *list,
                                         guint             n);
GList*   g_list_nth_prev                (GList            *list,
                                         guint             n);
GList*   g_list_find                    (GList            *list,
                                         gconstpointer     data);
GList*   g_list_find_custom             (GList            *list,
                                         gconstpointer     data,
                                         GCompareFunc      func);
gint     g_list_position                (GList            *list,
                                         GList            *llink);
gint     g_list_index                   (GList            *list,
                                         gconstpointer     data);
GList*   g_list_last                    (GList            *list);
GList*   g_list_first                   (GList            *list);
guint    g_list_length                  (GList            *list);
void     g_list_foreach                 (GList            *list,
                                         GFunc             func,
                                         gpointer          user_data);
GList*   g_list_sort                    (GList            *list,
                                         GCompareFunc      compare_func) G_GNUC_WARN_UNUSED_RESULT;
GList*   g_list_sort_with_data          (GList            *list,
                                         GCompareDataFunc  compare_func,
                                         gpointer          user_data)  G_GNUC_WARN_UNUSED_RESULT;
gpointer g_list_nth_data                (GList            *list,
                                         guint             n);


#define g_list_previous(list)	        ((list) ? (((GList *)(list))->prev) : NULL)
#define g_list_next(list)	        ((list) ? (((GList *)(list))->next) : NULL)

G_END_DECLS

#endif


*/