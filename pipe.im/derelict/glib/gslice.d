/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.gslice;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import core.stdc.config;

extern (C):

alias _Anonymous_0 GSliceConfig;

enum _Anonymous_0
{
	G_SLICE_CONFIG_ALWAYS_MALLOC = 1,
	G_SLICE_CONFIG_BYPASS_MAGAZINES = 2,
	G_SLICE_CONFIG_WORKING_SET_MSECS = 3,
	G_SLICE_CONFIG_COLOR_INCREMENT = 4,
	G_SLICE_CONFIG_CHUNK_SIZES = 5,
	G_SLICE_CONFIG_CONTENTION_COUNTER = 6
}


extern( C ) nothrow 
{
    alias da_g_slice_alloc = gpointer function(gsize block_size);																																																				
    alias da_g_slice_alloc0 = gpointer function(gsize block_size);																																																				
    alias da_g_slice_copy = gpointer function(gsize block_size, gconstpointer mem_block);																																														
    alias da_g_slice_free1 = void function(gsize block_size, gpointer mem_block);																																																
    alias da_g_slice_free_chain_with_offset = void function(gsize block_size, gpointer mem_chain, gsize next_offset);																																							
    alias da_g_slice_set_config = void function(GSliceConfig ckey, gint64 value);																																																
    alias da_g_slice_get_config = gint64 function(GSliceConfig ckey);																																																			
    alias da_g_slice_get_config_state = gint64* function(GSliceConfig ckey, gint64 address, guint* n_values);																																									
}

__gshared
{
    da_g_slice_alloc g_slice_alloc; 
    da_g_slice_alloc0 g_slice_alloc0; 
    da_g_slice_copy g_slice_copy; 
    da_g_slice_free1 g_slice_free1; 
    da_g_slice_free_chain_with_offset g_slice_free_chain_with_offset; 
    da_g_slice_set_config g_slice_set_config; 
    da_g_slice_get_config g_slice_get_config; 
    da_g_slice_get_config_state g_slice_get_config_state; 
}