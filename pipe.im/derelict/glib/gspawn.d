/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.gspawn;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gquark;
import derelict.glib.gerror;

import core.stdc.config;

extern (C):

alias _Anonymous_0 GSpawnError;
alias void function (void*) GSpawnChildSetupFunc;
alias _Anonymous_1 GSpawnFlags;

enum _Anonymous_0
{
	G_SPAWN_ERROR_FORK = 0,
	G_SPAWN_ERROR_READ = 1,
	G_SPAWN_ERROR_CHDIR = 2,
	G_SPAWN_ERROR_ACCES = 3,
	G_SPAWN_ERROR_PERM = 4,
	G_SPAWN_ERROR_TOO_BIG = 5,
	G_SPAWN_ERROR_2BIG = 5,
	G_SPAWN_ERROR_NOEXEC = 6,
	G_SPAWN_ERROR_NAMETOOLONG = 7,
	G_SPAWN_ERROR_NOENT = 8,
	G_SPAWN_ERROR_NOMEM = 9,
	G_SPAWN_ERROR_NOTDIR = 10,
	G_SPAWN_ERROR_LOOP = 11,
	G_SPAWN_ERROR_TXTBUSY = 12,
	G_SPAWN_ERROR_IO = 13,
	G_SPAWN_ERROR_NFILE = 14,
	G_SPAWN_ERROR_MFILE = 15,
	G_SPAWN_ERROR_INVAL = 16,
	G_SPAWN_ERROR_ISDIR = 17,
	G_SPAWN_ERROR_LIBBAD = 18,
	G_SPAWN_ERROR_FAILED = 19
}

enum _Anonymous_1
{
	G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1,
	G_SPAWN_DO_NOT_REAP_CHILD = 2,
	G_SPAWN_SEARCH_PATH = 4,
	G_SPAWN_STDOUT_TO_DEV_NULL = 8,
	G_SPAWN_STDERR_TO_DEV_NULL = 16,
	G_SPAWN_CHILD_INHERITS_STDIN = 32,
	G_SPAWN_FILE_AND_ARGV_ZERO = 64
}

extern( C ) nothrow 
{
    alias da_g_spawn_error_quark = GQuark function();																																																					                                
    alias da_g_spawn_exit_error_quark = GQuark function();																																																					                                
    alias da_g_spawn_async = gboolean function(const(gchar)* working_directory, gchar** argv, gchar** envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid* child_pid, GError** error);																					
    alias da_g_spawn_async_with_pipes = gboolean function(const(gchar)* working_directory, gchar** argv, gchar** envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid* child_pid, gint* standard_input, gint* standard_output, gint* standard_error, GError** error);	
    alias da_g_spawn_sync = gboolean function(const(gchar)* working_directory, gchar** argv, gchar** envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gchar** standard_output, gchar** standard_error, gint* exit_status, GError** error);								
    alias da_g_spawn_command_line_sync = gboolean function(const(gchar)* command_line, gchar** standard_output, gchar** standard_error, gint* exit_status, GError** error);																																
    alias da_g_spawn_command_line_async = gboolean function(const(gchar)* command_line, GError** error);	
    alias da_g_spawn_check_exit_status = gboolean function(gint exit_status, GError **error);
    alias da_g_spawn_close_pid = void function(GPid pid);																																																					                            
}

__gshared
{
    da_g_spawn_error_quark g_spawn_error_quark; 
    da_g_spawn_exit_error_quark g_spawn_exit_error_quark; 
    da_g_spawn_async g_spawn_async; 
    da_g_spawn_async_with_pipes g_spawn_async_with_pipes; 
    da_g_spawn_sync g_spawn_sync; 
    da_g_spawn_command_line_sync g_spawn_command_line_sync; 
    da_g_spawn_command_line_async g_spawn_command_line_async; 
    da_g_spawn_check_exit_status g_spawn_check_exit_status;
    da_g_spawn_close_pid g_spawn_close_pid; 	
}