/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

module derelict.glib.gdate;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import core.stdc.config;
import core.stdc.time;

extern (C):

alias int GTime;
alias ushort GDateYear;
alias ubyte GDateDay;
alias _GDate GDate;
alias _Anonymous_0 GDateDMY;
alias _Anonymous_1 GDateWeekday;
alias _Anonymous_2 GDateMonth;

enum _Anonymous_0
{
	G_DATE_DAY = 0,
	G_DATE_MONTH = 1,
	G_DATE_YEAR = 2
}

enum _Anonymous_1
{
	G_DATE_BAD_WEEKDAY = 0,
	G_DATE_MONDAY = 1,
	G_DATE_TUESDAY = 2,
	G_DATE_WEDNESDAY = 3,
	G_DATE_THURSDAY = 4,
	G_DATE_FRIDAY = 5,
	G_DATE_SATURDAY = 6,
	G_DATE_SUNDAY = 7
}

enum _Anonymous_2
{
	G_DATE_BAD_MONTH = 0,
	G_DATE_JANUARY = 1,
	G_DATE_FEBRUARY = 2,
	G_DATE_MARCH = 3,
	G_DATE_APRIL = 4,
	G_DATE_MAY = 5,
	G_DATE_JUNE = 6,
	G_DATE_JULY = 7,
	G_DATE_AUGUST = 8,
	G_DATE_SEPTEMBER = 9,
	G_DATE_OCTOBER = 10,
	G_DATE_NOVEMBER = 11,
	G_DATE_DECEMBER = 12
}

struct _GDate
{
	guint julian_days;
	guint julian;
	guint dmy;
	guint day;
	guint month;
	guint year;
}

extern( C ) nothrow
{
    alias da_g_date_new = GDate* function();																	
    alias da_g_date_new_dmy = GDate* function(GDateDay day, GDateMonth month, GDateYear year);					
    alias da_g_date_new_julian = GDate* function(guint32 julian_day);											
    alias da_g_date_free = void function(GDate* date);															
    alias da_g_date_valid = gboolean function(const(GDate)* date);												
    alias da_g_date_valid_day = gboolean function(GDateDay day);												
    alias da_g_date_valid_month = gboolean function(GDateMonth month);											
    alias da_g_date_valid_year = gboolean function(GDateYear year);												
    alias da_g_date_valid_weekday = gboolean function(GDateWeekday weekday);									
    alias da_g_date_valid_julian = gboolean function(guint32 julian_date);										
    alias da_g_date_valid_dmy = gboolean function(GDateDay day, GDateMonth month, GDateYear year);				
    alias da_g_date_get_weekday = GDateWeekday function(const(GDate)* date);									
    alias da_g_date_get_month = GDateMonth function(const(GDate)* date);										
    alias da_g_date_get_year = GDateYear function(const(GDate)* date);											
    alias da_g_date_get_day = GDateDay function(const(GDate)* date);											
    alias da_g_date_get_julian = guint32 function(const(GDate)* date);											
    alias da_g_date_get_day_of_year = guint function(const(GDate)* date);										
    alias da_g_date_get_monday_week_of_year = guint function(const(GDate)* date);								
    alias da_g_date_get_sunday_week_of_year = guint function(const(GDate)* date);								
    alias da_g_date_get_iso8601_week_of_year = guint function(const(GDate)* date);								
    alias da_g_date_clear = void function(GDate* date, guint n_dates);											
    alias da_g_date_set_parse = void function(GDate* date, const(gchar)* str);									
    alias da_g_date_set_time_t = void function(GDate* date, time_t timet);										
    alias da_g_date_set_time_val = void function(GDate* date, GTimeVal* timeval);								
    alias da_g_date_set_time = void function(GDate* date, GTime time_);											
    alias da_g_date_set_month = void function(GDate* date, GDateMonth month);									
    alias da_g_date_set_day = void function(GDate* date, GDateDay day);											
    alias da_g_date_set_year = void function(GDate* date, GDateYear year);										
    alias da_g_date_set_dmy = void function(GDate* date, GDateDay day, GDateMonth month, GDateYear y);			
    alias da_g_date_set_julian = void function(GDate* date, guint32 julian_date);								
    alias da_g_date_is_first_of_month = gboolean function(const(GDate)* date);									
    alias da_g_date_is_last_of_month = gboolean function(const(GDate)* date);									
    alias da_g_date_add_days = void function(GDate* date, guint n_days);										
    alias da_g_date_subtract_days = void function(GDate* date, guint n_days);									
    alias da_g_date_add_months = void function(GDate* date, guint n_months);									
    alias da_g_date_subtract_months = void function(GDate* date, guint n_months);								
    alias da_g_date_add_years = void function(GDate* date, guint n_years);										
    alias da_g_date_subtract_years = void function(GDate* date, guint n_years);									
    alias da_g_date_is_leap_year = gboolean function(GDateYear year);											
    alias da_g_date_get_days_in_month = guint8 function(GDateMonth month, GDateYear year);						
    alias da_g_date_get_monday_weeks_in_year = guint8 function(GDateYear year);									
    alias da_g_date_get_sunday_weeks_in_year = guint8 function(GDateYear year);									
    alias da_g_date_days_between = gint function(const(GDate)* date1, const(GDate)* date2);						
    alias da_g_date_compare = gint function(const(GDate)* lhs, const(GDate)* rhs);								
    alias da_g_date_to_struct_tm = void function(const(GDate)* date, tm* tm);									
    alias da_g_date_clamp = void function(GDate* date, const(GDate)* min_date, const(GDate)* max_date);			
    alias da_g_date_order = void function(GDate* date1, GDate* date2);											
    alias da_g_date_strftime = gsize function(gchar* s, gsize slen, const(gchar)* format, const(GDate)* date);
}

__gshared
{
    da_g_date_new g_date_new; 
    da_g_date_new_dmy g_date_new_dmy; 
    da_g_date_new_julian g_date_new_julian; 
    da_g_date_free g_date_free; 
    da_g_date_valid g_date_valid; 
    da_g_date_valid_day g_date_valid_day; 
    da_g_date_valid_month g_date_valid_month; 
    da_g_date_valid_year g_date_valid_year; 
    da_g_date_valid_weekday g_date_valid_weekday; 
    da_g_date_valid_julian g_date_valid_julian; 
    da_g_date_valid_dmy g_date_valid_dmy; 
    da_g_date_get_weekday g_date_get_weekday; 
    da_g_date_get_month g_date_get_month; 
    da_g_date_get_year g_date_get_year; 
    da_g_date_get_day g_date_get_day; 
    da_g_date_get_julian g_date_get_julian; 
    da_g_date_get_day_of_year g_date_get_day_of_year; 
    da_g_date_get_monday_week_of_year g_date_get_monday_week_of_year; 
    da_g_date_get_sunday_week_of_year g_date_get_sunday_week_of_year; 
    da_g_date_get_iso8601_week_of_year g_date_get_iso8601_week_of_year; 
    da_g_date_clear g_date_clear; 
    da_g_date_set_parse g_date_set_parse; 
    da_g_date_set_time_t g_date_set_time_t; 
    da_g_date_set_time_val g_date_set_time_val; 
    da_g_date_set_time g_date_set_time; 
    da_g_date_set_month g_date_set_month; 
    da_g_date_set_day g_date_set_day; 
    da_g_date_set_year g_date_set_year; 
    da_g_date_set_dmy g_date_set_dmy; 
    da_g_date_set_julian g_date_set_julian; 
    da_g_date_is_first_of_month g_date_is_first_of_month; 
    da_g_date_is_last_of_month g_date_is_last_of_month; 
    da_g_date_add_days g_date_add_days; 
    da_g_date_subtract_days g_date_subtract_days; 
    da_g_date_add_months g_date_add_months; 
    da_g_date_subtract_months g_date_subtract_months; 
    da_g_date_add_years g_date_add_years; 
    da_g_date_subtract_years g_date_subtract_years; 
    da_g_date_is_leap_year g_date_is_leap_year; 
    da_g_date_get_days_in_month g_date_get_days_in_month; 
    da_g_date_get_monday_weeks_in_year g_date_get_monday_weeks_in_year; 
    da_g_date_get_sunday_weeks_in_year g_date_get_sunday_weeks_in_year; 
    da_g_date_days_between g_date_days_between; 
    da_g_date_compare g_date_compare; 
    da_g_date_to_struct_tm g_date_to_struct_tm; 
    da_g_date_clamp g_date_clamp; 
    da_g_date_order g_date_order; 
    da_g_date_strftime g_date_strftime; 
}


