/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.gqueue;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.glist;
extern (C):

alias _GQueue GQueue;

struct _GQueue
{
	GList* head;
	GList* tail;
	guint length;
}													

extern( C ) nothrow 
{
    alias da_g_queue_new = GQueue* function();																						
    alias da_g_queue_free = void function(GQueue* queue);																			
    alias da_g_queue_free_full = void function(GQueue* queue, GDestroyNotify free_func);											
    alias da_g_queue_init = void function(GQueue* queue);																			
    alias da_g_queue_clear = void function(GQueue* queue);																			
    alias da_g_queue_is_empty = gboolean function(GQueue* queue);																	
    alias da_g_queue_get_length = guint function(GQueue* queue);																	
    alias da_g_queue_reverse = void function(GQueue* queue);																		
    alias da_g_queue_copy = GQueue* function(GQueue* queue);																		
    alias da_g_queue_foreach = void function(GQueue* queue, GFunc func, gpointer user_data);										
    alias da_g_queue_find = GList* function(GQueue* queue, gconstpointer data);														
    alias da_g_queue_find_custom = GList* function(GQueue* queue, gconstpointer data, GCompareFunc func);							
    alias da_g_queue_sort = void function(GQueue* queue, GCompareDataFunc compare_func, gpointer user_data);						
    alias da_g_queue_push_head = void function(GQueue* queue, gpointer data);														
    alias da_g_queue_push_tail = void function(GQueue* queue, gpointer data);														
    alias da_g_queue_push_nth = void function(GQueue* queue, gpointer data, gint n);												
    alias da_g_queue_pop_head = gpointer function(GQueue* queue);																	
    alias da_g_queue_pop_tail = gpointer function(GQueue* queue);																	
    alias da_g_queue_pop_nth = gpointer function(GQueue* queue, guint n);															
    alias da_g_queue_peek_head = gpointer function(GQueue* queue);																	
    alias da_g_queue_peek_tail = gpointer function(GQueue* queue);																	
    alias da_g_queue_peek_nth = gpointer function(GQueue* queue, guint n);															
    alias da_g_queue_index = gint function(GQueue* queue, gconstpointer data);														
    alias da_g_queue_remove = gboolean function(GQueue* queue, gconstpointer data);													
    alias da_g_queue_remove_all = guint function(GQueue* queue, gconstpointer data);												
    alias da_g_queue_insert_before = void function(GQueue* queue, GList* sibling, gpointer data);									
    alias da_g_queue_insert_after = void function(GQueue* queue, GList* sibling, gpointer data);									
    alias da_g_queue_insert_sorted = void function(GQueue* queue, gpointer data, GCompareDataFunc func, gpointer user_data);		
    alias da_g_queue_push_head_link = void function(GQueue* queue, GList* link_);													
    alias da_g_queue_push_tail_link = void function(GQueue* queue, GList* link_);													
    alias da_g_queue_push_nth_link = void function(GQueue* queue, gint n, GList* link_);											
    alias da_g_queue_pop_head_link = GList* function(GQueue* queue);																
    alias da_g_queue_pop_tail_link = GList* function(GQueue* queue);																
    alias da_g_queue_pop_nth_link = GList* function(GQueue* queue, guint n);														
    alias da_g_queue_peek_head_link = GList* function(GQueue* queue);																
    alias da_g_queue_peek_tail_link = GList* function(GQueue* queue);																
    alias da_g_queue_peek_nth_link = GList* function(GQueue* queue, guint n);														
    alias da_g_queue_link_index = gint function(GQueue* queue, GList* link_);														
    alias da_g_queue_unlink = void function(GQueue* queue, GList* link_);															
    alias da_g_queue_delete_link = void function(GQueue* queue, GList* link_);		
}

__gshared
{
    da_g_queue_new g_queue_new; 
    da_g_queue_free g_queue_free; 
    da_g_queue_free_full g_queue_free_full; 
    da_g_queue_init g_queue_init; 
    da_g_queue_clear g_queue_clear; 
    da_g_queue_is_empty g_queue_is_empty; 
    da_g_queue_get_length g_queue_get_length; 
    da_g_queue_reverse g_queue_reverse; 
    da_g_queue_copy g_queue_copy; 
    da_g_queue_foreach g_queue_foreach; 
    da_g_queue_find g_queue_find; 
    da_g_queue_find_custom g_queue_find_custom; 
    da_g_queue_sort g_queue_sort; 
    da_g_queue_push_head g_queue_push_head; 
    da_g_queue_push_tail g_queue_push_tail; 
    da_g_queue_push_nth g_queue_push_nth; 
    da_g_queue_pop_head g_queue_pop_head; 
    da_g_queue_pop_tail g_queue_pop_tail; 
    da_g_queue_pop_nth g_queue_pop_nth; 
    da_g_queue_peek_head g_queue_peek_head; 
    da_g_queue_peek_tail g_queue_peek_tail; 
    da_g_queue_peek_nth g_queue_peek_nth; 
    da_g_queue_index g_queue_index; 
    da_g_queue_remove g_queue_remove; 
    da_g_queue_remove_all g_queue_remove_all; 
    da_g_queue_insert_before g_queue_insert_before; 
    da_g_queue_insert_after g_queue_insert_after; 
    da_g_queue_insert_sorted g_queue_insert_sorted; 
    da_g_queue_push_head_link g_queue_push_head_link; 
    da_g_queue_push_tail_link g_queue_push_tail_link; 
    da_g_queue_push_nth_link g_queue_push_nth_link; 
    da_g_queue_pop_head_link g_queue_pop_head_link; 
    da_g_queue_pop_tail_link g_queue_pop_tail_link; 
    da_g_queue_pop_nth_link g_queue_pop_nth_link; 
    da_g_queue_peek_head_link g_queue_peek_head_link; 
    da_g_queue_peek_tail_link g_queue_peek_tail_link; 
    da_g_queue_peek_nth_link g_queue_peek_nth_link; 
    da_g_queue_link_index g_queue_link_index; 
    da_g_queue_unlink g_queue_unlink; 
    da_g_queue_delete_link g_queue_delete_link; 
}