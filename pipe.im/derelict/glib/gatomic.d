/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

module derelict.glib.gatomic;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import core.stdc.config;

extern (C):

extern( C ) nothrow 
{
    alias da_g_atomic_int_get = gint function(gint* atomic);																
    alias da_g_atomic_int_set = void function(gint* atomic, gint newval);													
    alias da_g_atomic_int_inc = void function(gint* atomic);																
    alias da_g_atomic_int_dec_and_test = gboolean function(gint* atomic);													
    alias da_g_atomic_int_compare_and_exchange = gboolean function(gint* atomic, gint oldval, gint newval);					
    alias da_g_atomic_int_add = gint function(gint* atomic, gint val);														
    alias da_g_atomic_int_and = guint function(guint* atomic, guint val);													
    alias da_g_atomic_int_or = guint function(guint* atomic, guint val);													
    alias da_g_atomic_int_xor = guint function(guint* atomic, guint val);													
    alias da_g_atomic_pointer_get = gpointer function(void* atomic);														
    alias da_g_atomic_pointer_set = void function(void* atomic, gpointer newval);											
    alias da_g_atomic_pointer_compare_and_exchange = gboolean function(void* atomic, gpointer oldval, gpointer newval);		
    alias da_g_atomic_pointer_add = gssize function(void* atomic, gssize val);												
    alias da_g_atomic_pointer_and = gsize function(void* atomic, gsize val);												
    alias da_g_atomic_pointer_or = gsize function(void* atomic, gsize val);													
    alias da_g_atomic_pointer_xor = gsize function(void* atomic, gsize val);												
    alias da_g_atomic_int_exchange_and_add = gint function(gint* atomic, gint val);											
}

__gshared 
{
    da_g_atomic_int_get g_atomic_int_get; 
    da_g_atomic_int_set g_atomic_int_set; 
    da_g_atomic_int_inc g_atomic_int_inc; 
    da_g_atomic_int_dec_and_test g_atomic_int_dec_and_test; 
    da_g_atomic_int_compare_and_exchange g_atomic_int_compare_and_exchange; 
    da_g_atomic_int_add g_atomic_int_add; 
    da_g_atomic_int_and g_atomic_int_and; 
    da_g_atomic_int_or g_atomic_int_or; 
    da_g_atomic_int_xor g_atomic_int_xor; 
    da_g_atomic_pointer_get g_atomic_pointer_get; 
    da_g_atomic_pointer_set g_atomic_pointer_set; 
    da_g_atomic_pointer_compare_and_exchange g_atomic_pointer_compare_and_exchange; 
    da_g_atomic_pointer_add g_atomic_pointer_add; 
    da_g_atomic_pointer_and g_atomic_pointer_and; 
    da_g_atomic_pointer_or g_atomic_pointer_or; 
    da_g_atomic_pointer_xor g_atomic_pointer_xor; 
    da_g_atomic_int_exchange_and_add g_atomic_int_exchange_and_add; 
}