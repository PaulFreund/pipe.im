/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/ 

module derelict.glib.goption;

import derelict.glib.gtypes;
import derelict.glib.glibconfig;
import derelict.glib.gerror;
import derelict.glib.gquark;

extern (C):

alias _GOptionContext GOptionContext;
alias _GOptionGroup GOptionGroup;
alias _GOptionEntry GOptionEntry;
alias _Anonymous_0 GOptionFlags;
alias _Anonymous_1 GOptionArg;
alias int function (const(char)*, const(char)*, void*, _GError**) GOptionArgFunc;
alias int function (_GOptionContext*, _GOptionGroup*, void*, _GError**) GOptionParseFunc;
alias void function (_GOptionContext*, _GOptionGroup*, void*, _GError**) GOptionErrorFunc;
alias _Anonymous_2 GOptionError;

enum _Anonymous_0
{
	G_OPTION_FLAG_HIDDEN = 1,
	G_OPTION_FLAG_IN_MAIN = 2,
	G_OPTION_FLAG_REVERSE = 4,
	G_OPTION_FLAG_NO_ARG = 8,
	G_OPTION_FLAG_FILENAME = 16,
	G_OPTION_FLAG_OPTIONAL_ARG = 32,
	G_OPTION_FLAG_NOALIAS = 64
}

enum _Anonymous_1
{
	G_OPTION_ARG_NONE = 0,
	G_OPTION_ARG_STRING = 1,
	G_OPTION_ARG_INT = 2,
	G_OPTION_ARG_CALLBACK = 3,
	G_OPTION_ARG_FILENAME = 4,
	G_OPTION_ARG_STRING_ARRAY = 5,
	G_OPTION_ARG_FILENAME_ARRAY = 6,
	G_OPTION_ARG_DOUBLE = 7,
	G_OPTION_ARG_INT64 = 8
}

enum _Anonymous_2
{
	G_OPTION_ERROR_UNKNOWN_OPTION = 0,
	G_OPTION_ERROR_BAD_VALUE = 1,
	G_OPTION_ERROR_FAILED = 2
}

struct _GOptionEntry
{
	const(gchar)* long_name;
	gchar short_name;
	gint flags;
	GOptionArg arg;
	gpointer arg_data;
	const(gchar)* description;
	const(gchar)* arg_description;
}

struct _GOptionContext;


struct _GOptionGroup;

extern( C ) nothrow 
{
	alias da_g_option_error_quark = GQuark function();																																			
    alias da_g_option_context_new = GOptionContext* function(const(gchar)* parameter_string);																									
    alias da_g_option_context_set_summary = void function(GOptionContext* context, const(gchar)* summary);																						
    alias da_g_option_context_get_summary = const(gchar)* function(GOptionContext* context);																									
    alias da_g_option_context_set_description = void function(GOptionContext* context, const(gchar)* description);																				
    alias da_g_option_context_get_description = const(gchar)* function(GOptionContext* context);																								
    alias da_g_option_context_free = void function(GOptionContext* context);																													
    alias da_g_option_context_set_help_enabled = void function(GOptionContext* context, gboolean help_enabled);																					
    alias da_g_option_context_get_help_enabled = gboolean function(GOptionContext* context);																									
    alias da_g_option_context_set_ignore_unknown_options = void function(GOptionContext* context, gboolean ignore_unknown);																		
    alias da_g_option_context_get_ignore_unknown_options = gboolean function(GOptionContext* context);																							
    alias da_g_option_context_add_main_entries = void function(GOptionContext* context, const(GOptionEntry)* entries, const(gchar)* translation_domain);										
    alias da_g_option_context_parse = gboolean function(GOptionContext* context, gint* argc, gchar*** argv, GError** error);																	
    alias da_g_option_context_set_translate_func = void function(GOptionContext* context, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);									
    alias da_g_option_context_set_translation_domain = void function(GOptionContext* context, const(gchar)* domain);																			
    alias da_g_option_context_add_group = void function(GOptionContext* context, GOptionGroup* group);																							
    alias da_g_option_context_set_main_group = void function(GOptionContext* context, GOptionGroup* group);																						
    alias da_g_option_context_get_main_group = GOptionGroup* function(GOptionContext* context);																									
    alias da_g_option_context_get_help = gchar* function(GOptionContext* context, gboolean main_help, GOptionGroup* group);																		
    alias da_g_option_group_new = GOptionGroup* function(const(gchar)* name, const(gchar)* description, const(gchar)* help_description, gpointer user_data, GDestroyNotify destroy);			
    alias da_g_option_group_set_parse_hooks = void function(GOptionGroup* group, GOptionParseFunc pre_parse_func, GOptionParseFunc post_parse_func);											
    alias da_g_option_group_set_error_hook = void function(GOptionGroup* group, GOptionErrorFunc error_func);																					
    alias da_g_option_group_free = void function(GOptionGroup* group);																															
    alias da_g_option_group_add_entries = void function(GOptionGroup* group, const(GOptionEntry)* entries);																						
    alias da_g_option_group_set_translate_func = void function(GOptionGroup* group, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);											
    alias da_g_option_group_set_translation_domain = void function(GOptionGroup* group, const(gchar)* domain);																					
}

__gshared
{
	da_g_option_error_quark g_option_error_quark; 
    da_g_option_context_new g_option_context_new; 
    da_g_option_context_set_summary g_option_context_set_summary; 
    da_g_option_context_get_summary g_option_context_get_summary; 
    da_g_option_context_set_description g_option_context_set_description; 
    da_g_option_context_get_description g_option_context_get_description; 
    da_g_option_context_free g_option_context_free; 
    da_g_option_context_set_help_enabled g_option_context_set_help_enabled; 
    da_g_option_context_get_help_enabled g_option_context_get_help_enabled; 
    da_g_option_context_set_ignore_unknown_options g_option_context_set_ignore_unknown_options; 
    da_g_option_context_get_ignore_unknown_options g_option_context_get_ignore_unknown_options; 
    da_g_option_context_add_main_entries g_option_context_add_main_entries; 
    da_g_option_context_parse g_option_context_parse; 
    da_g_option_context_set_translate_func g_option_context_set_translate_func; 
    da_g_option_context_set_translation_domain g_option_context_set_translation_domain; 
    da_g_option_context_add_group g_option_context_add_group; 
    da_g_option_context_set_main_group g_option_context_set_main_group; 
    da_g_option_context_get_main_group g_option_context_get_main_group; 
    da_g_option_context_get_help g_option_context_get_help; 
    da_g_option_group_new g_option_group_new; 
    da_g_option_group_set_parse_hooks g_option_group_set_parse_hooks; 
    da_g_option_group_set_error_hook g_option_group_set_error_hook; 
    da_g_option_group_free g_option_group_free; 
    da_g_option_group_add_entries g_option_group_add_entries; 
    da_g_option_group_set_translate_func g_option_group_set_translate_func; 
    da_g_option_group_set_translation_domain g_option_group_set_translation_domain; 
}







